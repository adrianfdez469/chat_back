{"version":3,"sources":["components/recoil/atoms.js","components/uiComponents/notification/notification.atom.js","components/uiComponents/notification/notification.hook.js","view/signin/forgotpass/forgotPass.view.js","conf/configuration.js","view/signin/forgotpass/forgotPass.controller.js","view/signin/forgotpass/index.js","view/signin/signin.view.js","utils/socket.js","authMiddleware.js","view/signin/signin.controller.js","view/signin/index.js","components/recoil/selectors.js","utils/axiosHook.js","view/contacts/contact/acceptInvAction/acceptinv.view.js","view/contacts/contact/acceptInvAction/acceptInv.controller.js","view/contacts/contact/acceptInvAction/index.js","view/contacts/contact/declineInvAction/declineinv.view.js","view/contacts/contact/declineInvAction/declineInv.controller.js","view/contacts/contact/declineInvAction/index.js","view/contacts/contact/deleteAction/delete.view.js","view/contacts/contact/deleteAction/delete.controller.js","view/contacts/contact/deleteAction/index.js","view/contacts/contact/blockAction/block.view.js","view/contacts/contact/blockAction/block.controller.js","view/contacts/contact/blockAction/index.js","view/contacts/contact/contactAction.proxy.js","view/contacts/contact/contact.view.js","view/contacts/contact/contact.controller.js","view/contacts/contact/index.js","view/contacts/contacs.view.js","view/contacts/contacts.controller.js","view/contacts/index.js","view/mainButton/mainButton.view.js","view/addContact/addContact.view.js","view/addContact/addContact.controller.js","view/addContact/index.js","view/mainButton/mainButton.controller.js","view/mainButton/index.js","view/main/main.view.js","view/main/index.js","utils/useLogout.js","view/toolbar/profileOptions/changepass/changepass.view.js","view/toolbar/profileOptions/changepass/changepass.controller.js","view/toolbar/profileOptions/changepass/index.js","view/toolbar/profileOptions/changeavatar/changeavatar.view.js","view/toolbar/profileOptions/changeavatar/changeavatar.controller.js","view/toolbar/profileOptions/changeavatar/index.js","view/toolbar/profileOptions/editprofile/editprofile.view.js","view/toolbar/profileOptions/editprofile/editprofile.controller.js","view/toolbar/profileOptions/editprofile/index.js","view/shareapp/shareapp.view.js","view/shareapp/shareapp.controller.js","view/shareapp/index.js","view/feedback/feedback.view.js","view/feedback/feeedback.controller.js","view/feedback/index.js","view/bugreport/bugreport.view.js","view/bugreport/bugreport.controller.js","view/bugreport/index.js","view/toolbar/profileOptions/profileOpt.view.js","view/toolbar/profileOptions/profileOpt.controller.js","view/toolbar/profileOptions/index.js","view/toolbar/toolbar.view.js","view/toolbar/toolbar.controller.js","view/toolbar/index.js","view/chat/chatHeader/chatHeader.view.js","view/chat/chatHeader/chatHeader.controller.js","view/chat/chatHeader/index.js","view/chat/chatBody/chatBody.view.js","view/chat/chatBody/chatBody.controller.js","view/chat/chatBody/index.js","view/chat/chatEditor/chatEditor.view.js","view/chat/chatEditor/chatEditor.controller.js","view/chat/chatEditor/index.js","view/chat/chat.view.js","view/chat/index.js","view/signup/signup.view.js","view/signup/signup.controller.js","view/signup/index.js","components/uiComponents/notification/notification.view.js","components/uiComponents/index.js","view/changepass/changepass.view.js","view/changepass/changepass.controller.js","view/changepass/index.js","view/activateuser/activateuser.view.js","view/activateuser/activateuser.controller.js","view/activateuser/index.js","components/events/newUserSubscriber.js","components/events/userDisconnectSubscriber.js","components/events/incomingMsgSubscriber.js","components/events/declinedFriendshipSubscriber.js","components/events/requestFriendshipSubscriber.js","components/events/acceptedFriendshipSubscriber.js","components/events/deletedContactSubscriber.js","components/events/blokedContactSubscriber.js","components/events/recibedMessageSubscriber.js","utils/useRefreshToken.js","App.js","serviceWorker.js","index.js"],"names":["idiomaState","atom","key","default","idioma","userLang","navigator","language","userLanguage","test","getDefaultLanguage","loginData","userAvatarState","chatConversation","contactListState","subscribeToEventsState","addContactViewOpenState","friendsAtom","activeChatWith","getConversationWithContact","contactId","tokenTimeoutAtom","tokentimeout","darkModeAtom","localStorage","getItem","notificationAtom","open","autoHideDuration","severity","msg","NotificationHook","useRecoilState","notificationState","setNotificationState","defaultToOpem","openSpecificNotification","openNotification","properties","openSuccessNotification","openErrorNotification","openInfoNotification","openWarningNotification","ForgotPassView","forgetPassHandler","forgotWinState","forgotWinOk","onChangeForgotEmail","forgotEmailState","Dialog","onClose","aria-labelledby","DialogTitle","id","text","title","DialogContent","DialogContentText","forgotText","TextField","autoFocus","margin","label","email","type","fullWidth","onChange","value","helperText","valid","invalidEmail","error","DialogActions","Button","onClick","color","forgotBtnCancel","forgotBtnOk","DEFAULT_CONFIG","server","location","origin","ForgotPassController","useState","setForgotEmailStste","target","axios","post","hostname","window","host","then","resp","status","emailSended","catch","err","response","emailNotFound","ForgotPass","props","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","submit","link","cursor","textDecoration","SignIn","emailRef","passRef","onSignIn","rememberChecked","onRememberChange","classes","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","signin","noValidate","required","name","autoComplete","inputRef","password","FormControlLabel","control","Checkbox","checked","rememberme","Grid","container","item","xs","Link","forgotpassword","to","gosignup","socket","AuthMiddleware","nextOptimisticAction","a","token","token_expires","Date","getTime","dataOptimistic","SigninController","setIdiomaState","setUserAvatarState","useSetRecoilState","setTokenTimeOut","setLoginData","redirectState","setRedirect","useRef","remember","setRemember","setforgotWinState","useEffect","authMiddleware","data","_id","nickname","firstName","lastName","gender","avatarUrl","setItem","timeleft","userId","console","log","current","event","preventDefault","removeItem","refresh_token","refresh_token_expires","notAuthorized","internalError","Signin","friendSelector","selector","get","length","sort","f1","f2","friendShipStatus","socketId","set","action","payload","oldFriends","friends","push","friend","fIndex","findIndex","f","slice","concat","index","unread","dataObj","map","cantidad","lastMsg","lastMessage","datetime","filter","friendId","Array","isArray","idx","dat","conectedFriendName","updatedFriend","notification","disconectedFriendName","initConversationSelector","conversation","getMessageState","userOriginId","UserDestinyId","readed","oldConversation","message","content","state","userOrigin","userDestiny","addMsgToConversationSelector","newMessageObj","messageId","editMsgToStateSavedSelector","consecutive","modMessage","editAllMsgToReadedSelector","useAxiosHook","useNotificationHook","postRequest","url","bodyParams","doFnAfterSuccess","doFnAfterError","messageOnSuccess","messageOnError","authMidleware","headers","AcceptInvActionView","MenuItem","ListItemIcon","fontSize","ListItemText","primary","acceptInv","socketClient","getSocket","openSocket","close","AcceptInvActionController","preAction","contact","useRecoilValue","userData","friendDispatcher","acceptedUserId","emit","accepterId","socketIdRequester","errorAccepting","AcceptInv","DeclineInvActionView","decline","DeclineInvActionController","declinedUserId","declinerId","declinedId","socketIdDeclined","errorDeclining","DeclineInv","DeleteActionView","delete","DeleteActionController","deletedUserId","onDeleteError","deleterId","socketIdDeleted","DeleteAction","BlockActionView","block","BlockActionController","blokedUserId","onBlockError","blokerId","socketIdBloked","BlockAction","ContactActionProxy","handleClose","useStyle","infoIcon","marginRight","overflow","textAlign","flex","padding","transition","borderRadius","border","outline","position","userSelect","verticalAlign","justifyContent","listItemText","paddingRight","primaryText","secondaryText","avatarMan","getContrastText","blue","avatarWoman","pink","OnlineStyledBadge","withStyles","badge","boxShadow","top","left","height","animation","transform","opacity","Badge","OfflineStyledBadge","grey","OnlineBadge","overlap","anchorOrigin","vertical","horizontal","children","StyledMenu","Menu","elevation","getContentAnchorEl","transformOrigin","useCustomTooltipGreenStyle","arrow","green","tooltip","useCustomTooltipRedStyle","red","CustomTooltip","classesRed","classesGreen","Tooltip","ContactView","React","memo","handleMenu","anchorEl","openChat","options","locale","es","lastMsgTime","formatRelative","ListItem","button","ListItemAvatar","badgeContent","src","friendShipStatusCode","secondaryTypographyProps","style","ListItemSecondaryAction","IconButton","edge","aria-label","keepMounted","Boolean","Divider","ContactContrller","setAnchorEl","setActiveChat","useCallback","currentTarget","notifyTo","Contact","ContactsView","contacts","List","align","goMakeFriends","beta","ContactsController","setSubscribeToEvents","searchFriends","errorLoadingFriends","errorLoadingFriendsData","contactsData","Contacts","speedDial","bottom","right","icon","MainButtonView","handleOpen","openAddContactView","SpeedDial","ariaLabel","SpeedDialIcon","onOpen","SpeedDialAction","tooltipTitle","addContact","tooltipOpen","sendAll","alert","dialogContent","search","shape","fade","common","white","marginLeft","searchIcon","pointerEvents","inputRoot","inputInput","paddingLeft","transitions","create","UserItem","user","sendFriendRequest","blockinguser","disabled","InputSearch","buscarUsuarios","inputSearchRef","searchState","setSearchState","InputBase","onKeyPress","charCode","placeholder","root","input","inputProps","endAdornment","InputAdornment","size","AddContactView","closeAddContactWin","users","onEntering","dialogTitle","dividers","minHeight","AddContactController","addContactState","setAddContactState","setUsers","stringPattern","start","limit","lbErrorLoadingUsers","userIdRequester","userIdRequested","lbErrorSendigFriendRequest","AddContact","MainButtonController","setOpen","addContactViewState","setAddContactViewState","MainButton","overflowY","background","MainView","MainContainer","useLogout","setUserAvatar","setSubscribe","setContactList","setFriends","client","usePassStyles","ChangepassView","oldPassState","passState","pass2State","onOldPassChange","onPassChange","onPass2Change","submitPass","oldpassword","invalidOldPass","invalidPass","repeatPassword","passNotEqual","changePass","ChangepassController","logout","setOldPassState","setPassState","setPass2State","oldPassword","passChangeOk","passChange403Error","passChangeError","ChangePass","avatarEdit","marginBottom","ChangeAvatarView","preview","setPreview","avatarRef","onAvatarChange","onCrop","prev","closeIconColor","choosefile","ref","btnCambiar","ChangeavatarController","setAvatar","previewAvatar","setPreviewAvatar","onError","ChangeAvatar","customSwitch","alignSelf","CustomSwitch","switchBase","borderColor","track","Switch","EditProfileView","isOpen","setClose","nameState","nicknameState","emailState","onNameChange","onEmailChange","onNickNameChange","onLastNameChange","onSwitchGender","onSave","avatarSrc","sm","male","female","save","EditProfileController","setUserData","useNotification","setEmailState","setNickNameState","setNameState","setLastName","setGender","oldState","newUserData","onSaveSuccess","duplicated","EditProfile","ShareAppView","onSend","winTitle","send","ShareAppController","sendSuccess","emailExist","ShareApp","labels","0","0.5","1","1.5","2","2.5","3","3.5","4","4.5","5","ratingRow","FeedbackView","globalState","comentState","onCommentChange","RatingRowStars","ratingType","lbAverage","Rating","readOnly","overall","precision","Box","ml","comment","multiline","rowsMax","setstate","newValue","onChangeActive","FeedbackController","setComntState","design","performance","usability","setGlobalState","calcProm","desing","cant","promedio","restoProm","lbOnLoadError","rating","stateObj","designRating","performaceRating","usabilityRating","lbOnSaveError","lbOnsaveOk","Feedback","BugReportView","report","rows","BugReportController","description","sendError","sendOk","BugReport","cardHeaderAction","cardHeaderContent","overflowX","langSelect","fontFamily","fontWeight","lineHeight","letterSpacing","useSmallPhotoCameraButtonStyle","iconButton","SmallPhotoCameraButton","ProfileView","changeIdioma","darkMode","changeTheme","setChangePass","changeAvatar","setChangeAvatar","editProfile","setChangeProfile","shareApp","setShareApp","feedback","setFeedback","bugreport","setBugreport","Card","CardHeader","subheader","edit","primaryTypographyProps","editpass","FormControl","Select","displayEmpty","share","shareDesc","feedbackDesc","reportDesc","ProfileOptController","setChangePassword","setChangeAvat","setEditProfileState","setShareAppState","setFeedbackState","setBugreportState","setIdioma","setDarkMode","lang","oldMode","ProfileOptions","flexGrow","menuButton","ToolbarView","AppBar","aria-controls","aria-haspopup","Popover","ToolbarController","Toolbar","grow","customAppBar","breakpoints","up","values","ChatHeaderView","closeChat","noWrap","ChatHeaderController","idContact","setActiveChatWith","find","ChatHeader","useMessageStyle","info","dark","contrastText","timeMessage","typography","subtitle2","mymsg","notmymsg","msgAvatar","myMsgAvatar","notMyMsgAvatar","doneIcon","Message","msgStyle","avatarStyle","date","stateIcon","lightGreen","alt","useChatStyle","offset","mixins","toolbar","offsetDown","ChatBodyView","messages","element","document","getElementById","scrollTop","scrollHeight","elem","arr","ChatBodyController","initConversation","userDate","errorLoadConversation","readerId","messengerId","messengerSocketId","ChatBody","appBar","textarea","maxHeight","ChatEditorView","sendMessage","refAreaTexto","keyPress","role","contentEditable","ChatEditorController","addMsgToConversation","setConsecutive","innerText","replace","userDestinyId","toSocketId","focus","notEditable","ChatEditor","ChatView","Chat","SignUp","onSignUp","lastNameRef","signup","justify","SignupController","userCreated","Signup","Alert","NotificationView","setNotState","reason","Snackbar","Notification","ChangePassView","withRouter","match","params","paddingTop","actionsContainer","Stepper","combo","minWidth","avatarPink","avatarBlue","blueGrey","avatarButton","ActivateUserView","activeStep","handleFinish","handleLanguageChange","sexSelectHandler","sexState","setNicknameHandler","goNextConf","goBackConf","sendActivation","activationError","isUserInvited","onChangePass","hello","hello1","descriptionText","orientation","Step","StepLabel","labelIdioma","StepContent","english","spanish","next","labelSexo","back","labelNickname","labelAvatar","pass","label1","label3","content3","goLogin","setActiveStep","setActivationError","setSexState","setNickname","invited","ActivateUser","UserSubscriber","enqueueSnackbar","useSnackbar","on","connected","off","disconnected","IncomingMsgSubscriber","setConvertation","newStateObj","myMsg","active","novistos","DeclinedFriendshipSubscriber","useNotifications","socketIdDecliner","declinedInv","RequestFriendSubscriber","requestedInv","AcceptedFriendshipSubscriber","socketIdAccepter","accept","DeletedContactSubscriber","socketIdDeleter","BlokedContactSubscriber","RecibedMessageSubscriber","editMsgToStateSaved","editAllMsgToReaded","activeChatContactId","socketIdSender","writingYou","soketIdContact","useRefreshToken","setTokenTimeout","new_token","new_refresh_token","new_token_expires","new_refresh_token_expires","TimerCmp","refreshToken","timeoutData","setTimeout","themeDark","createMuiTheme","themeDefault","App","subscribe","chatWith","notistackRef","createRef","onClickDismiss","closeSnackbar","cmp","path","exact","render","ThemeProvider","maxSnack","preventDuplicate","from","ReactDOM","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.752d241a.chunk.js","sourcesContent":["\r\nimport {atom, selector} from 'recoil';\r\n\r\nconst getDefaultLanguage= () => {\r\n    let idioma = 'en';\r\n    var userLang = navigator.language || navigator.userLanguage;\r\n    if(/^(es-).+/.test(userLang)){\r\n        idioma = 'es';\r\n    }\r\n    return idioma;\r\n}\r\n\r\nconst idiomaState = atom({\r\n    key: 'idiomaState',\r\n    default: getDefaultLanguage()\r\n});\r\n\r\nconst loginData = atom({\r\n    key: 'loginData',\r\n    default: null\r\n});\r\nconst userAvatarState = atom({\r\n    key: 'userAvatarState',\r\n    default: null\r\n});\r\n\r\n\r\n\r\nconst chatConversation = atom({\r\n    key: 'chatConversation',\r\n    default: {\r\n        'active': false\r\n    }\r\n});\r\n\r\nconst contactListState = atom({\r\n    key: 'contactListState',\r\n    default: []\r\n});\r\n\r\n\r\nconst view = {\r\n    posibleViews: {\r\n        LOGIN: 'LOGIN',\r\n        CONTACTS: 'CONTACTS',\r\n        CHAT: 'CHAT'\r\n    },\r\n    getAtom: atom({\r\n        key: 'view',\r\n        default: 'LOGIN'\r\n    })\r\n};\r\n\r\nconst backdropState = atom({\r\n    key: 'backdropState',\r\n    default: false\r\n});\r\n\r\nconst subscribeToEventsState = atom({\r\n    key: 'subscribeToEventsState',\r\n    default: false\r\n})\r\n\r\nconst addContactViewOpenState = atom({\r\n    key: 'addContactViewOpenState',\r\n    default: false\r\n});\r\n\r\nconst friendsAtom = atom({\r\n    key: 'friendsAtom',\r\n    default: []\r\n});\r\n\r\nconst activeChatWith = atom({\r\n    key: 'activeChatWith',\r\n    default: null\r\n});\r\n\r\nconst getConversationWithContact = contactId => atom({\r\n    key: `conversationWith_${contactId}`,\r\n    default: []\r\n});\r\n\r\nconst messagesAtom = atom({\r\n    key: 'messagesAtom',\r\n    default: null\r\n});\r\n\r\nconst tokenTimeoutAtom = atom({\r\n    key: 'tokenTimeoutAtom',\r\n    default: {\r\n        tokentimeout: 0\r\n    }\r\n});\r\n\r\nconst darkModeAtom = atom({\r\n    key: 'themeAtom',\r\n    default: localStorage.getItem('darkMode') === 'true' ? true : false\r\n});\r\n\r\nexport {idiomaState, loginData, chatConversation, view, contactListState, subscribeToEventsState, \r\n    backdropState, userAvatarState, addContactViewOpenState,\r\n    friendsAtom, \r\n    activeChatWith, messagesAtom, getConversationWithContact, tokenTimeoutAtom, darkModeAtom\r\n};","import {atom} from 'recoil';\r\n\r\nconst notificationAtom = atom({\r\n    key: \"notificationAtom\",\r\n    default: {\r\n        open: false,\r\n        autoHideDuration: 6000,\r\n        severity: 'success',\r\n        msg: \"\"\r\n    }\r\n});\r\n\r\nexport {notificationAtom};","import React from 'react';\r\nimport {useRecoilState} from 'recoil'\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\nconst NotificationHook = () => {\r\n    \r\n    const [notificationState, setNotificationState] = useRecoilState(notificationAtom);\r\n\r\n    const defaultToOpem = {\r\n        ...notificationState,\r\n        open: true,\r\n        autoHideDuration: 3000\r\n    };\r\n\r\n    const openNotification = properties => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            ...properties\r\n        });\r\n    }\r\n\r\n    const openSpecificNotification = (severity, msg) => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            severity: severity,\r\n            msg: msg\r\n        });\r\n    }\r\n\r\n    const openSuccessNotification = msg => {\r\n        openSpecificNotification(\"success\",msg);\r\n    }\r\n\r\n    const openWarningNotification = msg => {\r\n        openSpecificNotification(\"warning\",msg);\r\n    }\r\n\r\n    const openErrorNotification = msg => {\r\n        openSpecificNotification(\"error\",msg);\r\n    }\r\n\r\n    const openInfoNotification = msg => {\r\n        openSpecificNotification(\"info\",msg);\r\n    }\r\n\r\n    return {    \r\n        openNotification: openNotification,\r\n        openSuccessNotification: openSuccessNotification,\r\n        openErrorNotification: openErrorNotification,\r\n        openInfoNotification: openInfoNotification,\r\n        openWarningNotification: openWarningNotification\r\n    };\r\n\r\n}\r\nexport default NotificationHook;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@material-ui/core';\r\nimport text from './idioma.json';\r\n\r\n\r\n\r\nconst ForgotPassView = ({idioma, forgetPassHandler, forgotWinState, forgotWinOk, onChangeForgotEmail, forgotEmailState}) => {\r\n\r\n    return (\r\n        <Dialog open={forgotWinState} onClose={forgetPassHandler} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">{text.title[idioma]}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {text.forgotText[idioma]}\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label={text.email[idioma]}\r\n            type=\"email\"\r\n            fullWidth\r\n            onChange={onChangeForgotEmail}\r\n            value={forgotEmailState.value}\r\n            helperText={!forgotEmailState.valid ? text.invalidEmail[idioma] : ''}\r\n            error={!forgotEmailState.valid}\r\n\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={forgetPassHandler} color=\"primary\">\r\n            {text.forgotBtnCancel[idioma]}\r\n          </Button>\r\n          <Button onClick={forgotWinOk} color=\"primary\">\r\n            {text.forgotBtnOk[idioma]}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n\r\n}\r\nexport default ForgotPassView;","const DEV = {\r\n    server: \"http://localhost:3001\"\r\n}\r\nconst PROD = {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    server: location.origin //\"https://shut-app-back.herokuapp.com\"\r\n}\r\n\r\nexport const DEFAULT_CONFIG = process.env.NODE_ENV === \"development\" ? DEV : PROD;","import React, {useState} from 'react';\r\nimport NotificationHook from '../../../components/uiComponents/notification/notification.hook';\r\nimport text from './idioma.json';\r\nimport ForgotPassView from './forgotPass.view';\r\nimport axios from 'axios';\r\nimport {DEFAULT_CONFIG} from '../../../conf/configuration';\r\n\r\n\r\nconst ForgotPassController = ({idioma, forgotWinState, forgetPassHandler}) => {\r\n\r\n    const [forgotEmailState, setForgotEmailStste] = useState({value:'', valid:true});\r\n    const {openSuccessNotification, openErrorNotification} = NotificationHook();\r\n\r\n    const onChangeForgotEmail = ({target: {value}}) => {\r\n        setForgotEmailStste({...forgotEmailState, valid: true, value: value});\r\n    }\r\n\r\n    const forgotWinOk = () => {        \r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(forgotEmailState.value)){\r\n            setForgotEmailStste({...forgotEmailState, valid: false});\r\n        }else{\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/forgot`, {\r\n                email: forgotEmailState.value,\r\n                hostname: window.location.host\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 201){\r\n                    // Send a notification\r\n                    openSuccessNotification(text.emailSended[idioma]);\r\n                }\r\n                forgetPassHandler();\r\n\r\n            })\r\n            .catch(err => {\r\n                if(err.response.status === 404){\r\n                    openErrorNotification(text.emailNotFound[idioma]);\r\n                }else{\r\n                    openErrorNotification(text.error[idioma]);\r\n                }\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n    return <ForgotPassView \r\n        idioma={idioma}\r\n        forgotWinState={forgotWinState}\r\n        onChangeForgotEmail={onChangeForgotEmail}\r\n        forgotWinOk={forgotWinOk}\r\n        forgotEmailState={forgotEmailState}\r\n        setForgotEmailStste={setForgotEmailStste}\r\n        forgetPassHandler={forgetPassHandler}\r\n    />;\r\n\r\n}\r\nexport default ForgotPassController;","import React from 'react';\r\nimport ForgotPassController from './forgotPass.controller';\r\n\r\nconst ForgotPass = props => {\r\n\r\n    return <ForgotPassController {...props}/>;\r\n\r\n}\r\nexport default ForgotPass;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport ForgotPass from './forgotpass';\r\nimport text from './idioma.json'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  link: {\r\n    cursor: 'pointer',\r\n    textDecoration: 'none',\r\n    color: theme.palette.text.secondary,\r\n    '&:hover':{\r\n        textDecoration: 'underline',\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function SignIn({idioma, emailRef, passRef, onSignIn, rememberChecked, onRememberChange, \r\n  forgetPassHandler, forgotWinState}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {text.signin[idioma]}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label={text.email[idioma]}\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            inputRef={emailRef}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label={text.password[idioma]}\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            inputRef={passRef}\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" checked={rememberChecked} onChange={onRememberChange}/>}\r\n            label={text.rememberme[idioma]}\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={onSignIn}            \r\n          >\r\n            {text.signin[idioma]}\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Link className={classes.link} onClick={forgetPassHandler}>\r\n                {text.forgotpassword[idioma]}\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n                {\r\n                <RouterLink to=\"/signup\" /*style={{textDecoration: 'none'}}*/ className={classes.link}>\r\n                    \r\n                    {text.gosignup[idioma]}\r\n                    \r\n                </RouterLink>\r\n                }\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <ForgotPass idioma={idioma} forgotWinState={forgotWinState} forgetPassHandler={forgetPassHandler}/>\r\n\r\n    </Container>\r\n  );\r\n}","import openSocket from 'socket.io-client'; \r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nlet socket;\r\n\r\nconst socketClient = \r\n {   \r\n    getSocket: () => {\r\n        if(!socket){\r\n            socket = openSocket(DEFAULT_CONFIG.server);\r\n            return socket;    \r\n        }\r\n        return socket;\r\n    },\r\n    close: () => {\r\n        socket.close();\r\n    }\r\n};\r\n\r\nexport default socketClient;","const AuthMiddleware = async (nextOptimisticAction) => {\r\n    // Revisar si el token esta en timepo\r\n    const token = localStorage.getItem('token');\r\n    const token_expires = localStorage.getItem('token_expires');\r\n\r\n    if (token && token_expires && new Date(token_expires).getTime() > new Date().getTime()) {\r\n      const dataOptimistic = await nextOptimisticAction(token);\r\n      return dataOptimistic;\r\n    } \r\n  }\r\n\r\n  \r\n  export default AuthMiddleware;","import React, {useRef, useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useSetRecoilState, useRecoilState} from 'recoil';\r\nimport {idiomaState, /*authTokenState,*/ userAvatarState, loginData, tokenTimeoutAtom} from '../../components/recoil/atoms';\r\nimport Signin from \"./signin.view\";\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport NotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport text from './idioma.json';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\nconst SigninController = props => {\r\n\r\n    const [idioma, setIdiomaState] = useRecoilState(idiomaState);\r\n    //const setAuthTokenState = useSetRecoilState(authTokenState);\r\n    const setUserAvatarState = useSetRecoilState(userAvatarState);\r\n    const setTokenTimeOut = useSetRecoilState(tokenTimeoutAtom);\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const [redirectState, setRedirect] = useState(null);\r\n    const {openErrorNotification} = NotificationHook();\r\n    const emailRef = useRef('');\r\n    \r\n    const passRef = useRef('');\r\n    const [remember, setRemember] = useState(false);\r\n    const [forgotWinState, setforgotWinState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        \r\n        const optimisticAction = token => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/loginWithToken`,{\r\n                token: token\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    const {\r\n                        token, token_expires, _id, nickname, firstName,\r\n                        lastName, email, gender, language, avatarUrl\r\n                    } = resp.data;\r\n    \r\n                    \r\n                    localStorage.setItem('token', token);\r\n                    localStorage.setItem('token_expires', token_expires);\r\n                    setTokenTimeOut({\r\n                        timeleft: token_expires\r\n                    });\r\n    \r\n                    setLoginData({\r\n                        userId: _id, \r\n                        nickname: nickname,\r\n                        firstName: firstName,\r\n                        lastName: lastName,\r\n                        email: email,\r\n                        gender: gender\r\n                    });\r\n                    setIdiomaState(language);\r\n                    setUserAvatarState(`${DEFAULT_CONFIG.server}${avatarUrl}`);\r\n\r\n                    setRedirect(true);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log('Error al cargar los datos del usuario usando el token');\r\n            })\r\n        }\r\n        \r\n        authMiddleware(optimisticAction);\r\n\r\n\r\n\r\n        if(localStorage.email && localStorage.password && localStorage.rememberme){\r\n            emailRef.current.value = localStorage.email;\r\n            passRef.current.value = localStorage.password;\r\n            setRemember(true);\r\n        }\r\n    },[])\r\n\r\n    const forgetPassHandler = () => {\r\n        setforgotWinState(!forgotWinState);\r\n    }\r\n\r\n    \r\n\r\n    const onSignIn = (event) => {\r\n        event.preventDefault();\r\n        \r\n        if(remember === true){\r\n            localStorage.setItem('email', emailRef.current.value);\r\n            localStorage.setItem('password', passRef.current.value);\r\n            localStorage.setItem('rememberme', true);\r\n        }else{\r\n            localStorage.removeItem('email');\r\n            localStorage.removeItem('password');\r\n            localStorage.removeItem('rememberme');\r\n        }\r\n\r\n        axios.post(`${DEFAULT_CONFIG.server}/users/login`, {\r\n            email: emailRef.current.value,\r\n            password: passRef.current.value\r\n        })\r\n        .then(resp => {\r\n            if(resp.status === 200){\r\n                \r\n                const {\r\n                    token, token_expires, _id, nickname, firstName,\r\n                    lastName, email, gender, language, avatarUrl,\r\n                    refresh_token, refresh_token_expires\r\n                } = resp.data;\r\n\r\n                \r\n                localStorage.setItem('token', token);\r\n                localStorage.setItem('refresh_token', refresh_token);\r\n                localStorage.setItem('token_expires', token_expires);\r\n                localStorage.setItem('refresh_token_expires', refresh_token_expires);\r\n                setTokenTimeOut({\r\n                    timeleft: token_expires\r\n                });\r\n\r\n                setLoginData({\r\n                    userId: _id, \r\n                    nickname: nickname,\r\n                    firstName: firstName,\r\n                    lastName: lastName,\r\n                    email: email,\r\n                    gender: gender\r\n                });\r\n                setIdiomaState(language);\r\n                setUserAvatarState(`${DEFAULT_CONFIG.server}${avatarUrl}`);\r\n\r\n                setRedirect(true);\r\n\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if(err.response.status === 403){\r\n                openErrorNotification(text.notAuthorized[idioma]);\r\n            }else{\r\n                openErrorNotification(text.internalError[idioma]);\r\n            }\r\n        });\r\n    }\r\n\r\n    if(redirectState){\r\n        return <Redirect to=\"/contacts\" />\r\n    }\r\n    \r\n    return <Signin idioma={idioma} \r\n        emailRef={emailRef}\r\n        passRef={passRef}\r\n        rememberChecked={remember}\r\n        onRememberChange={event => setRemember(event.target.checked)}\r\n        onSignIn={onSignIn}\r\n        forgotWinState={forgotWinState}\r\n        forgetPassHandler={forgetPassHandler}\r\n    />;\r\n\r\n}\r\n\r\nexport default SigninController;\r\n","import React from 'react';\r\nimport SigninController from './signin.controller';\r\nconst Signin = props => {\r\n\r\n    return <SigninController />;\r\n\r\n}\r\nexport default Signin;","import {selector} from 'recoil';\r\n\r\nimport {friendsAtom, idiomaState, messagesAtom, getConversationWithContact} from './atoms';\r\n\r\nconst friendSelector = selector({\r\n    key: 'friendSelector',\r\n    get: ({get}) => {\r\n        if(get(friendsAtom).length > 0){\r\n            const friends = [...get(friendsAtom)];\r\n\r\n            return friends.sort(\r\n                (f1,f2) => {\r\n                    \r\n                    if(f1.friendShipStatus === 1 && f2.friendShipStatus === 1){\r\n                        if(f1.socketId && !f2.socketId) return -1;\r\n                        if(!f1.socketId && f2.socketId) return 1;    \r\n                    }\r\n                    if(f1.friendShipStatus < f2.friendShipStatus) return -1; \r\n                    if(f1.friendShipStatus > f2.friendShipStatus) return 1;\r\n                    if(f1.email < f2.email) return -1; \r\n                    if(f1.email > f2.email) return 1; \r\n                }\r\n            );\r\n        }else{\r\n            return [];\r\n        }\r\n        \r\n    },\r\n    set: async ({set, get}, {action, payload}) => {\r\n\r\n        switch(action){\r\n            case 'initialize': \r\n                set(friendsAtom, oldFriends => {\r\n                    if(oldFriends.length === 0){\r\n                        return payload.friends;\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                break;\r\n            case 'add':\r\n                set(friendsAtom, oldFriends => {\r\n                    const friends = [...oldFriends];\r\n                    friends.push(payload.friend);\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'update':\r\n                set(friendsAtom, oldFriends => {\r\n                    const fIndex = oldFriends.findIndex(f => f.contactId === payload.friend.contactId);\r\n                    const friends = oldFriends.slice(0, fIndex)\r\n                                            .concat([payload.friend])\r\n                                            .concat(oldFriends.slice(fIndex+1));\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'reset_cant_no_leidos':\r\n                set(friendsAtom, oldFriends => {\r\n                    const index = oldFriends.findIndex(friend => friend.contactId === payload.contactId);\r\n                    return oldFriends.slice(0, index).concat([{...oldFriends[index], unread: 0}]).concat(oldFriends.slice(index+1));\r\n                });\r\n                break;\r\n            case 'set_message_info': // Para poner la cantidad de mensajes sin leer, el ultimo mensaje y la fecha del ultimo mensaje\r\n                set(friendsAtom, oldFriends => {\r\n                    const data = payload.dataObj;\r\n                    const newFriends = oldFriends.map(friend => {\r\n                        if(data[friend.contactId]){\r\n                            let cantidad = 0;\r\n                            if(friend.unread){\r\n                                cantidad = friend.unread;\r\n                            }\r\n                            if(data[friend.contactId].cantidad){\r\n                                cantidad += data[friend.contactId].cantidad; \r\n                            }\r\n                            return {...friend, \r\n                                unread:  cantidad,\r\n                                lastMsg: data[friend.contactId].lastMessage,\r\n                                datetime: data[friend.contactId].datetime\r\n                            }\r\n                        }\r\n                        return friend;\r\n                    });\r\n                    return newFriends;\r\n                });\r\n            break;\r\n            case 'delete':\r\n                set(friendsAtom, oldFriends => {\r\n                    return oldFriends.filter(f => f.contactId !== payload.friendId);\r\n                });\r\n                break;\r\n            case 'connect':                \r\n                if(Array.isArray(payload.data)){\r\n                    set(friendsAtom, oldFriends => {\r\n                        return oldFriends.map(friend => {\r\n                            const idx = payload.data.findIndex(dat => dat.userId === friend.contactId);\r\n                            if(idx >= 0){\r\n                                return {...friend, socketId: payload.data[idx].socketId};     \r\n                            }\r\n                            return {...friend};\r\n                        });\r\n                    }); \r\n                }else{\r\n\r\n                    const {userId, socketId} = payload.data;\r\n                    let conectedFriendName = null;\r\n                    let friendShipStatus = 0;\r\n                    \r\n                    set(friendsAtom, oldFriends => {\r\n                        const fIndex = oldFriends.findIndex(f => f.contactId === userId);\r\n                        if(fIndex >= 0){\r\n                            conectedFriendName = oldFriends[fIndex].nickname;\r\n                            friendShipStatus = oldFriends[fIndex].friendShipStatus;\r\n                            const updatedFriend = {...oldFriends[fIndex], socketId: socketId };\r\n                        \r\n                            const friends = oldFriends.slice(0, fIndex)\r\n                                                    .concat([updatedFriend])\r\n                                                    .concat(oldFriends.slice(fIndex+1));\r\n                            return friends;\r\n                        }\r\n                        return oldFriends;\r\n                    });\r\n                    if(conectedFriendName && friendShipStatus === 1)\r\n                        payload.notification(`${conectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'info'});\r\n                }                \r\n                break;\r\n            case 'disconnect':\r\n                let disconectedFriendName = null;\r\n                let friendShipStatus = 0;\r\n                \r\n                set(friendsAtom, oldFriends => {\r\n                    \r\n                    const index = oldFriends.findIndex(friend => friend.socketId === payload.socketId);\r\n                    if(index >= 0){\r\n                        disconectedFriendName = oldFriends[index].nickname;\r\n                        friendShipStatus = oldFriends[index].friendShipStatus;\r\n                        return [...oldFriends].slice(0, index).concat([{...oldFriends[index], socketId: null}]).concat(oldFriends.slice(index+1));\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                if(disconectedFriendName && friendShipStatus === 1)\r\n                    payload.notification(`${disconectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'warning'});\r\n                break;\r\n            \r\n                default: break;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst messageStates = {\r\n    'NINGUNO': 0, // Cuando no es enviado por el propio usuario, sino que se lo enviaron a el, por lo que los estados no tienen sentido para este tipo de mensajes\r\n    'ENVIADO': 1,\r\n    'GUARDADO': 2,\r\n    'LEIDO': 3\r\n};\r\n\r\nconst initConversationSelector = selector({\r\n    key:'conversationSelector',\r\n    set: ({set}, {contactId, conversation}) => {\r\n\r\n        const getMessageState = (userOriginId, UserDestinyId, contactId, readed) => {\r\n\r\n            if(userOriginId === contactId){\r\n                return 0;\r\n            }else if(UserDestinyId === contactId){\r\n                return readed ? 3 : 2;\r\n            }\r\n        }\r\n\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return conversation.map(message => {\r\n                return {\r\n                    _id: message._id,\r\n                    content: message.content,\r\n                    datetime: message.datetime,\r\n                    state: getMessageState(message.userOrigin, message.userDestiny, contactId, message.readed)\r\n                };\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nconst addMsgToConversationSelector = selector({\r\n    key: 'addMessageToConversation',\r\n    set: ({set}, {contactId, messageId, content, datetime, state}) => {\r\n        const newMessageObj = {\r\n            _id: messageId,\r\n            content: content,\r\n            datetime: datetime,\r\n            state: state\r\n        };        \r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation.concat([newMessageObj]);\r\n        });\r\n\r\n    }\r\n});\r\n\r\n\r\nconst editMsgToStateSavedSelector = selector({\r\n    key: 'editMsgToStateSavedSelector',\r\n    set: ({set}, {contactId, messageId, datetime, consecutive}) => {\r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            \r\n            const index = oldConversation.findIndex(message => message._id === consecutive && message.state === 1);\r\n            if(index >= 0){\r\n                const modMessage = {...oldConversation[index], state: 2, _id: messageId, datetime: datetime};\r\n                return oldConversation.slice(0, index).concat([modMessage]).concat(oldConversation.slice(index+1));\r\n            }\r\n            return oldConversation;\r\n        });\r\n    }\r\n});\r\n\r\nconst editAllMsgToReadedSelector = selector({\r\n    key: 'editAllMsgToSavedSelector',\r\n    set: ({set}, {contactId}) => {\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation\r\n                .map(message => {\r\n                    if(message.state !== 0)\r\n                        return {...message, state: 3}\r\n                    else\r\n                        return message;\r\n                });\r\n        });\r\n    }\r\n});\r\n\r\nexport {friendSelector, initConversationSelector, addMsgToConversationSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector}","//import React from 'react';\r\nimport axios from 'axios';\r\n//import {useSetRecoilState} from 'recoil';\r\nimport authMidleware from '../authMiddleware';\r\nimport useNotificationHook from '../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\n//import useBackdrop from '../components/uiComponents/backdrop/useBackdrop';\r\n\r\nconst useAxiosHook = () => {\r\n\r\n    const {openErrorNotification, openSuccessNotification} = useNotificationHook();\r\n    //const {closeBackDrop, showBackDrop} = useBackdrop();\r\n\r\n    const postRequest = ({url, bodyParams= {}, doFnAfterSuccess=null, doFnAfterError = null, messageOnSuccess=null, messageOnError=null}) => {\r\n        \r\n        const optimisticAction = token => {\r\n            //showBackDrop();\r\n            axios.post(`${DEFAULT_CONFIG.server}${url}`, \r\n                bodyParams, \r\n                {\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    //closeBackDrop();\r\n                    if(messageOnSuccess) openSuccessNotification(messageOnSuccess);\r\n                    if(doFnAfterSuccess) doFnAfterSuccess(resp, token);\r\n                })\r\n                .catch(err => {\r\n                    //closeBackDrop();\r\n                    if(messageOnError) openErrorNotification(messageOnError);\r\n                    if(doFnAfterError) doFnAfterError(err);\r\n                })\r\n        }\r\n        /*const pesimisticAction = () => {            \r\n            clearUserData();\r\n        }*/\r\n        \r\n        authMidleware(optimisticAction/*, pesimisticAction*/);\r\n    };   \r\n\r\n\r\n    return {postRequest};\r\n\r\n}\r\nexport default useAxiosHook;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport HowToRegIcon from '@material-ui/icons/HowToReg';\r\n\r\nimport text from './idioma.json';\r\n\r\nconst AcceptInvActionView = ({idioma, onClick}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <HowToRegIcon fontSize=\"small\" color=\"primary\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.acceptInv[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default AcceptInvActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport {idiomaState, loginData/*, updateFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../../components/recoil/selectors';\r\nimport { DEFAULT_CONFIG } from '../../../../conf/configuration';\r\nimport useNotificationHook from '../../../../components/uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../../../authMiddleware';\r\nimport AcceptInvActionView from './acceptinv.view';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../../utils/socket';\r\n\r\nconst AcceptInvActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const {openErrorNotification} = useNotificationHook();\r\n    //const switchContact = useSetRecoilState(updateFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n    const onClick = () => {\r\n        preAction();\r\n        const optimisticAction = token => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/acceptFriendRequest`, {\r\n                acceptedUserId: contact.contactId\r\n            }, {\r\n                headers: {\r\n                    \"Authorization\": token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    //switchContact(resp.data.friend);\r\n                    friendDispatcher({action: 'update', payload: {friend: {...resp.data.friend, socketId: contact.socketId}}});\r\n                    const client = socketClient.getSocket();\r\n                    \r\n                    client.emit('accept friendship', {\r\n                        accepterId: userData.userId,\r\n                        socketIdRequester: contact.socketId,\r\n                        token: token\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.errorAccepting[idioma]);\r\n            });\r\n        }\r\n\r\n        authMiddleware(optimisticAction);\r\n        \r\n    }\r\n\r\n    return <AcceptInvActionView \r\n        idioma={idioma}\r\n        onClick={onClick}\r\n    />;\r\n\r\n}\r\nexport default AcceptInvActionController;","import React from 'react';\r\nimport AcceptInvController from './acceptInv.controller';\r\nconst AcceptInv = props => {\r\n\r\n    return <AcceptInvController {...props}/>;\r\n\r\n}\r\nexport default AcceptInv;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\n\r\nconst DeclineInvActionView = ({idioma, text, onClick}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <ThumbDownAltIcon fontSize=\"small\" color=\"error\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.decline[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default DeclineInvActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport {idiomaState, loginData/*, deleteFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport { friendSelector } from '../../../../components/recoil/selectors';\r\nimport authMiddleware from '../../../../authMiddleware';\r\nimport useNotificationHook from '../../../../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../../../../conf/configuration';\r\nimport socketClient from '../../../../utils/socket';\r\n\r\nimport text from './idioma.json'\r\n\r\nimport DeclineInvActionView from './declineinv.view';\r\n\r\n\r\nconst DeclineInvActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotificationHook();\r\n    //const eliminarContacto = useSetRecoilState(deleteFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n\r\n    const onClick = () => {\r\n        preAction();\r\n        const optimisticAction = token => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/declineFriendRequest`, {\r\n                declinedUserId: contact.contactId\r\n            }, {\r\n                headers: {\r\n                    'Authorization': token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    friendDispatcher({action: 'delete', payload: {friendId: contact.contactId}});\r\n                }\r\n            })\r\n            .then(() => {\r\n                const socket = socketClient.getSocket();\r\n                socket.emit('decline friendship', {\r\n                    declinerId: userData.userId,\r\n                    declinedId: contact.contactId,\r\n                    socketIdDeclined: contact.socketId,\r\n                    token: token\r\n                });\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.errorDeclining[idioma]);\r\n            })\r\n        }\r\n\r\n        authMiddleware(optimisticAction);\r\n        \r\n    }\r\n\r\n    return <DeclineInvActionView \r\n        idioma={idioma}\r\n        onClick={onClick}\r\n        text={text}\r\n    />;\r\n\r\n}\r\nexport default DeclineInvActionController;","import React from 'react';\r\nimport DeclineInvController from './declineInv.controller';\r\nconst DeclineInv = props => {\r\n\r\n    return <DeclineInvController {...props}/>;\r\n\r\n}\r\nexport default DeclineInv;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst DeleteActionView = ({idioma, onClick, text}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <DeleteIcon fontSize=\"small\" color=\"error\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.delete[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default DeleteActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, loginData/*, deleteFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../../components/recoil/selectors';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport DeleteActionView from './delete.view';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../../utils/socket';\r\n\r\nconst DeleteActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    //const deleteFriend = useSetRecoilState(deleteFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n\r\n    const onClick = () => {\r\n\r\n        preAction();\r\n        postRequest({\r\n            url: '/users/deleteContact',\r\n            bodyParams: {deletedUserId: contact.contactId},\r\n            messageOnError: text.onDeleteError[idioma],\r\n            doFnAfterSuccess: (resp, token) => {\r\n                if(resp.status === 200){\r\n                    friendDispatcher({action: 'delete', payload: {friendId: contact.contactId}});\r\n\r\n                    if(contact.friendShipStatus === 1){\r\n                        const client = socketClient.getSocket();\r\n                        client.emit('delete contact', {\r\n                            deleterId: userData.userId,\r\n                            socketIdDeleted: contact.socketId,\r\n                            token: token\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return <DeleteActionView \r\n        idioma={idioma}\r\n        text={text}\r\n        onClick={onClick}\r\n    />;\r\n\r\n}\r\nexport default DeleteActionController;","import React from 'react';\r\nimport DeleteController from './delete.controller';\r\nconst DeleteAction = props => {\r\n\r\n    return <DeleteController {...props} />;\r\n\r\n}\r\nexport default DeleteAction;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport VoiceOverOffIcon from '@material-ui/icons/VoiceOverOff';\r\n\r\nimport text from './idioma.json';\r\n\r\nconst BlockActionView = ({idioma, onClick}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <VoiceOverOffIcon fontSize=\"small\" color=\"error\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.block[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default BlockActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, loginData/*, deleteFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../../components/recoil/selectors';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport BlockActionView from './block.view';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../../utils/socket';\r\n\r\nconst BlockActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    //const deleteContact = useSetRecoilState(deleteFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n    const onClick = () => {\r\n        preAction();\r\n        \r\n        postRequest({\r\n            url: '/users/blockUser',\r\n            bodyParams: {blokedUserId: contact.contactId},\r\n            messageOnError: text.onBlockError[idioma],\r\n            doFnAfterSuccess: (resp, token) => {\r\n                if(resp.status === 200){\r\n                    //deleteContact(contact.contactId);\r\n                    friendDispatcher({action: 'delete', payload: {friendId: contact.contactId}});\r\n                    const client = socketClient.getSocket();\r\n                    client.emit('block contact', {\r\n                        blokerId: userData.userId, \r\n                        socketIdBloked: contact.socketId,\r\n                        token: token\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return <BlockActionView \r\n        idioma={idioma}\r\n        onClick={onClick}\r\n    />;\r\n\r\n}\r\nexport default BlockActionController;","import React from 'react';\r\nimport BlockController from './block.controller';\r\nconst BlockAction = props => {\r\n\r\n    return <BlockController {...props}/>;\r\n\r\n}\r\nexport default BlockAction;","import React from 'react';\r\n\r\nimport AcceptInv from './acceptInvAction';\r\nimport DeclineInv from './declineInvAction';\r\nimport DeleteFriend from './deleteAction';\r\nimport BlockContact from './blockAction';\r\n/*\r\n    1- ACEPTED -> Eliminar, Bloquear\r\n    2- REQUESTED -> Cancelar, Bloquear\r\n    3- ASKED -> Aceptar, Cancelar, bloquear\r\n    4- DECLINED -> Cancelar, Bloquear\r\n    5- Blocked -> Eliminar\r\n    6- Deleted -> Eliminar\r\n*/\r\n\r\nconst ContactActionProxy = ({handleClose, contact}) => {\r\n    \r\n\r\n    const preAction = () => {\r\n        handleClose()\r\n    }\r\n\r\n    \r\n    \r\n    switch(contact.friendShipStatus){\r\n        case 1: return (\r\n            <>\r\n                <DeleteFriend  preAction={preAction} contact={contact}/>\r\n                <BlockContact  preAction={preAction} contact={contact}/>\r\n            </>\r\n            );\r\n        case 2: return (\r\n            <>\r\n                <DeclineInv preAction={preAction} contact={contact}/>\r\n                <BlockContact preAction={preAction} contact={contact}/>\r\n            </>\r\n        ); \r\n        case 3: return (\r\n            <>\r\n                <AcceptInv  preAction={preAction} contact={contact}/>\r\n                <DeclineInv  preAction={preAction} contact={contact}/>\r\n                <BlockContact  preAction={preAction} contact={contact}/>\r\n            </>\r\n        );\r\n        case 4: return (\r\n            <>\r\n                <DeleteFriend  preAction={preAction} contact={contact}/>\r\n                <BlockContact  preAction={preAction} contact={contact}/>\r\n            </>\r\n        );\r\n        case 5: return <DeleteFriend  preAction={preAction} contact={contact}/>;\r\n        case 6: return <DeleteFriend  preAction={preAction} contact={contact}/>;\r\n        default: return null;\r\n    }\r\n}\r\n\r\nexport default ContactActionProxy;","import React from 'react';\r\nimport { formatRelative } from 'date-fns';\r\nimport { es } from 'date-fns/locale';\r\nimport { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, IconButton, Badge, Divider, Menu, Tooltip, Typography } from '@material-ui/core';\r\nimport { red, green, blue, pink } from '@material-ui/core/colors';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport {DEFAULT_CONFIG} from '../../../conf/configuration';\r\n\r\nimport text from './idioma.json';\r\n\r\nimport ActionProxy from './contactAction.proxy';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    infoIcon: {\r\n        marginRight: '-12px',\r\n        overflow: 'visible',\r\n        textAlign: 'center',\r\n        flex: '0 0 auto',\r\n        \r\n        color: 'rgba(0, 0, 0, 0.54)',\r\n        padding: '12px',\r\n        fontSize: '1.5rem',\r\n        transition: 'background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\r\n        borderRadius: '50%',\r\n\r\n        \r\n        border: 0,\r\n        cursor: 'pointer',\r\n        margin: 0,\r\n        display: 'inline-flex',\r\n        outline: 0,\r\n        \r\n        position: 'relative',\r\n        alignItems: 'center',\r\n        userSelect: 'none',\r\n        \r\n        verticalAlign: 'middle',\r\n        \r\n        justifyContent: 'center',\r\n        textDecoration: 'none'\r\n    },\r\n    listItemText: {\r\n        paddingRight: theme.spacing(10)\r\n    },\r\n    primaryText: {\r\n        color: theme.palette.text.primary\r\n    },\r\n    secondaryText: {\r\n        color: theme.palette.text.secondary\r\n    },avatarMan: {\r\n        color: theme.palette.getContrastText(blue[400]),\r\n        backgroundColor: blue[400],\r\n    },\r\n    avatarWoman: {\r\n        color: theme.palette.getContrastText(pink[300]),\r\n        backgroundColor: pink[300],\r\n    },\r\n}));\r\n\r\nconst OnlineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px white`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: '$ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OfflineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: theme.palette.grey[500],\r\n        color: theme.palette.grey[500],\r\n\r\n        \r\n        \r\n        boxShadow: `0 0 0 2px white`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OnlineBadge = props => {\r\n    \r\n    if(props.contact.socketId && props.contact.friendShipStatus === 1){\r\n        return (<OnlineStyledBadge\r\n                overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    variant=\"dot\"\r\n                >\r\n                    {props.children}\r\n                </OnlineStyledBadge>)\r\n            ;\r\n    }\r\n    else {\r\n        return (<OfflineStyledBadge\r\n            overlap=\"circle\"\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                variant=\"dot\"\r\n            >\r\n                {props.children}\r\n            </OfflineStyledBadge>)\r\n        ;\r\n    }\r\n}\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n      border: '1px solid #d3d4d5',\r\n    },\r\n  })((props) => (\r\n    <Menu\r\n      elevation={0}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n      }}\r\n      {...props}\r\n    />\r\n  ));\r\nconst useCustomTooltipGreenStyle = makeStyles((theme) => ({\r\n    arrow: {\r\n      color: green[500]\r\n    },\r\n    tooltip: {\r\n      backgroundColor: green[500]\r\n    },\r\n  }));\r\n  const useCustomTooltipRedStyle = makeStyles((theme) => ({\r\n    arrow: {\r\n      color: red[500]\r\n    },\r\n    tooltip: {\r\n      backgroundColor: red[500]\r\n    },\r\n  }));\r\nconst CustomTooltip = props => {\r\n    const classesRed = useCustomTooltipRedStyle();\r\n    const classesGreen = useCustomTooltipGreenStyle();\r\n\r\n    return <Tooltip arrow classes={props.color === 'red' ? classesRed : classesGreen} {...props} />;\r\n}\r\n\r\n\r\nconst ContactView = React.memo(\r\n    ({idioma, contact, handleMenu,\r\n    handleClose, anchorEl, openChat}) => {\r\n    const lastMsg = contact.lastMsg ? contact.lastMsg : '' ;\r\n    \r\n    const options = idioma === 'es' ? { locale: es } : {};\r\n    const lastMsgTime = contact.datetime ? formatRelative(new Date(contact.datetime), new Date(), options) : '';\r\n    console.log(contact);\r\n    \r\n    \r\n    const classes = useStyle();\r\n    const avatarUrl = contact.avatarUrl ? `${DEFAULT_CONFIG.server}${contact.avatarUrl}` : null;\r\n\r\n    return (<>\r\n        <ListItem button onClick={openChat}>\r\n            <ListItemAvatar>\r\n                <OnlineBadge contact={contact}>\r\n                    {contact.unread && contact.unread > 0 \r\n                    ? <Badge color=\"secondary\" badgeContent={contact.unread}>\r\n                        <Avatar\r\n                            src={avatarUrl}\r\n                            className={contact.gender === \"M\" ? classes.avatarMan : classes.avatarWoman}\r\n                        />\r\n                    </Badge>\r\n                    : <Avatar\r\n                            src={avatarUrl}\r\n                            className={contact.gender === \"M\" ? classes.avatarMan : classes.avatarWoman}\r\n                        />\r\n                    }\r\n                </OnlineBadge>\r\n            </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={contact.nickname}\r\n                    \r\n                    secondary={contact.friendShipStatus > 1 ? text[contact.friendShipStatusCode][idioma] : `${lastMsg.slice(0, 55)}... ${lastMsgTime}`}\r\n                    secondaryTypographyProps={contact.friendShipStatus > 3 \r\n                        ? {\r\n                            style: {color: `${red[500]}`}\r\n\r\n                        } \r\n                        : contact.friendShipStatus < 4 && contact.friendShipStatus > 1 ? {\r\n                            style: {color: `${green[500]}`}\r\n                        } : {}\r\n                    }\r\n                    className={classes.listItemText}\r\n                    classes={{\r\n                        primary: classes.primaryText,\r\n                        secondary: classes.secondaryText\r\n                    }}\r\n                />\r\n                \r\n                {contact.friendShipStatus > 1 ?\r\n                    <CustomTooltip title={text[`desc${contact.friendShipStatusCode}`][idioma]} color={contact.friendShipStatus > 3 ? 'red' : 'geen'}>\r\n                        <div className={classes.infoIcon}>\r\n                            <InfoIcon fontSize=\"small\" style={{color: contact.friendShipStatus > 3 ? red[500] : green[500]}}/>\r\n                        </div>\r\n                    </CustomTooltip>\r\n                : null }\r\n            \r\n            <ListItemSecondaryAction>\r\n                \r\n                \r\n                <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleMenu}>\r\n                    <MoreVertIcon fontSize=\"default\"/>\r\n                </IconButton>\r\n                <StyledMenu\r\n                    id=\"customized-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}\r\n                >   \r\n                    <ActionProxy handleClose={handleClose} contact={contact}/>\r\n                </StyledMenu>\r\n            </ListItemSecondaryAction>\r\n            \r\n        </ListItem>\r\n        <Divider variant=\"inset\" component=\"li\" />\r\n        </>\r\n    );\r\n})\r\n\r\n\r\nexport default ContactView;","import React, {useState, useCallback} from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, activeChatWith, loginData} from '../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../components/recoil/selectors';\r\nimport ContactView from './contact.view';\r\nimport socketClient from '../../../utils/socket';\r\n\r\nconst ContactContrller = ({contact}) => {\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const setActiveChat = useSetRecoilState(activeChatWith);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    \r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    \r\n    const handleClose = useCallback(() => {\r\n        setAnchorEl(null);\r\n    },[]);\r\n\r\n    const openChat = () => {        \r\n        setActiveChat(contact.contactId);\r\n\r\n        // Poner el estado en leidos\r\n        friendDispatcher({\r\n            action: 'reset_cant_no_leidos',\r\n            payload: {\r\n                contactId: contact.contactId,\r\n            }\r\n        });\r\n        // Emit como leidos\r\n        const client = socketClient.getSocket();\r\n        client.emit('read messages', {\r\n            userId: userData.userId,\r\n            contactId: contact.contactId,\r\n            notifyTo: contact.socketId,\r\n            token: localStorage.getItem('token')\r\n        });\r\n    }\r\n\r\n    return <ContactView \r\n        handleMenu={handleMenu}\r\n        handleClose={handleClose}\r\n        contact={contact}\r\n        anchorEl={anchorEl}\r\n        idioma={idioma}\r\n        openChat={openChat}\r\n    />;\r\n\r\n}\r\nexport default ContactContrller;","import React from 'react';\r\n\r\nimport ContactController from './contact.controller';\r\nconst Contact = props => {\r\n\r\n    return <ContactController \r\n        {...props}\r\n    />;\r\n\r\n}\r\nexport default Contact;","import React from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Contact from './contact';\r\n\r\nconst ContactsView = ({idioma, text, contacts}) => {\r\n\r\n    return (\r\n        <List>\r\n            {contacts.length > 0 \r\n                ? contacts.map((contact) => <Contact contact={contact} key={contact.contactId}/>)\r\n                : <>\r\n                <Divider/>\r\n                    <Typography variant=\"h5\" align='justify'>{text.goMakeFriends[idioma]}</Typography>\r\n                    <Divider/>\r\n                    <Typography variant=\"subtitle1\" align='justify' >{text.beta[idioma]}</Typography>\r\n                </>\r\n            }\r\n        </List>\r\n    );\r\n\r\n}\r\nexport default ContactsView;","import React, { useEffect} from 'react';\r\nimport text from './idioma.json';\r\nimport {useRecoilValue, useRecoilState, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, subscribeToEventsState/*friendSelector*/ /*, friendsAtom*/} from '../../components/recoil/atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\n\r\nimport ContactsView from './contacs.view';\r\n\r\n\r\n\r\nconst ContactsController = props => {\r\n\r\n    const setSubscribeToEvents = useSetRecoilState(subscribeToEventsState);\r\n    //const setContacts = useSetRecoilState(friendsAtom);\r\n    const {postRequest} = useAxiosHook();\r\n    \r\n    //const [contacts, addContact] = useRecoilState(friendSelector);\r\n    const [contacts, friendDispatcher] = useRecoilState(friendSelector);\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const getFriendData = () => {\r\n        postRequest({\r\n            url: '/users/getContactData',\r\n            messageOnError: text.errorLoadingFriendsData[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                if(resp.status === 200){\r\n                    friendDispatcher({\r\n                        action: 'set_message_info',\r\n                        payload: {\r\n                            dataObj: resp.data.contactsData\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    const searchFriends = () => {\r\n        \r\n        if(contacts.length === 0){\r\n            \r\n            postRequest({\r\n                url: '/users/searchFirends',\r\n                messageOnError: text.errorLoadingFriends[idioma],\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'initialize', \r\n                            payload: {\r\n                                friends: resp.data.friends\r\n                            }});\r\n                        setSubscribeToEvents(true);\r\n                        if(resp.data.friends.length > 0){\r\n                            getFriendData();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }else{\r\n            console.log('NO LOS MANDA A BUSCAR');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        searchFriends();\r\n    }, []);\r\n\r\n    return <ContactsView \r\n        idioma={idioma}\r\n        contacts={contacts}\r\n        text={text}\r\n\r\n    />;\r\n\r\n}\r\n\r\nexport default ContactsController;","import React from 'react';\r\nimport ContactsController from './contacts.controller';\r\nconst Contacts = props => {\r\n\r\n    return <ContactsController />;\r\n\r\n}\r\nexport default Contacts;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\r\nimport text from './idioma.json'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    speedDial: {\r\n      position: 'absolute',\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n    icon: {\r\n        color: theme.palette.text.secondary\r\n    }\r\n  }));\r\n\r\nconst MainButtonView = ({idioma, handleOpen, handleClose, open, openAddContactView}) => {\r\n\r\n  const classes = useStyles();\r\n  \r\n\r\n    return (\r\n      <>\r\n        <SpeedDial\r\n            ariaLabel=\"SpeedDial tooltip example\"\r\n            className={classes.speedDial}            \r\n            icon={<SpeedDialIcon />}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            open={open}\r\n        >\r\n          <SpeedDialAction\r\n            key='add'\r\n            icon={<PersonAddIcon className={classes.icon}/>}\r\n            tooltipTitle={text.addContact[idioma]}\r\n            tooltipOpen\r\n            onClick={openAddContactView}\r\n          />\r\n          <SpeedDialAction\r\n            key='addgroup'\r\n            icon={<CallSplitIcon className={classes.icon}/>}\r\n            tooltipTitle={text.sendAll[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje de difusion');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          {/*<SpeedDialAction\r\n            key='addgroup'\r\n            icon={<GroupAddIcon className={classes.icon}/>}\r\n            tooltipTitle={text.addGroup[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Crear un grupo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='send'\r\n            icon={<MessageIcon className={classes.icon}/>}\r\n            tooltipTitle={text.sendMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje a un contacto que no esta en tu lista de contacto');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='share'\r\n            icon={<ShareIcon className={classes.icon}/>}\r\n            tooltipTitle={text.shareMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Compartir la aplicacion por correo electronivo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />*/}\r\n        </SpeedDial>\r\n      </>\r\n    );\r\n\r\n}\r\nexport default MainButtonView;","import React from 'react';\r\n\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport { blue, red, grey } from '@material-ui/core/colors';\r\n\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport text from './idioma.json';\r\nimport { ListItemSecondaryAction } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n      backgroundColor: blue[100],\r\n      color: blue[600],\r\n    },\r\n    dialogContent: {\r\n      padding: 0\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n          backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },*/\r\n      },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      inputRoot: {\r\n        color: 'inherit',\r\n      },\r\n      inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n          width: '12ch',\r\n          '&:focus': {\r\n            width: '20ch',\r\n          },\r\n        },*/\r\n      },\r\n\r\n  }));\r\n\r\nconst AddContactView = ({idioma, closeAddContactWin, open,\r\n    buscarUsuarios, users,\r\n    inputSearchRef,\r\n    sendFriendRequest\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Dialog\r\n            maxWidth=\"xs\"\r\n            onEntering={() => {}}\r\n            aria-labelledby=\"confirmation-dialog-title\"\r\n            open={open}\r\n            onClose={closeAddContactWin}\r\n        >\r\n            <DialogTitle id=\"confirmation-dialog-title\" className={classes.dialogTitle}>{text.title[idioma]} </DialogTitle>\r\n            <Divider />\r\n            <InputSearch idioma={idioma} buscarUsuarios={buscarUsuarios} inputSearchRef={inputSearchRef}/>\r\n            <DialogContent dividers className={classes.dialogContent}>\r\n                <List style={{minHeight:'200px'}}>\r\n                    {\r\n                        users.map(user => {\r\n                            return (\r\n                                <UserItem user={user} sendFriendRequest={sendFriendRequest}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={closeAddContactWin} color=\"primary\">\r\n                    {text.close[idioma]}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n\r\n}\r\n\r\nconst UserItem = ({user, sendFriendRequest}) => {\r\n\r\n    const classes = useStyles();\r\n    //const [iconButtonDisabledState, setIconButtonDisabledState] = React.useState(false)\r\n\r\n    const disableItem = () => {\r\n        //setIconButtonDisabledState(true);\r\n        sendFriendRequest(user.userId);\r\n\r\n    }\r\n\r\n    return (\r\n        <ListItem key={user.email} >\r\n            <ListItemAvatar>\r\n                <Avatar className={classes.avatar} src={DEFAULT_CONFIG.server + user.avatarUrl}></Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={user.nickname}\r\n                secondary={user.email}\r\n            />\r\n            \r\n                <ListItemSecondaryAction>\r\n                    <IconButton color={user.blockinguser ? grey[100] : blue[300]} onClick={disableItem} disabled={user.blockinguser}>\r\n                        <AddIcon color={user.blockinguser ? 'disabled' : \"primary\"}/>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            \r\n        </ListItem>\r\n    )\r\n\r\n}\r\n\r\nconst InputSearch = ({idioma, buscarUsuarios, inputSearchRef}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [searchState, setSearchState] = React.useState('');\r\n\r\n    const onChangeSearch = ({target: {value}}) => {\r\n        setSearchState(value);\r\n    }\r\n    const clearSearch = () => {\r\n        setSearchState('');\r\n    }\r\n    const keyPressHandler = (event) => {\r\n        if(event.charCode === 13){\r\n            buscarUsuarios();\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className={classes.search}>\r\n                <div className={classes.searchIcon}>\r\n                    <SearchIcon />\r\n                </div>\r\n                <InputBase\r\n                    onKeyPress={keyPressHandler}\r\n                    placeholder={text.search[idioma]}\r\n                    classes={{\r\n                        root: classes.inputRoot,\r\n                        input: classes.inputInput,\r\n                    }}\r\n                    inputProps={{ 'aria-label': 'search' }}\r\n                    value={searchState}\r\n                    onChange={onChangeSearch}\r\n                    inputRef={inputSearchRef}\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            {searchState !== '' ?\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={clearSearch}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            : null}\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={buscarUsuarios}\r\n                            >\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                        </InputAdornment> \r\n                        \r\n                    }\r\n                />\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default AddContactView;","import React, {useState, useEffect, useRef} from 'react';\r\nimport {useRecoilValue, useRecoilState, useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport useNotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport AddContactView from './addContact.view';\r\nimport authMiddleware from '../../authMiddleware';\r\nimport text from './idioma.json';\r\nimport {addContactViewOpenState, loginData/*, friendSelector*/} from '../../components/recoil/atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\n\r\nimport {idiomaState} from '../../components/recoil/atoms'\r\nimport socketClient from '../../utils/socket';\r\n\r\nconst AddContactController = props => {\r\n    const idioma = useRecoilValue(idiomaState); \r\n    const [addContactState, setAddContactState] = useRecoilState(addContactViewOpenState);\r\n    const [users, setUsers] = useState([]);\r\n    const {openErrorNotification} = useNotificationHook();\r\n    const inputSearchRef = useRef({value: ''});\r\n    const userData = useRecoilValue(loginData);\r\n\r\n    //const addContact = useSetRecoilState(friendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    \r\n\r\n    const buscarUsuarios = () => {\r\n        \r\n        const optimisticAction = (token) => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/searchContact`, {\r\n                stringPattern: inputSearchRef.current.value,\r\n                start: 0,\r\n                limit: 20\r\n            }, {\r\n                headers: {\r\n                    \"Authorization\": token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    setUsers(resp.data.users);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.lbErrorLoadingUsers[idioma]);\r\n            });\r\n        }\r\n        authMiddleware(optimisticAction);\r\n    }\r\n\r\n    useEffect(() => {\r\n        buscarUsuarios();\r\n    }, [])\r\n\r\n    const sendFriendRequest = (userId) => {\r\n        \r\n        const optimisticAction = (token) => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/sendFriendRequest`, {\r\n                userId: userId\r\n            }, {\r\n                headers: {\r\n                    \"Authorization\": token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    setUsers(users => {\r\n                        return users.filter(user => user.userId !== userId);\r\n                    });\r\n\r\n                    //addContact(resp.data.friend);\r\n                    friendDispatcher({action: 'add', payload: {friend: resp.data.friend}});\r\n                    \r\n                }\r\n            })\r\n            .then(() => {\r\n                const client = socketClient.getSocket();\r\n                client.emit('request friendship', {\r\n                    userIdRequester: userData.userId,\r\n                    userIdRequested: userId,\r\n                    token: token\r\n                });\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.lbErrorSendigFriendRequest[idioma]);\r\n            });\r\n        }\r\n        authMiddleware(optimisticAction);\r\n    }\r\n\r\n    const closeAddContactWin = () => {\r\n        setAddContactState(false);\r\n    }\r\n\r\n    return <AddContactView \r\n        idioma={idioma}\r\n        closeAddContactWin={closeAddContactWin}\r\n        open={addContactState}\r\n\r\n        users={users}\r\n        buscarUsuarios={buscarUsuarios}\r\n\r\n        inputSearchRef={inputSearchRef} \r\n        sendFriendRequest={sendFriendRequest}\r\n    />;\r\n\r\n}\r\nexport default AddContactController;","import React from 'react';\r\nimport AddContactController from './addContact.controller';\r\n\r\nconst AddContact = props => {\r\n\r\n    return <AddContactController />;\r\n\r\n}\r\n\r\nexport default AddContact;","import React, {useState} from 'react';\r\nimport {useRecoilState, useRecoilValue} from 'recoil';\r\nimport MainButtonView from './mainButton.view';\r\nimport AddContact from '../addContact';\r\n\r\n\r\nimport {idiomaState, addContactViewOpenState} from '../../components/recoil/atoms';\r\n\r\nconst MainButtonController = props => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [addContactViewState,setAddContactViewState] = useRecoilState(addContactViewOpenState);\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    \r\n    const openAddContactView = () => {\r\n        setAddContactViewState(true);\r\n    }\r\n\r\n    return <>\r\n        <MainButtonView \r\n            open={open}\r\n            handleOpen={handleOpen}\r\n            handleClose={handleClose}\r\n            idioma={idioma}\r\n            openAddContactView={openAddContactView}\r\n        />\r\n        {addContactViewState ? <AddContact /> : null}\r\n        \r\n    </>;\r\n\r\n}\r\nexport default MainButtonController;","import React from 'react';\r\nimport MainButtonController from './mainButton.controller';\r\nconst MainButton = props => {\r\n\r\n    return <MainButtonController />;\r\n\r\n}\r\nexport default MainButton;","import React from 'react';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n      padding: 0,\r\n      position: 'relative',\r\n      height: '100vh',\r\n      overflowY: 'hidden',\r\n      backgroundColor: theme.palette.background.paper\r\n    }\r\n  }));\r\n\r\nconst MainView = props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" className={classes.container} component=\"main\">\r\n            <CssBaseline />\r\n            {props.children}\r\n        </Container>\r\n    );\r\n\r\n}\r\nexport default MainView;","import React from 'react';\r\nimport ContainerView from './main.view';\r\nconst MainContainer = props => {\r\n\r\n    return <ContainerView {...props}/>;\r\n\r\n}\r\nexport default MainContainer;","import {useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport {loginData, userAvatarState, subscribeToEventsState, contactListState, friendsAtom} from '../components/recoil/atoms';\r\nimport { useCallback } from 'react';\r\nimport socketClient from './socket';\r\n\r\nconst useLogout = () => {\r\n\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const setUserAvatar = useSetRecoilState(userAvatarState);\r\n    const setSubscribe = useSetRecoilState(subscribeToEventsState);\r\n    const setContactList = useSetRecoilState(contactListState);\r\n    const setFriends = useSetRecoilState(friendsAtom);\r\n    const client = socketClient.getSocket();\r\n\r\n    return useCallback(() => {\r\n        \r\n        setUserAvatar(null);\r\n        setContactList([]);\r\n        setFriends([]);\r\n        client.emit('logout', {});\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refresh_token');\r\n        localStorage.removeItem('refresh_token_expires');\r\n        localStorage.removeItem('token_expires');\r\n        setSubscribe(false);\r\n        setLoginData(null);\r\n        \r\n        \r\n    });\r\n}\r\nexport default useLogout;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Container, Avatar, Typography, TextField, Button} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\nconst usePassStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(4),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    }\r\n  }));\r\n\r\nconst ChangepassView = ({text, idioma, oldPassState, passState, pass2State, onOldPassChange, onPassChange, onPass2Change, submitPass }) => {\r\n\r\n    const classes = usePassStyles();\r\n    \r\n    return <Container component=\"main\" maxWidth=\"xs\">  \r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon fontSize=\"large\"/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                    {text.title[idioma]}\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={text.oldpassword[idioma]}\r\n                            type=\"password\"\r\n                            id=\"oldpassword\"\r\n                            autoComplete=\"current-password\"\r\n                            value={oldPassState.value}\r\n                            onChange={onOldPassChange}\r\n                            helperText={!oldPassState.valid ? text.invalidOldPass[idioma] : ''}\r\n                            error={!oldPassState.valid}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={text.password[idioma]}\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            value={passState.value}\r\n                            onChange={onPassChange}\r\n                            helperText={!passState.valid ? text.invalidPass[idioma] : ''}\r\n                            error={!passState.valid}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={text.repeatPassword[idioma]}\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            value={pass2State.value}\r\n                            onChange={onPass2Change}\r\n                            helperText={!pass2State.valid ? text.passNotEqual[idioma] : ''}\r\n                            error={!pass2State.valid}\r\n                        />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={submitPass}            \r\n                    >\r\n                        {text.changePass[idioma]}\r\n                    </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n\r\n}\r\nexport default ChangepassView;","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {idiomaState} from '../../../../components/recoil/atoms';\r\nimport useLogout from '../../../../utils/useLogout';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport useNotificationHook from '../../../../components/uiComponents/notification/notification.hook';\r\nimport ChangepassView from './changepass.view';\r\nimport text from './idioma.json';\r\n\r\nconst ChangepassController = () => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const logout = useLogout();\r\n    const {postRequest} = useAxiosHook();\r\n    const {openErrorNotification} = useNotificationHook();\r\n\r\n    const [oldPassState, setOldPassState] = useState({value: \"\", valid: true});\r\n    const [passState, setPassState] = useState({value: \"\", valid: true});\r\n    const [pass2State, setPass2State] = useState({value: \"\", valid: true});\r\n\r\n    const onOldPassChange = ({target: {value}}) => {\r\n        setOldPassState({...passState, value: value, valid: true});\r\n    }\r\n    const onPassChange = ({target: {value}}) => {\r\n        setPassState({...passState, value: value, valid: true});\r\n        setPass2State({...pass2State, valid: true});\r\n    }\r\n    const onPass2Change = ({target: {value}}) => {\r\n        setPass2State({...pass2State, value: value, valid: true});\r\n    }\r\n\r\n    const submitPass = (event) => {\r\n        event.preventDefault();\r\n        if(oldPassState.value.length === 0){\r\n            setOldPassState({...oldPassState, valid: false})\r\n        } else if(passState.value.length < 8){\r\n            setPassState({...passState, valid: false});\r\n        }else if(pass2State.value !== passState.value){\r\n            setPass2State({...pass2State, valid: false});\r\n        }else {\r\n\r\n            postRequest({\r\n                url: '/users/changePassword',\r\n                bodyParams: {\r\n                    oldPassword: oldPassState.value, \r\n                    password: passState.value\r\n                },\r\n                messageOnSuccess: text.passChangeOk[idioma],\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        logout();\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    console.log(err.response);\r\n                    if(err.response.status === 403){\r\n                        openErrorNotification(text.passChange403Error[idioma])\r\n                    }else{\r\n                        openErrorNotification(text.passChangeError[idioma])\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return <ChangepassView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        oldPassState={oldPassState}\r\n        passState={passState}\r\n        pass2State={pass2State}\r\n\r\n        onOldPassChange={onOldPassChange}\r\n        onPassChange={onPassChange}\r\n        onPass2Change={onPass2Change}\r\n        submitPass={submitPass}\r\n    />;\r\n\r\n}\r\n\r\nexport default ChangepassController;","import React from 'react';\r\nimport ChangepassController from './changepass.controller';\r\nconst ChangePass = props => { \r\n    \r\n    return <ChangepassController {...props}/>;\r\n\r\n}\r\nexport default ChangePass;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Avatar, Button} from '@material-ui/core';\r\nimport { pink } from '@material-ui/core/colors';\r\nimport AvatarEdit from 'react-avatar-edit';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    avatarEdit: {\r\n        margin: theme.spacing(2),\r\n        marginLeft: theme.spacing(3),\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: ''\r\n    },\r\n    avatar: {\r\n        marginLeft: theme.spacing(7),\r\n        width: theme.spacing(10),\r\n        height: theme.spacing(10),\r\n    },\r\n    button: {\r\n        width: '100%', \r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\n\r\nconst ChangeAvatarView = ({text, idioma, preview, setPreview, avatarRef, onAvatarChange}) => {\r\n\r\n    const classes = useStyles(); \r\n\r\n    return <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.avatarEdit}>\r\n                <AvatarEdit\r\n                        width={120}\r\n                        height={100}\r\n                        onCrop={prev => {                                    \r\n                            setPreview(prev)}\r\n                        }\r\n                        onClose={() => {setPreview(null)}}\r\n                        closeIconColor={pink[500]}\r\n                        label={text.choosefile[idioma]}        \r\n                        ref={avatarRef}                    \r\n                    />\r\n                    <Avatar                           \r\n                        src={preview}\r\n                        variant=\"circle\"\r\n                        className={classes.avatar}\r\n                    />\r\n            </div>\r\n            <Button \r\n                variant=\"contained\" \r\n                color=\"primary\"  \r\n                disabled={preview === null} \r\n                className={classes.button}\r\n                onClick={onAvatarChange}\r\n            >\r\n                {text.btnCambiar[idioma]}\r\n            </Button>\r\n        </Container>\r\n}\r\nexport default ChangeAvatarView;","import React, {useState, useRef} from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, userAvatarState} from '../../../../components/recoil/atoms';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport {DEFAULT_CONFIG} from '../../../../conf/configuration'\r\nimport ChangeavatarView from './changeavatar.view';\r\nimport text from './idioma.json';\r\n\r\nconst ChangeavatarController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {postRequest} = useAxiosHook();\r\n    const setAvatar = useSetRecoilState(userAvatarState);\r\n    const [previewAvatar, setPreviewAvatar] = useState(null);\r\n    const avatarRef = useRef(null);\r\n\r\n    const onAvatarChange = () => {\r\n        postRequest({\r\n            url: '/users/changeAvatar',\r\n            bodyParams: {\r\n                avatar: previewAvatar\r\n            },\r\n            messageOnError: text.onError[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                if(resp.status === 200){\r\n                    close();\r\n                    setAvatar(`${DEFAULT_CONFIG.server}${resp.data.avatarUrl}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return <ChangeavatarView \r\n        text={text}\r\n        idioma={idioma}\r\n        preview={previewAvatar}\r\n        setPreview={setPreviewAvatar}\r\n        avatarRef={avatarRef}\r\n        \r\n        onAvatarChange={onAvatarChange}\r\n    />;\r\n\r\n}\r\nexport default ChangeavatarController;","import React from 'react';\r\nimport ChangeAvatarController from './changeavatar.controller';\r\n\r\nconst ChangeAvatar = props => {\r\n    \r\n    return <ChangeAvatarController {...props} />;\r\n}\r\n\r\nexport default ChangeAvatar;","import React from 'react';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport {Container, TextField, Grid, Button, Avatar, CssBaseline, Typography, Switch} from '@material-ui/core';\r\nimport PermIdentityOutlinedIcon from '@material-ui/icons/PermIdentityOutlined';\r\nimport {pink, blue} from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    link: {\r\n        cursor: 'pointer',\r\n        textDecoration: 'none',\r\n        color: theme.palette.text.secondary,\r\n        '&:hover':{\r\n            textDecoration: 'underline',\r\n        }\r\n    },\r\n    customSwitch: {\r\n        alignSelf: 'center'\r\n    }\r\n}));\r\n\r\nconst CustomSwitch = withStyles((theme) => ({\r\n    switchBase: {\r\n        color: blue[800],  \r\n        '&$checked': {\r\n            color: pink[500],\r\n            '& + $track': {\r\n                opacity: 1,\r\n                backgroundColor: theme.palette.common.white,\r\n                borderColor: theme.palette.common.white,\r\n            },\r\n        }\r\n    },\r\n    track: {\r\n        opacity: 1,\r\n        backgroundColor: theme.palette.common.white,\r\n    },\r\n    checked: {},\r\n  }))(Switch);\r\n\r\nconst EditProfileView = ({text, idioma, isOpen, setClose, userData, \r\n    lastName, nameState, nicknameState, emailState, gender,\r\n    onNameChange, onEmailChange, onNickNameChange, onLastNameChange, onSwitchGender,\r\n    onSave, avatarSrc\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return <Container component=\"main\" maxWidth=\"xs\">    \r\n            <CssBaseline /> \r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}> \r\n                    <PermIdentityOutlinedIcon fontSize=\"large\"/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    {text.title[idioma]}\r\n                </Typography>       \r\n            \r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                autoComplete=\"fname\"\r\n                                name=\"firstName\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"firstName\"\r\n                                label={text.firstName[idioma]}\r\n                                autoFocus\r\n                                value={nameState.value}\r\n                                helperText={!nameState.valid ? text[nameState.msg][idioma] : ''}\r\n                                error={!nameState.valid}\r\n                                onChange={onNameChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"lastName\"\r\n                                label={text.lastName[idioma]}\r\n                                name=\"lastName\"\r\n                                autoComplete=\"lname\"\r\n                                value={lastName.value}\r\n                                onChange={onLastNameChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label={text.email[idioma]}\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                value={emailState.value}\r\n                                helperText={!emailState.valid ? text.invalidEmail[idioma] : ''}\r\n                                error={!emailState.valid}\r\n                                onChange={onEmailChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"nickname\"\r\n                                label={text.nickname[idioma]}\r\n                                \r\n                                id=\"nickname\"\r\n                                \r\n                                value={nicknameState.value}\r\n                                helperText={!nicknameState.valid ? text[nicknameState.msg][idioma] : ''}\r\n                                error={!nicknameState.valid}\r\n                                onChange={onNickNameChange}\r\n                            />\r\n                        </Grid>\r\n                        \r\n                            <Typography component=\"div\" style={{width: '100%'}}>\r\n                                <Grid component=\"label\" container alignItems=\"center\" spacing={1} style={{width: '100%', margin: 0, justifyContent: 'center'}}>\r\n                                    <Grid item>{text.male[idioma]}</Grid>\r\n                                        <Grid item>\r\n                                            <CustomSwitch checked={gender} onChange={onSwitchGender} name=\"checkedC\" className={classes.customSwitch}/>\r\n                                        </Grid>\r\n                                    <Grid item>{text.female[idioma]}</Grid>\r\n                                </Grid>\r\n                            </Typography>\r\n                                 \r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={onSave}\r\n                    >\r\n                        {text.save[idioma]}\r\n                    </Button>\r\n                </form>\r\n\r\n                \r\n        \r\n            </div>\r\n        </Container>;\r\n\r\n}\r\nexport default EditProfileView;","import React, {useState, useRef, useEffect, useCallback} from 'react';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport {loginData, idiomaState, userAvatarState} from '../../../../components/recoil/atoms';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport useNotification from '../../../../components/uiComponents/notification/notification.hook';\r\nimport EditProfileView from './editprofile.view';\r\nimport text from './idioma.json'; \r\n\r\nconst EditProfileController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const avatarSrc = useRecoilValue(userAvatarState);\r\n    const [userData, setUserData] = useRecoilState(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    const {openErrorNotification} = useNotification();\r\n\r\n    const [emailState, setEmailState] = useState({value: userData.email, valid: true});\r\n    const [nicknameState, setNickNameState] = useState({value: userData.nickname, valid: true});    \r\n    const [nameState, setNameState] = useState({value: userData.firstName, valid: true});  \r\n    const [lastName, setLastName] = useState({value: userData.lastName, valid: true});\r\n    const [gender, setGender] = useState(userData.gender === \"F\" ? true : false);  \r\n    \r\n    \r\n    const onNameChange = ({target: {value}}) => {\r\n        setNameState(oldState => ({...oldState, value: value, valid: true}));\r\n    };\r\n    const onLastNameChange = ({target: {value}}) => {\r\n        setLastName(oldState => ({...oldState, value: value, valid: true}));\r\n    };\r\n    const onEmailChange = ({target:{value}}) => {\r\n        setEmailState(oldState => ({...oldState, value: value, valid: true}));\r\n    }\r\n    const onNickNameChange = ({target: {value}}) => {\r\n        setNickNameState(oldState => ({...oldState, value: value, valid: true}));\r\n    }\r\n    const onSwitchGender = ({target: {checked}}) => {\r\n        setGender(oldState => !oldState);\r\n    }\r\n\r\n    const onSave =(event) => {\r\n        event.preventDefault();\r\n        if(!/^[a-zA-Z\\']+$/.test(nameState.value)){\r\n            setNameState({...nameState, valid: false, msg: 'nameInvalid'});\r\n        }else\r\n        if(nameState.value.length < 2){\r\n            setNameState({...nameState, valid: false, msg: 'nameShort'});\r\n        }else\r\n        if(nameState.value.length >= 20){\r\n            setNameState({...nameState, valid: false, msg: 'nameLong'});\r\n        }else\r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(emailState.value)){\r\n            setEmailState({...emailState, valid: false});\r\n        }else\r\n        if(nicknameState.value.length === 0){\r\n            setNickNameState({...nicknameState, valid: false, msg: 'nicknameNull'});\r\n        }else\r\n        {\r\n            const newUserData = {\r\n                firstName: nameState.value,\r\n                lastName: lastName.value,\r\n                nickname: nicknameState.value,\r\n                email: emailState.value,\r\n                gender: gender ? 'F' : 'M'\r\n            }; \r\n\r\n            postRequest({\r\n                url: '/users/editprofile',\r\n                bodyParams: newUserData,\r\n                messageOnSuccess: text.onSaveSuccess[idioma],\r\n                doFnAfterError: err => {\r\n                    if(err.response.status === 409){\r\n                        openErrorNotification(text.duplicated[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.error[idioma]);\r\n                    }\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    setUserData({...userData, ...newUserData});\r\n                    close();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return <EditProfileView \r\n        userData={userData}\r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        lastName={lastName}\r\n        nameState={nameState}\r\n        nicknameState={nicknameState}\r\n        emailState={emailState}\r\n        gender={gender}\r\n        \r\n        onNameChange={onNameChange}\r\n        onEmailChange={onEmailChange}\r\n        onNickNameChange={onNickNameChange}\r\n        onLastNameChange={onLastNameChange}\r\n        onSwitchGender={onSwitchGender}\r\n\r\n        avatarSrc={avatarSrc}\r\n\r\n        onSave={onSave}\r\n\r\n    />;\r\n}\r\nexport default EditProfileController;","import React from 'react';\r\nimport EditProfileController from './editprofile.controller';\r\n\r\nconst EditProfile = props => {\r\n    \r\n    return <EditProfileController {...props} />;\r\n\r\n}\r\nexport default EditProfile;","import React from 'react';\r\n\r\nimport {Container, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Grid} from '@material-ui/core';\r\n\r\n\r\nconst ShareAppView = ({idioma, text, nameState, onNameChange, emailState, onEmailChange, onSend}) => {\r\n\r\n    \r\n\r\n    return <Container maxWidth=\"sm\"> \r\n            <DialogTitle id=\"form-dialog-title\">{text.winTitle[idioma]}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {text.text[idioma]}\r\n                </DialogContentText>\r\n                \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            autoComplete=\"fname\"\r\n                            name=\"firstName\"\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"firstName\"\r\n                            label={text.name[idioma]}\r\n                            autoFocus\r\n                            value={nameState.value}\r\n                            helperText={!nameState.valid ? text[nameState.msg][idioma] : ''}\r\n                            error={!nameState.valid}\r\n                            onChange={onNameChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label={text.email[idioma]}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            autoComplete=\"email\"\r\n                            value={emailState.value}\r\n                            helperText={!emailState.valid ? text.invalidEmail[idioma] : ''}\r\n                            error={!emailState.valid}\r\n                            onChange={onEmailChange}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onSend}>\r\n                        {text.send[idioma]}\r\n                    </Button>\r\n            </DialogActions>\r\n        </Container>;\r\n\r\n}\r\nexport default ShareAppView;","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useNotification from '../../components/uiComponents/notification/notification.hook';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\nimport ShareAppView from './shareapp.view';\r\nimport text from './idioma.json';\r\n\r\nconst ShareAppController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    const {postRequest} = useAxiosHook();\r\n    const {openErrorNotification} = useNotification();\r\n\r\n    const [emailState, setEmailState] = useState({value: '', valid: true});\r\n    const [nameState, setNameState] = useState({value: '', valid: true});  \r\n\r\n\r\n    const onNameChange = ({target: {value}}) => {\r\n        setNameState(oldState => ({...oldState, value: value, valid: true}));\r\n    };\r\n    const onEmailChange = ({target:{value}}) => {\r\n        setEmailState(oldState => ({...oldState, value: value, valid: true}));\r\n    }\r\n\r\n    const onSend =(event) => {\r\n        event.preventDefault();\r\n        if(!/^[a-zA-Z\\']+$/.test(nameState.value)){\r\n            setNameState({...nameState, valid: false, msg: 'nameInvalid'});\r\n        }else\r\n        if(nameState.value.length < 2){\r\n            setNameState({...nameState, valid: false, msg: 'nameShort'});\r\n        }else\r\n        if(nameState.value.length >= 20){\r\n            setNameState({...nameState, valid: false, msg: 'nameLong'});\r\n        }else\r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(emailState.value)){\r\n            setEmailState({...emailState, valid: false});\r\n        }else\r\n        {\r\n            postRequest({\r\n                url: '/users/shareapp',\r\n                bodyParams: {\r\n                    firstName: nameState.value,\r\n                    email: emailState.value,\r\n                    language: idioma,\r\n                    hostname: window.location.host\r\n                },\r\n                messageOnSuccess: text.sendSuccess[idioma],\r\n                doFnAfterError: err => {\r\n                    if(err.response.status === 409){\r\n                        openErrorNotification(text.emailExist[idioma]);\r\n                    }\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    close();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return <ShareAppView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        nameState={nameState}\r\n        onNameChange={onNameChange}\r\n        emailState={emailState}\r\n        onEmailChange={onEmailChange}\r\n\r\n        onSend={onSend}\r\n    />;\r\n\r\n}\r\nexport default ShareAppController;","import React from 'react';\r\n\r\nimport ShareAppController from './shareapp.controller';\r\n\r\nconst ShareApp = props => {\r\n    \r\n    return <ShareAppController {...props} />;\r\n\r\n}\r\nexport default ShareApp;","import React from 'react';\r\n\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Container, DialogTitle, DialogContent, DialogContentText, Grid, TextField, DialogActions, Button, Box, Typography} from '@material-ui/core';\r\n\r\n\r\nconst labels = {\r\n    0: 'unrated',\r\n    0.5: 'useless',\r\n    1: 'useless+',\r\n    1.5: 'poor',\r\n    2: 'poor+',\r\n    2.5: 'ok',\r\n    3: 'ok+',\r\n    3.5: 'good',\r\n    4: 'good+',\r\n    4.5: 'excellent',\r\n    5: 'excellent+',\r\n};\r\n  \r\n  const useStyles = makeStyles(theme => ({\r\n    ratingRow: {\r\n      width: '250px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      marginBottom: theme.spacing(1)\r\n    }\r\n  }));\r\n\r\nconst FeedbackView = React.memo(({text, idioma,\r\n    globalState, onChange,\r\n    comentState, onCommentChange, onSave\r\n}) => {\r\n\r\n    \r\n    const classes = useStyles();\r\n\r\n    return <Container maxWidth=\"sm\"> \r\n                <DialogTitle id=\"form-dialog-title\">{text.title[idioma]}</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                            <RatingRowStars text={text} idioma={idioma} classes={classes} globalState={globalState} onChange={onChange} type=\"design\"/>\r\n                            <RatingRowStars text={text} idioma={idioma} classes={classes} globalState={globalState} onChange={onChange} type=\"performance\"/>\r\n                            <RatingRowStars text={text} idioma={idioma} classes={classes} globalState={globalState} onChange={onChange} type=\"usability\"/>\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{display:\"flex\"}}>\r\n                            \r\n                                <div style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                }}>\r\n                                    <div>\r\n                                        <Typography className={classes.ratingType}>{text.lbAverage[idioma]}</Typography>\r\n                                        <div className={classes.ratingRow}>\r\n                                            <Rating\r\n                                                readOnly\r\n                                                name=\"hover-feedback\"\r\n                                                size=\"large\"\r\n                                                value={globalState.overall}\r\n                                                precision={0.5}\r\n                                            />\r\n                                            {\r\n                                                globalState.overall !== null && <Box ml={2}>{\r\n                                                text[labels[globalState.overall]][idioma]\r\n                                            }</Box>}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            \r\n                        </Grid>\r\n                        <Grid item xs={12} >\r\n                            <TextField\r\n                                id=\"outlined-textarea\"\r\n                                label={text.comment[idioma]}\r\n                                multiline\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                value={comentState}\r\n                                onChange={onCommentChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={onSave}>\r\n                            {text.save[idioma]}\r\n                        </Button>\r\n                </DialogActions>\r\n            </Container>;\r\n\r\n})\r\n\r\nconst RatingRowStars = React.memo(({text, idioma, classes, globalState, onChange, type }) => {\r\n    \r\n    const [state, setstate] = React.useState(-1);\r\n\r\n    return <Grid item xs={12} >\r\n            <Typography className={classes.ratingType}>{text[type][idioma]}</Typography>\r\n            <div className={classes.ratingRow}>\r\n                <Rating\r\n                    value={globalState[type]}\r\n                    precision={0.5}\r\n                    onChange={(event, newValue) => onChange(newValue, type)}\r\n                    onChangeActive={(event, newValue) => setstate(newValue)}\r\n                />\r\n                {globalState[type] !== null && <Box ml={2}>{\r\n                    text[labels[state !== -1 ? state : globalState[type]]][idioma]\r\n                }</Box>}\r\n            </div>\r\n        </Grid>\r\n})\r\n\r\nexport default FeedbackView;","import React, {useState, useEffect, useCallback} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useNotification from '../../components/uiComponents/notification/notification.hook';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\n\r\nimport FeedbackView from './feedback.view';\r\nimport text from './idioma.json';\r\n\r\n\r\nconst FeedbackController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const  {postRequest}  = useAxiosHook();\r\n\r\n    const [comentState, setComntState] = useState('');\r\n    const [globalState, setGlobalState] = useState({\r\n        design: 0,\r\n        performance: 0,\r\n        usability: 0,\r\n        overall: 0\r\n    });\r\n    \r\n\r\n    const onCommentChange = ({target: {value}}) => {\r\n        setComntState(value);\r\n    }\r\n\r\n    const calcProm = (desing, performance, usability, newValue = 0) => {\r\n        let cant = newValue > 0 ? 1 : 0;\r\n        let promedio = newValue;\r\n        if(desing > 0) {\r\n            promedio += desing;\r\n            cant++; \r\n        }\r\n        if(performance > 0){\r\n            promedio += performance;\r\n            cant++;\r\n        }\r\n        if(usability > 0){\r\n            promedio += usability;\r\n            cant++;\r\n        }\r\n        if(cant > 0){\r\n            promedio = promedio / cant;\r\n            const restoProm = promedio % 0.5;\r\n            promedio = promedio - restoProm;\r\n        }\r\n        \r\n        return promedio;\r\n    }\r\n    const onChange = useCallback((newValue, type) => {\r\n\r\n        setGlobalState(oldState => {\r\n            let desing = 0;\r\n            let performance = 0;\r\n            let usability = 0;\r\n            if(type !== 'design' && oldState.design > 0){\r\n                desing = oldState.design;\r\n            }\r\n            if(type !== 'performance' && oldState.performance > 0){\r\n                performance = oldState.performance;\r\n            }\r\n            if(type !== 'usability' && oldState.usability > 0){\r\n                usability = oldState.usability;\r\n            }\r\n            \r\n\r\n            let promedio = calcProm(desing, performance, usability, newValue);\r\n            \r\n            const newGlobalState = {...oldState, [type]: newValue, overall: promedio};\r\n            return newGlobalState;\r\n\r\n        });\r\n    }, []);\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n\r\n        postRequest({\r\n            url: '/users/getUserFeedback',\r\n            messageOnError: text.lbOnLoadError[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                if(resp.status === 200){\r\n                    const rating = resp.data.rating;\r\n                    const stateObj = {\r\n                        design: rating.design,\r\n                        performance: rating.performance,\r\n                        usability: rating.usability,\r\n                        overall: calcProm(rating.design, rating.performance, rating.usability)\r\n                    }\r\n                    \r\n                    setGlobalState(stateObj);\r\n                    setComntState(rating.comment);\r\n                }\r\n            }\r\n        })\r\n    }, []);\r\n\r\n    const onSave = () => {\r\n        postRequest({\r\n            url: \"/users/saveFeedback\",\r\n            bodyParams: {\r\n                designRating: globalState.design, \r\n                performaceRating: globalState.performance, \r\n                usabilityRating: globalState.usability, \r\n                comment: comentState\r\n            },\r\n            messageOnError: text.lbOnSaveError[idioma],\r\n            messageOnSuccess: text.lbOnsaveOk[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                close();\r\n            }\r\n        });\r\n    }\r\n\r\n    return <FeedbackView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        globalState={globalState}\r\n        onChange={onChange}\r\n        \r\n        comentState={comentState}\r\n        onCommentChange={onCommentChange}\r\n\r\n        onSave={onSave}\r\n    />;\r\n\r\n}\r\nexport default FeedbackController;","import React from 'react';\r\n\r\nimport FeedbackController from './feeedback.controller';\r\n\r\nconst Feedback = React.memo(props => {\r\n    \r\n    return <FeedbackController {...props} />;\r\n\r\n});\r\nexport default Feedback;","import React from 'react';\r\n\r\nimport {Container, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Grid} from '@material-ui/core';\r\n\r\n\r\nconst BugReportView = ({idioma, text, comentState, onCommentChange, onSend}) => {\r\n\r\n    return <Container maxWidth=\"sm\"> \r\n            <DialogTitle id=\"form-dialog-title\">{text.winTitle[idioma]}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {text.text[idioma]}\r\n                </DialogContentText>\r\n                \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} >\r\n                    <TextField\r\n                                id=\"outlined-textarea\"\r\n                                label={text.report[idioma]}\r\n                                multiline\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                rows={4}\r\n                                value={comentState}\r\n                                onChange={onCommentChange}\r\n                            />\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onSend}>\r\n                        {text.send[idioma]}\r\n                    </Button>\r\n            </DialogActions>\r\n        </Container>;\r\n\r\n}\r\nexport default BugReportView;","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\nimport BugReportView from './bugreport.view';\r\nimport text from './idioma.json';\r\n\r\nconst BugReportController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    const {postRequest} = useAxiosHook();\r\n\r\n    const [comentState, setComntState] = useState('');\r\n\r\n    const onCommentChange = ({target: {value}}) => {\r\n        setComntState(value);\r\n    }\r\n\r\n    const onSend = () => {\r\n        postRequest({\r\n            url: \"/bugs/saveBugReport\",\r\n            bodyParams: {\r\n                description: comentState\r\n            },\r\n            messageOnError: text.sendError[idioma],\r\n            messageOnSuccess: text.sendOk[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                close();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    return <BugReportView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        comentState={comentState}\r\n        onCommentChange={onCommentChange}\r\n\r\n        onSend={onSend}\r\n    />;\r\n\r\n}\r\nexport default BugReportController;","import React from 'react';\r\n\r\nimport BugReportController from './bugreport.controller';\r\n\r\nconst BugReport = props => {\r\n    \r\n    return <BugReportController {...props} />;\r\n\r\n}\r\nexport default BugReport;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardHeader, Avatar, Badge, IconButton, Divider, List, ListItem, ListItemIcon , FormControl, ListItemText, Select, MenuItem, FormControlLabel, Switch, Dialog, Tooltip } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PhotoCameraOutlinedIcon from '@material-ui/icons/PhotoCameraOutlined';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport BugReportIcon from '@material-ui/icons/BugReport';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {blue, pink} from '@material-ui/core/colors'\r\n\r\nimport ChangePass from './changepass';\r\nimport ChangeAvatar from './changeavatar';\r\nimport EditProfile from './editprofile';\r\nimport ShareApp from '../../shareapp';\r\nimport Feedback from '../../feedback';\r\nimport BugReport from '../../bugreport';\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    avatar: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7)\r\n    },\r\n    cardHeaderAction: {\r\n        alignSelf: 'flex-end',\r\n    },\r\n    cardHeaderContent:{\r\n        overflowX: \"hidden\",\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    langSelect: {\r\n        fontSize: '0.9em', \r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        fontWeight: 400,\r\n        lineHeight: 1.5,\r\n        letterSpacing:'0.00938em'\r\n    },\r\n    avatarMan: {\r\n        color: theme.palette.getContrastText(blue[400]),\r\n        backgroundColor: blue[400],\r\n    },\r\n    avatarWoman: {\r\n        color: theme.palette.getContrastText(pink[300]),\r\n        backgroundColor: pink[300],\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst ProfileView = ({text, idioma, avatarUrl, userData, logout, changeIdioma, darkMode, changeTheme, \r\n    changePass, setChangePass, changeAvatar, setChangeAvatar, editProfile, setChangeProfile, shareApp, setShareApp, feedback, setFeedback,\r\n    bugreport, setBugreport\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                classes={{\r\n                    action: classes.cardHeaderAction,\r\n                    content: classes.cardHeaderContent,\r\n                }}\r\n                avatar={\r\n                    <Badge\r\n                        overlap=\"circle\"\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right'\r\n                        }}\r\n                        badgeContent={<SmallPhotoCameraButton onClick={setChangeAvatar}/>}\r\n                    >   \r\n                            <Avatar \r\n                                aria-label=\"recipe\" \r\n                                className={`${classes.avatar} ${userData.gender === \"M\" ? classes.avatarMan : classes.avatarWoman}`} \r\n                                src={avatarUrl}                            \r\n                            />                        \r\n                    </Badge>\r\n                }\r\n                action={\r\n                    <Tooltip title={text.logout[idioma]}>\r\n                        <IconButton onClick={logout}>\r\n                            <ExitToAppIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                title={userData.nickname}\r\n                subheader={userData.email}\r\n            />\r\n            \r\n            <Divider />\r\n            \r\n                <List>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setChangeProfile}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <EditIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.edit[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setChangePass}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <VpnKeyIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.editpass[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <LanguageIcon />\r\n                        </ListItemIcon>\r\n                            <FormControl >\r\n                                <Select\r\n                                    value={idioma}\r\n                                    onChange={changeIdioma}\r\n                                    displayEmpty\r\n                                    className={classes.langSelect}\r\n                                    inputProps={{ 'aria-label': 'Without label' }}\r\n                                >\r\n                                    <MenuItem value={'en'}>English</MenuItem>\r\n                                    <MenuItem value={'es'}>Español</MenuItem>\r\n                                </Select>\r\n                                \r\n                            </FormControl>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <ColorLensIcon />\r\n                        </ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={darkMode}\r\n                                    onChange={changeTheme}\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label={text.darkMode[idioma]}\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                    <ListItem \r\n                        button\r\n                        onClick={setShareApp}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <ShareIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.share[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                            secondary={text.shareDesc[idioma]}\r\n                            secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setFeedback}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <StarIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.feedback[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                            secondary={text.feedbackDesc[idioma]}\r\n                            secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setBugreport}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <BugReportIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.report[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                            secondary={text.reportDesc[idioma]}\r\n                            secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                        />\r\n                    </ListItem>\r\n                </List>\r\n        </Card>\r\n        \r\n        <Dialog open={changePass} onClose={setChangePass}>\r\n            <ChangePass />\r\n        </Dialog>\r\n\r\n        <Dialog open={changeAvatar} onClose={setChangeAvatar}>\r\n            <ChangeAvatar close={setChangeAvatar}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={editProfile} onClose={setChangeProfile}>\r\n            <EditProfile close={setChangeProfile}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={shareApp} onClose={setShareApp}>\r\n            <ShareApp close={setShareApp}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={feedback} onClose={setFeedback}>\r\n            <Feedback close={setFeedback}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={bugreport} onClose={setBugreport}>\r\n            <BugReport close={setBugreport}/>\r\n        </Dialog>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nconst useSmallPhotoCameraButtonStyle = makeStyles(theme => {\r\n        \r\n        return {\r\n            iconButton: {\r\n                backgroundColor: theme.palette.background.default,\r\n                boxShadow: `0 0 5px ${theme.palette.action.disabled}`,\r\n                '&:hover': {\r\n                    backgroundColor: theme.palette.background.default\r\n                }\r\n            }\r\n        }\r\n    }\r\n);\r\n\r\nconst SmallPhotoCameraButton = ({onClick}) => {\r\n    const classes = useSmallPhotoCameraButtonStyle();\r\n    return (\r\n        <IconButton size=\"small\" \r\n            className={classes.iconButton}\r\n            onClick={onClick}\r\n        >\r\n            <PhotoCameraOutlinedIcon fontSize=\"small\"/>\r\n        </IconButton>\r\n        \r\n    );\r\n}\r\n\r\nexport default ProfileView;","import React, {useState} from 'react';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport {loginData, userAvatarState, idiomaState, darkModeAtom} from '../../../components/recoil/atoms';\r\nimport ProfileOptView from './profileOpt.view';\r\nimport useLogout from '../../../utils/useLogout';\r\nimport text from './idioma.json';\r\nimport useAxiosHook from '../../../utils/axiosHook';\r\n\r\nconst ProfileOptController = props => {\r\n\r\n    const [changePass, setChangePassword] = useState(false);\r\n    const setChangePass  = () => {\r\n        setChangePassword(oldState => !oldState);\r\n    }\r\n    const [changeAvatar, setChangeAvat] = useState(false);\r\n    const setChangeAvatar  = () => {\r\n        setChangeAvat(oldState => !oldState);\r\n    }\r\n    const [editProfile, setEditProfileState] = useState(false);\r\n    const setChangeProfile  = () => {\r\n        setEditProfileState(oldState => !oldState);\r\n    }\r\n    const [shareApp, setShareAppState] = useState(false);\r\n    const setShareApp  = () => {\r\n        setShareAppState(oldState => !oldState);\r\n    }\r\n    const [feedback, setFeedbackState] = useState(false);\r\n    const setFeedback  = () => {\r\n        setFeedbackState(oldState => !oldState);\r\n    }\r\n    const [bugreport, setBugreportState] = useState(false);\r\n    const setBugreport  = () => {\r\n        setBugreportState(oldState => !oldState);\r\n    }\r\n    \r\n    const [idioma, setIdioma] = useRecoilState(idiomaState);\r\n    const [darkMode, setDarkMode] = useRecoilState(darkModeAtom);\r\n    const userData = useRecoilValue(loginData);\r\n    const avatarUrl = useRecoilValue(userAvatarState);\r\n    const logout = useLogout();\r\n    const {postRequest} = useAxiosHook();\r\n    \r\n    const changeTheme = () => {\r\n        localStorage.setItem('darkMode', !darkMode);\r\n        setDarkMode(oldMode => !oldMode);\r\n    }\r\n\r\n\r\n\r\n    const changeIdioma = ({target:{value}}) => {\r\n        setIdioma(value);\r\n        postRequest({\r\n            url: '/users/changeUserLanguage',\r\n            bodyParams: {\r\n                lang: value\r\n            }\r\n        });\r\n    }\r\n\r\n    return <> \r\n            <ProfileOptView  \r\n                text={text}\r\n                idioma={idioma}\r\n                avatarUrl={avatarUrl}\r\n                userData={userData}\r\n                logout={logout}\r\n                changeIdioma={changeIdioma}\r\n                darkMode={darkMode}\r\n                changeTheme={changeTheme}\r\n                \r\n                changePass={changePass}\r\n                setChangePass={setChangePass}\r\n\r\n                changeAvatar={changeAvatar}\r\n                setChangeAvatar={setChangeAvatar}\r\n\r\n                editProfile={editProfile}\r\n                setChangeProfile={setChangeProfile}\r\n\r\n                shareApp={shareApp}\r\n                setShareApp={setShareApp}\r\n\r\n                feedback={feedback}\r\n                setFeedback={setFeedback}\r\n\r\n                bugreport={bugreport}\r\n                setBugreport={setBugreport}\r\n            />\r\n        </>\r\n        ;\r\n\r\n}\r\nexport default ProfileOptController;","import React from 'react';\r\nimport ProfileOptController from './profileOpt.controller';\r\n\r\nconst ProfileOptions = props => {\r\n\r\n    return <ProfileOptController />;\r\n\r\n}\r\nexport default ProfileOptions;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ProfileOpt from './profileOptions';\r\nimport {blue, pink} from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  avatarMan: {\r\n    color: theme.palette.getContrastText(blue[400]),\r\n    backgroundColor: blue[400],\r\n  },\r\n  avatarWoman: {\r\n    color: theme.palette.getContrastText(pink[300]),\r\n    backgroundColor: pink[300],\r\n  },\r\n}));\r\n\r\nconst ToolbarView = ({avatarSrc, userData}) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        \r\n        <Toolbar>\r\n          \r\n            {/*<IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                <MenuIcon />\r\n            </IconButton>*/}\r\n          \r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Shutapp\r\n            </Typography>          \r\n            <div>\r\n                <IconButton\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"menu-appbar\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleMenu}\r\n                    color=\"inherit\"\r\n                >\r\n                    <Avatar\r\n                        src={avatarSrc}\r\n                        className={userData.gender === \"M\" ? classes.avatarMan : classes.avatarWoman}\r\n                    />\r\n                    \r\n                </IconButton>\r\n                <Popover \r\n                    open={open}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                >\r\n                    <ProfileOpt />\r\n                </Popover>\r\n\r\n              \r\n            </div>          \r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToolbarView;","import React from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\n\r\nimport ToolbarView from './toolbar.view';\r\n\r\nimport {userAvatarState, loginData} from '../../components/recoil/atoms';\r\n\r\nconst ToolbarController = props => {\r\n\r\n    const avatarSrc = useRecoilValue(userAvatarState);\r\n    const userData = useRecoilValue(loginData);\r\n    \r\n    return <ToolbarView \r\n        avatarSrc={avatarSrc}\r\n        userData={userData}\r\n    />;\r\n\r\n}\r\nexport default ToolbarController;","import React from 'react';\r\nimport ToolbarController from './toolbar.controller';\r\n\r\nconst Toolbar = props => {\r\n\r\n    return <ToolbarController />;\r\n\r\n}\r\nexport default Toolbar;","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport {blue, pink} from '@material-ui/core/colors';\r\n\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {DEFAULT_CONFIG} from '../../../conf/configuration'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(0.5),\r\n    },\r\n    title: {\r\n        display: 'block',\r\n        //display: 'none',\r\n        /*[theme.breakpoints.up('xs')]: {\r\n          display: 'block',\r\n        },*/\r\n\r\n        marginLeft: theme.spacing(1)\r\n        \r\n    },\r\n    customAppBar: {\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.breakpoints.values.sm,\r\n        },\r\n        right: 'auto'\r\n    },\r\n    avatarMan: {\r\n      color: theme.palette.getContrastText(blue[400]),\r\n      backgroundColor: blue[400],\r\n    },\r\n    avatarWoman: {\r\n      color: theme.palette.getContrastText(pink[300]),\r\n      backgroundColor: pink[300],\r\n    }\r\n}));\r\n\r\n\r\nconst OnlineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: '$ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OfflineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: theme.palette.grey[500],\r\n        color: theme.palette.grey[500],\r\n        \r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OnlineBadge = props => {\r\n    \r\n    if(props.contact.socketId && props.contact.friendShipStatus === 1){\r\n        return (<OnlineStyledBadge\r\n                overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    variant=\"dot\"\r\n                >\r\n                    {props.children}\r\n                </OnlineStyledBadge>)\r\n            ;\r\n    }\r\n    else {\r\n        return (<OfflineStyledBadge\r\n            overlap=\"circle\"\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                variant=\"dot\"\r\n            >\r\n                {props.children}\r\n            </OfflineStyledBadge>)\r\n        ;\r\n    }\r\n}\r\n\r\nconst ChatHeaderView = ({closeChat, contact}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const avatarUrl = contact.avatarUrl ? DEFAULT_CONFIG.server + contact.avatarUrl : null;\r\n\r\n    return (\r\n        <AppBar position=\"fixed\" className={classes.customAppBar}>\r\n            <ToolBar>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={closeChat}\r\n                >\r\n                    <ArrowBackIcon />\r\n                </IconButton>\r\n                    <OnlineBadge contact={contact}>\r\n                        <Avatar\r\n                            src={avatarUrl}\r\n                            className={contact.gender === \"M\" ? classes.avatarMan : classes.avatarWoman}\r\n                        />\r\n                    </OnlineBadge>\r\n                <Typography className={classes.title} variant=\"h5\" noWrap>\r\n                    {contact.nickname}\r\n                </Typography>\r\n                <div className={classes.grow} />\r\n                <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n            </ToolBar>\r\n        </AppBar>\r\n    );\r\n\r\n}\r\nexport default ChatHeaderView;","import React from 'react';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport { friendSelector } from '../../../components/recoil/selectors'; \r\nimport { activeChatWith } from '../../../components/recoil/atoms'; \r\nimport ChatHeaderView from './chatHeader.view';\r\n\r\nconst ChatHeaderController = () => {\r\n\r\n    const [idContact, setActiveChatWith] = useRecoilState(activeChatWith);\r\n    const friends = useRecoilValue(friendSelector);\r\n    const contact = friends.find(f => f.contactId === idContact);\r\n\r\n    const closeChat = () => {\r\n        setActiveChatWith(null);\r\n    }\r\n    \r\n    return <ChatHeaderView \r\n        closeChat={closeChat}\r\n        contact={contact}\r\n    />;\r\n\r\n}\r\nexport default ChatHeaderController;","import React from 'react';\r\nimport ChatHeaderController from './chatHeader.controller';\r\nconst ChatHeader = props => {\r\n\r\n    return <ChatHeaderController />;\r\n\r\n}\r\nexport default ChatHeader;","import React from 'react';\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { grey, lightGreen, green } from '@material-ui/core/colors';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport {DEFAULT_CONFIG} from '../../../conf/configuration';\r\nimport { formatRelative } from 'date-fns'\r\nimport { es } from 'date-fns/locale';\r\n\r\nconst useMessageStyle = makeStyles(theme => ({\r\n    message: {\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(2)}px`,\r\n        maxWidth: '60%',\r\n        //margin: `${theme.spacing(2)}px ${theme.spacing(2)}px`,\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: 0,\r\n        marginLeft: `${theme.spacing(2)}px`,\r\n        marginRight: `${theme.spacing(2)}px`,        \r\n        borderRadius: '10px',\r\n        backgroundColor: theme.palette.info.dark,\r\n        color: theme.palette.info.contrastText,\r\n        position: \"relative\"\r\n    },\r\n    timeMessage: {\r\n        paddingLeft: theme.spacing(2),\r\n        //paddingRight: theme.spacing(2),\r\n        maxWidth: '60%',\r\n        marginBottom: theme.spacing(1),\r\n        marginLeft: `${theme.spacing(2)}px`,\r\n        marginRight: `${theme.spacing(1)}px`,\r\n        color: theme.palette.text.disabled,\r\n        ...theme.typography.subtitle2\r\n    },\r\n    mymsg: {\r\n        textAlign: 'right',\r\n        alignSelf: 'flex-end',\r\n        borderRadius: '10px 0 10px 10px'\r\n    },\r\n    notmymsg: { \r\n        alignSelf: 'flex-start',\r\n        borderRadius: '0 10px 10px 10px'\r\n    },\r\n    msgAvatar: {\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        position: \"absolute\",\r\n        top: `-${theme.spacing(1.5)}px`,\r\n    },\r\n    myMsgAvatar : {\r\n        right: `-${theme.spacing(1.5)}px`,\r\n        \r\n    },\r\n    notMyMsgAvatar: {\r\n        left: `-${theme.spacing(1.5)}px`\r\n    },\r\n    doneIcon: {\r\n        marginRight: theme.spacing(1),\r\n        fontSize: theme.spacing(2.2)\r\n    }\r\n}));\r\n\r\nconst Message = React.memo(\r\n    ({state, content, datetime ,contact, avatarSrc, idioma}) => {\r\n\r\n    const classes = useMessageStyle();\r\n\r\n    const msgStyle = state > 0 ? classes.mymsg : classes.notmymsg;\r\n    const avatarStyle = state > 0 ? classes.myMsgAvatar : classes.notMyMsgAvatar;\r\n    const avatarUrl = state > 0 ? avatarSrc : DEFAULT_CONFIG.server + contact.avatarUrl;\r\n\r\n    const options = idioma === 'es' ? { locale: es } : {};\r\n    const date = formatRelative(new Date(datetime), new Date(), options)\r\n    \r\n    let stateIcon = null;\r\n    if(state === 1) stateIcon = <DoneIcon className={classes.doneIcon} style={{ color: grey[500] }}/>\r\n    if(state === 2) stateIcon = <DoneAllIcon className={classes.doneIcon} style={{ color: grey[500] }}/>\r\n    if(state === 3) stateIcon = <DoneAllIcon className={classes.doneIcon} style={{ color: lightGreen[500] }}/>\r\n    \r\n\r\n    return (<>\r\n        <div className={`${classes.message} ${msgStyle}`}>\r\n            <Avatar\r\n                alt={contact.nickname}\r\n                src={avatarUrl}\r\n                variant=\"circle\"\r\n                className={`${classes.msgAvatar} ${avatarStyle}`}\r\n                \r\n            />\r\n            {content}\r\n        </div>\r\n        <span className={` ${msgStyle}`}>\r\n            <span className={`${classes.timeMessage}`}>\r\n                {date}\r\n            </span>\r\n            {stateIcon}\r\n        </span>\r\n        \r\n    </>\r\n    );\r\n});\r\n\r\nconst useChatStyle = makeStyles(theme => ({\r\n    chatConversation: {\r\n        position: 'relative',\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        overflowY: 'auto',\r\n        height: '100%'\r\n        \r\n    },\r\n    offset: theme.mixins.toolbar,\r\n    offsetDown: {\r\n        ...theme.mixins.toolbar, \r\n        bottom: 0,\r\n        position: 'relative'\r\n    }\r\n}));\r\n\r\nconst ChatBodyView = ({contact, avatarSrc, messages, idioma}) => {\r\n\r\n    React.useEffect(() => {\r\n        var element = document.getElementById('chatConversation');\r\n        if(element)\r\n            element.scrollTop = element.scrollHeight;\r\n    });\r\n\r\n    const classes = useChatStyle();\r\n    return (\r\n        \r\n                <div id=\"chatConversation\" className={classes.chatConversation}>\r\n                    <div className={classes.offset} />\r\n                    {\r\n                        messages.map((elem, idx, arr) => {\r\n                            return <Message {...elem} key={idx} contact={contact} avatarSrc={avatarSrc} idioma={idioma}/>\r\n                        })\r\n                    }\r\n                    <div className={classes.offsetDown} />\r\n                </div>\r\n\r\n    );\r\n\r\n}\r\nexport default ChatBodyView;","import React, { useEffect } from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport { friendSelector, initConversationSelector } from '../../../components/recoil/selectors'; \r\nimport {userAvatarState, activeChatWith, idiomaState, loginData, getConversationWithContact} from '../../../components/recoil/atoms';\r\nimport ChatBodyView from './chatBody.view';\r\nimport useAxiosHook from '../../../utils/axiosHook';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../utils/socket';\r\n\r\nconst ChatBodyController = () => {\r\n    \r\n    const idContact = useRecoilValue(activeChatWith);\r\n    const initConversation = useSetRecoilState(initConversationSelector);\r\n    const messages = useRecoilValue(getConversationWithContact(idContact));\r\n    const avatarSrc = useRecoilValue(userAvatarState);\r\n    const userDate = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    const friends = useRecoilValue(friendSelector);\r\n    const {postRequest} = useAxiosHook();\r\n    const contact = friends.find(f => f.contactId === idContact);\r\n\r\n\r\n    const loadConversation = () => {\r\n        if(messages.length === 0){\r\n            postRequest({\r\n                url: '/messages/getMessagesByContact',\r\n                messageOnError: text.errorLoadConversation[idioma],\r\n                bodyParams: {contactId: contact.contactId},\r\n                doFnAfterSuccess: (resp, token) => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        initConversation({\r\n                            contactId: contact.contactId,\r\n                            conversation: resp.data.conversation\r\n                        });\r\n    \r\n    \r\n                        const client = socketClient.getSocket();\r\n                        client.emit('read messages', {\r\n                            readerId: userDate.userId,\r\n                            messengerId: contact.contactId,\r\n                            messengerSocketId: contact.socketId,\r\n                            token: token\r\n                        });\r\n                    }\r\n                },\r\n                //doFnAfterError: err => console.log(err)\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadConversation();\r\n    }, []);\r\n\r\n    if(messages ){\r\n        return <ChatBodyView \r\n                    contact={contact}\r\n                    avatarSrc={avatarSrc}\r\n                    messages={messages}\r\n                    idioma={idioma}\r\n                /> ;\r\n    }else{\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default ChatBodyController;","import React from 'react';\r\nimport ChatBodyController from './chatBody.controller';\r\nconst ChatBody = props => {\r\n\r\n    return <ChatBodyController />;\r\n\r\n}\r\nexport default ChatBody;","import React from 'react';\r\n\r\nimport {AppBar, Toolbar, IconButton, makeStyles, createStyles} from '@material-ui/core';\r\n\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport TelegramIcon from '@material-ui/icons/Telegram';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    appBar:{\r\n        top: 'auto',\r\n        bottom: 0,\r\n        position: \"fixed\",\r\n        width: '100%',        \r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.breakpoints.values.sm,\r\n        },\r\n        right: 'auto'\r\n    },\r\n    grow: {\r\n        flexGrow: 1\r\n    },\r\n    toolbar: {\r\n        padding: 0\r\n    },\r\n    icon: {\r\n        fontSize: theme.spacing(3.75)\r\n    },\r\n    textarea: {\r\n        border: '1px solid white',\r\n        fontFamily: 'inherit',\r\n        fontSize: 'large',    \r\n        padding: '1px 6px',\r\n        backgroundColor: theme.palette.background.paper,\r\n        //color: 'rgba(0,0,0,0.7)',\r\n        color: theme.palette.text.primary,\r\n        \r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n        marginBottom:  theme.spacing(1),\r\n        maxHeight: theme.spacing(10),\r\n        minHeight: theme.spacing(4),\r\n        overflowY: 'auto',\r\n        borderRadius: theme.spacing(0.5),\r\n        marginLeft: theme.spacing(2),\r\n        cursor: 'text'\r\n    }\r\n}));\r\n\r\n\r\nconst ChatEditorView = ({sendMessage, refAreaTexto, keyPress, }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar color=\"primary\"  className={classes.appBar}>\r\n            <Toolbar variant=\"dense\" className={classes.toolbar}>\r\n                <div className={classes.textarea}  role=\"textbox\" contentEditable ref={refAreaTexto} onKeyPress={keyPress}></div>\r\n                <div className={classes.grow} />\r\n                <IconButton color=\"inherit\" onClick={sendMessage}>\r\n                    <TelegramIcon className={classes.icon}/>\r\n                </IconButton>                \r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n\r\n}\r\nexport default ChatEditorView;","import React, {useRef, useEffect, useState} from 'react';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport {loginData, activeChatWith, idiomaState} from '../../../components/recoil/atoms';\r\nimport {friendSelector, addMsgToConversationSelector} from '../../../components/recoil/selectors';\r\nimport useNotification from '../../../components/uiComponents/notification/notification.hook';\r\nimport ChatEditorView from './chatEditor.view';\r\nimport socketClient from '../../../utils/socket';\r\nimport text from './idioma.json';\r\n\r\nconst ChatEditorController = props => {\r\n\r\n    const {openWarningNotification} = useNotification();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const idContact = useRecoilValue(activeChatWith);\r\n    const friends = useRecoilValue(friendSelector);\r\n    const contact = friends.find(f => f.contactId === idContact);\r\n    const refAreaTexto = useRef('');\r\n    const [consecutive, setConsecutive] = useState(0);\r\n\r\n\r\n    const sendMessage = () => {\r\n\r\n        const oldtext = refAreaTexto.current.innerText;\r\n        const text = oldtext.replace(/^(\\s*\\r*)(.)(\\s*\\r*)$/, '$2');\r\n        if(text !== ''){\r\n            addMsgToConversation({\r\n                contactId: contact.contactId,\r\n                messageId: consecutive,//messageId,\r\n                content: refAreaTexto.current.innerText,\r\n                datetime: new Date(),\r\n                state: 1\r\n            });\r\n            setConsecutive(prev => prev + 1);\r\n\r\n            const client = socketClient.getSocket();\r\n            client.emit('send message', {\r\n                content: refAreaTexto.current.innerText,\r\n                userOriginId: userData.userId,\r\n                userDestinyId: idContact,\r\n                toSocketId: contact.socketId,\r\n                token: localStorage.getItem('token'),\r\n                consecutive: consecutive\r\n            });\r\n\r\n            refAreaTexto.current.innerText = '';\r\n            refAreaTexto.current.focus();\r\n        }\r\n    }\r\n\r\n    const keyPress = (event) => {\r\n        \r\n        if(event.charCode === 13){\r\n            event.preventDefault();\r\n            sendMessage();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        contact.friendShipStatus === 1 ? refAreaTexto.current.focus() : openWarningNotification(text.notEditable[idioma]);\r\n    }, []);\r\n\r\n    return contact.friendShipStatus === 1 ? <ChatEditorView \r\n        sendMessage={sendMessage}\r\n        keyPress={keyPress}\r\n        refAreaTexto={refAreaTexto}\r\n    /> : null;\r\n\r\n}\r\nexport default ChatEditorController;","import React from 'react';\r\n\r\nimport ChatEditorController from './chatEditor.controller';\r\nconst ChatEditor = props => {\r\n\r\n    return <ChatEditorController />;\r\n\r\n}\r\nexport default ChatEditor;","import React from 'react';\r\n\r\n\r\n\r\nimport ChatHeader from './chatHeader';\r\nimport ChatBody from './chatBody';\r\nimport ChatEditor from './chatEditor';\r\n\r\nconst ChatView = () => {\r\n\r\n    return (\r\n        <>\r\n            <ChatHeader />\r\n            <ChatBody />\r\n            <ChatEditor />\r\n        </>\r\n    );\r\n\r\n}\r\nexport default ChatView;","import React from 'react';\r\nimport ChatView from './chat.view';\r\n\r\nconst Chat = props => {\r\n\r\n    return <ChatView />;\r\n}\r\nexport default Chat;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\n\r\nimport text from './idioma.json';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  link: {\r\n    cursor: 'pointer',\r\n    textDecoration: 'none',\r\n    color: theme.palette.text.secondary,\r\n    '&:hover':{\r\n        textDecoration: 'underline',\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function SignUp({idioma, onSignUp,emailState, onEmailChange, passState, onPassChange, nameState, onNameChange, lastNameRef}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {text.signup[idioma]}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label={text.firstName[idioma]}\r\n                autoFocus\r\n                value={nameState.value}\r\n                helperText={!nameState.valid ? text[nameState.msg][idioma] : ''}\r\n                error={!nameState.valid}\r\n                onChange={onNameChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label={text.lastName[idioma]}\r\n                name=\"lastName\"\r\n                autoComplete=\"lname\"\r\n                inputRef={lastNameRef}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label={text.email[idioma]}\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                value={emailState.value}\r\n                helperText={!emailState.valid ? text.invalidEmail[idioma] : ''}\r\n                error={!emailState.valid}\r\n                onChange={onEmailChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label={text.password[idioma]}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={passState.value}\r\n                helperText={!passState.valid ? text[passState.msg][idioma] : ''}\r\n                error={!passState.valid}\r\n                onChange={onPassChange}\r\n              />\r\n            </Grid>            \r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={onSignUp}\r\n          >\r\n            {text.signup[idioma]}\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <RouterLink to=\"/\" className={classes.link}>\r\n              {text.signin[idioma]}\r\n              </RouterLink>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import React, {useState, useRef} from 'react';\r\nimport axios from 'axios';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport Signup from './signup.view';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\nimport NotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport text from './idioma.json';\r\n\r\nconst SignupController = props => {\r\n    \r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openSuccessNotification, openErrorNotification} = NotificationHook();\r\n    const [emailState, setEmailState] = useState({value: \"\", valid: true});\r\n    const [passState, setPassState] = useState({value: \"\", valid: true});    \r\n    const [nameState, setNameState] = useState({value: \"\", valid: true});    \r\n    \r\n    const lastNameRef = useRef();\r\n\r\n    const onSignUp = (event) => {\r\n        event.preventDefault();\r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(emailState.value)){\r\n            setEmailState({...emailState, valid: false});\r\n        }else\r\n        if(passState.value.length < 8){\r\n            setPassState({...passState, valid: false, msg: 'passShort'});\r\n        }else\r\n\r\n        if(!/^[a-zA-Z\\']+$/.test(nameState.value)){\r\n            setNameState({...nameState, valid: false, msg: 'nameInvalid'});\r\n        }else\r\n        if(nameState.value.length < 2){\r\n            setNameState({...nameState, valid: false, msg: 'nameShort'});\r\n        }else\r\n        if(nameState.value.length >= 20){\r\n            setNameState({...nameState, valid: false, msg: 'nameLong'});\r\n        }else {\r\n            // All validations pass!\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/signup`, {\r\n                firstName: nameState.value,\r\n                lastName: lastNameRef.current.value,\r\n                email: emailState.value,\r\n                password: passState.value,\r\n                language: idioma,\r\n                hostname: window.location.host\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 201){\r\n                    // Send a notification\r\n                    openSuccessNotification(text.userCreated[idioma]);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                if(err.response.status === 409){\r\n                    openErrorNotification(text.duplicated[idioma]);\r\n                }else{\r\n                    openErrorNotification(text.error[idioma]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    const onNameChange = ({target: {value}}) => {\r\n        setNameState({...nameState, value: value, valid: true});\r\n    }\r\n    const onEmailChange = ({target:{value}}) => {\r\n        setEmailState({...emailState, value: value, valid: true});\r\n    }\r\n    const onPassChange = ({target: {value}}) => {\r\n        setPassState({...passState, value: value, valid: true});\r\n    }\r\n\r\n    return (\r\n        <Signup \r\n            idioma={idioma}\r\n           \r\n            \r\n            lastNameRef={lastNameRef}\r\n            nameState={nameState}\r\n            passState={passState}\r\n            emailState={emailState}\r\n            onSignUp={onSignUp}\r\n            onNameChange={onNameChange}\r\n            onEmailChange={onEmailChange}\r\n            onPassChange={onPassChange}\r\n        />\r\n    );\r\n\r\n}\r\nexport default SignupController;","import React from 'react';\r\nimport SignupController from './signup.controller';\r\n\r\nconst Signup = props => {\r\n\r\n    return <SignupController />;\r\n\r\n}\r\nexport default Signup;","import React from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {Snackbar } from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\n\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\n\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\nconst NotificationView = () => {\r\n    const [notificationState, setNotState] = useRecoilState(notificationAtom);\r\n    \r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        setNotState({...notificationState, open: false});\r\n    };\r\n\r\n    return <Snackbar \r\n        open={notificationState.open}\r\n        autoHideDuration={notificationState.autoHideDuration}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical:'top', horizontal:'center' }}\r\n    >\r\n        <Alert\r\n            onClose={handleClose}\r\n            severity={notificationState.severity}\r\n        >\r\n            {notificationState.msg}\r\n        </Alert>\r\n    </Snackbar>;\r\n\r\n}\r\nexport default NotificationView;","import React from 'react';\r\nimport NotificationView from './notification/notification.view';\r\n//import Backdrop from './backdrop/backdrop.view';\r\n\r\nconst Notification = props => {\r\n\r\n    return (\r\n        <>\r\n            <NotificationView />\r\n            {/*<Backdrop />*/}\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport text from './idioma.json'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  }\r\n}));\r\n\r\nexport default function ChangePassView({idioma, passState, pass2State, onPassChange, onPass2Change, submitPass}) {\r\n  \r\n        const classes = useStyles();\r\n\r\n  return (  \r\n    <Container component=\"main\" maxWidth=\"xs\">  \r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {text.title[idioma]}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label={text.password[idioma]}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={passState.value}\r\n                onChange={onPassChange}\r\n                helperText={!passState.valid ? text.invalidPass[idioma] : ''}\r\n                error={!passState.valid}\r\n            />\r\n            <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label={text.repeatPassword[idioma]}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={pass2State.value}\r\n                onChange={onPass2Change}\r\n                helperText={!pass2State.valid ? text.passNotEqual[idioma] : ''}\r\n                error={!pass2State.valid}\r\n            />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={submitPass}            \r\n          >\r\n            {text.changePass[idioma]}\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <RouterLink to=\"/\">\r\n              {text.signin[idioma]}\r\n              </RouterLink>\r\n            </Grid>\r\n          </Grid>\r\n         </form>\r\n      </div>\r\n      </Container>\r\n  );\r\n}","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport NotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport axios from 'axios';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport ChangePassView from './changepass.view';\r\nimport {idiomaState} from './../../components/recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport text from './idioma.json';\r\n\r\nconst ChangePassController = props => {\r\n    \r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const {openErrorNotification, openSuccessNotification} = NotificationHook();\r\n    const [passState, setPassState] = useState({value: \"\", valid: true});\r\n    const [pass2State, setPass2State] = useState({value: \"\", valid: true});\r\n\r\n\r\n    const onPassChange = ({target: {value}}) => {\r\n        setPassState({...passState, value: value, valid: true});\r\n        setPass2State({...pass2State, valid: true});\r\n    }\r\n    const onPass2Change = ({target: {value}}) => {\r\n        setPass2State({...pass2State, value: value, valid: true});\r\n    }\r\n\r\n    const submitPass = (event) => {\r\n        event.preventDefault();\r\n        if(passState.value.length < 8){\r\n            setPassState({...passState, valid: false});\r\n        }else if(pass2State.value !== passState.value){\r\n            setPass2State({...pass2State, valid: false});\r\n        }else {\r\n            const token = props.match.params.token;\r\n            \r\n            axios.post(`${DEFAULT_CONFIG.server}/users/resetpassword`,{\r\n                token: token,\r\n                password: passState.value\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    openSuccessNotification(text.passChangeOk[idioma]);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.passChangeError[idioma]);\r\n            });\r\n        }\r\n    }\r\n    \r\n    return <ChangePassView idioma={idioma} \r\n            passState={passState}\r\n            pass2State={pass2State}\r\n\r\n            onPassChange={onPassChange}\r\n            onPass2Change={onPass2Change}\r\n            submitPass={submitPass}\r\n            />;\r\n\r\n}\r\n\r\nexport default withRouter(ChangePassController);\r\n","import React from 'react';\r\nimport ChangePassController from './changepass.controller';\r\nconst ChangePass = props => {\r\n\r\n    return <ChangePassController {...props}/>;\r\n\r\n}\r\nexport default ChangePass;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { pink, blueGrey } from '@material-ui/core/colors';\r\n\r\n\r\n\r\nimport text from './idioma.json';\r\nimport { Container, Divider } from '@material-ui/core';\r\n\r\nimport AvatarEdit from 'react-avatar-edit';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        paddingTop: theme.spacing(2),\r\n        overflowY: 'auto'\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    actionsContainer: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    Stepper: {\r\n        backgroundColor: 'transparent',\r\n        \r\n    },\r\n    combo: {\r\n        minWidth: 120\r\n    },\r\n    avatarPink: {\r\n        color: theme.palette.getContrastText(pink[300]),\r\n        backgroundColor: pink[300],\r\n        marginLeft: theme.spacing(7),\r\n        width: theme.spacing(10),\r\n        height: theme.spacing(10),\r\n      },\r\n    avatarBlue: {\r\n        color: theme.palette.getContrastText(blueGrey[500]),\r\n        backgroundColor: blueGrey[500],\r\n        marginLeft: theme.spacing(7),\r\n        width: theme.spacing(10),\r\n        height: theme.spacing(10),\r\n    },\r\n    avatarButton: {\r\n        padding: 0, \r\n        borderRadius: '50%', \r\n        minWidth: 0\r\n    },\r\n    avatarEdit: {\r\n        margin: theme.spacing(2),\r\n        marginLeft: theme.spacing(3),\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: ''\r\n    },\r\n    \r\n    \r\n}));\r\n\r\nconst ActivateUserView = ({idioma, activeStep, handleFinish,\r\n    handleLanguageChange, \r\n    sexSelectHandler,sexState,\r\n    nicknameState, setNicknameHandler,\r\n    preview, setPreview,\r\n    goNextConf,goBackConf,\r\n    sendActivation, activationError,\r\n    avatarRef,\r\n    isUserInvited, passState, onChangePass\r\n}) => {\r\n\r\n    const classes = useStyles();    \r\n\r\n    let orientation = 'vertical';\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Container>\r\n                <Typography variant=\"h6\">{`${text.hello[idioma]}${nicknameState}${text.hello1[idioma]}`}</Typography>\r\n                <Typography variant=\"body1\">{text.descriptionText[idioma]}</Typography>\r\n            </Container>\r\n            <Divider />\r\n            <Stepper activeStep={activeStep} orientation={orientation} className={classes.Stepper}>\r\n                <Step >\r\n                    <StepLabel >{text.labelIdioma[idioma]}</StepLabel>\r\n                    <StepContent>\r\n                        <FormControl variant=\"standard\" className={classes.combo}>\r\n                            <Select\r\n                                id=\"input-language\"\r\n                                value={idioma}\r\n                                onChange={handleLanguageChange}\r\n                            >\r\n                                <MenuItem value={'en'}>{text.english[idioma]}</MenuItem>\r\n                                <MenuItem value={'es'}>{text.spanish[idioma]}</MenuItem>\r\n                            </Select>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={goNextConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.next[idioma]}\r\n                            </Button>\r\n                        </FormControl>                        \r\n                    </StepContent>\r\n                </Step>\r\n\r\n                <Step >\r\n                    <StepLabel >{text.labelSexo[idioma]}</StepLabel>\r\n                    <StepContent>\r\n                        <FormControl variant=\"standard\" className={classes.combo}>\r\n                            <Select\r\n                                id=\"input-language\"\r\n                                value={sexState}\r\n                                onChange={sexSelectHandler}\r\n                            >\r\n                                <MenuItem value={'M'}>{text.male[idioma]}</MenuItem>\r\n                                <MenuItem value={'F'}>{text.female[idioma]}</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <div className={classes.actionsContainer}>\r\n                            <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={goBackConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.back[idioma]}\r\n                            </Button>\r\n                            <Button\r\n                                disabled={sexState == null}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={goNextConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.next[idioma]}\r\n                            </Button>\r\n                            </div>\r\n                        </div>\r\n                    </StepContent>\r\n                </Step>\r\n\r\n                <Step >\r\n                    <StepLabel >{text.labelNickname[idioma]}</StepLabel>\r\n                    <StepContent>\r\n                        <FormControl variant=\"standard\" className={classes.combo}>\r\n                            <TextField \r\n                                id=\"standard-basic\"\r\n                                placeholder={text.labelNickname[idioma]}\r\n                                value={nicknameState}\r\n                                onChange={setNicknameHandler}   \r\n                            />\r\n                        </FormControl>\r\n                        <div className={classes.actionsContainer}>\r\n                            <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={goBackConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.back[idioma]}\r\n                            </Button>\r\n                            <Button\r\n                                disabled={nicknameState === ''}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={goNextConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.next[idioma]}\r\n                            </Button>\r\n                            </div>\r\n                        </div>\r\n                    </StepContent>\r\n                </Step>\r\n\r\n                <Step >\r\n                    <StepLabel >{text.labelAvatar[idioma]}</StepLabel>\r\n                    <StepContent>                    \r\n                        <div className={classes.avatarEdit}>\r\n                            <AvatarEdit\r\n                                width={120}\r\n                                height={100}\r\n                                onCrop={prev => {                                    \r\n                                    setPreview(prev)}\r\n                                }\r\n                                onClose={() => {setPreview(null)}}\r\n                                closeIconColor={pink[500]}\r\n                                label={text.choosefile[idioma]}        \r\n                                ref={avatarRef}                    \r\n                            />\r\n                                <Avatar                                    \r\n                                    alt={`${nicknameState}`}\r\n                                    src={preview}\r\n                                    variant=\"circle\"\r\n                                    className={sexState===\"F\" ? classes.avatarPink : classes.avatarBlue}\r\n                                />\r\n                        </div>\r\n                        <div className={classes.actionsContainer}>\r\n                            <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={goBackConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.back[idioma]}\r\n                            </Button>\r\n                            <Button\r\n                                disabled={nicknameState === ''}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={isUserInvited ? goNextConf : sendActivation}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.next[idioma]}\r\n                            </Button>\r\n                            </div>\r\n                        </div>\r\n                    </StepContent>\r\n                </Step>\r\n                \r\n                {isUserInvited \r\n                ? <Step >\r\n                    <StepLabel >{text.password[idioma]}</StepLabel>\r\n                    <StepContent>\r\n                        \r\n                        <FormControl variant=\"standard\" className={classes.combo}>\r\n                            <TextField\r\n                                variant=\"standard\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label={text.pass[idioma]}\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                value={passState.value}\r\n                                helperText={!passState.valid ? text[passState.msg][idioma] : ''}\r\n                                error={!passState.valid}\r\n                                onChange={onChangePass}\r\n                            />\r\n                            \r\n                            <div className={classes.actionsContainer}>\r\n                                <div>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        onClick={goBackConf}\r\n                                        className={classes.button}\r\n                                    >\r\n                                        {text.back[idioma]}\r\n                                    </Button>\r\n                                    <Button\r\n                                        disabled={!passState.valid || !passState.value.length > 0}\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={sendActivation}\r\n                                        className={classes.button}\r\n                                    >\r\n                                        {text.next[idioma]}\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        </FormControl>\r\n\r\n                    </StepContent>\r\n                </Step>\r\n                : null\r\n                 }\r\n\r\n                <Step >\r\n                    <StepLabel error={activationError}>{text.label1[idioma]}</StepLabel>\r\n                </Step>\r\n\r\n                <Step >\r\n                    <StepLabel >{text.label3[idioma]}</StepLabel>\r\n                    <StepContent>\r\n                        <Typography>{text.content3[idioma]}</Typography>\r\n                        <div className={classes.actionsContainer}>\r\n                            <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={handleFinish}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.goLogin[idioma]}\r\n                            </Button>\r\n                            </div>\r\n                        </div>\r\n                    </StepContent>\r\n                </Step>\r\n\r\n            </Stepper>\r\n            <Divider />\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default ActivateUserView;","import React, {useState, useRef} from 'react';\r\nimport {withRouter, Redirect} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport {useRecoilState} from 'recoil';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\n\r\nimport ActivateUserView from './activateuser.view';\r\n\r\nconst ActivateUserController = props => {\r\n\r\n    const [idioma, setIdioma] = useRecoilState(idiomaState);\r\n\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [activationError, setActivationError] = useState(false);\r\n    const [redirectState, setRedirect] = useState(null);\r\n    const [sexState, setSexState] = useState(null);\r\n    const [nicknameState, setNickname] = useState(props.match.params.nickname);\r\n    const [previewAvatar, setPreviewAvatar] = useState(null);\r\n    const [passState, setPassState] = useState({value: \"\", valid: true});\r\n    const avatarRef = useRef(null);\r\n\r\n\r\n    const handleLanguageChange = ({target: {value}}) => {\r\n        setIdioma(value);\r\n    }\r\n\r\n    const handleFinish = () => {\r\n        setRedirect(true);\r\n    };\r\n    const goNextConf = () => {\r\n        setActiveStep(state => state+1);\r\n    }\r\n    const goBackConf = () => {\r\n        setActiveStep(state => state-1);\r\n    }\r\n    const sexSelectHandler = ({target: {value}}) => {\r\n        setSexState(value);\r\n    }\r\n    const setNicknameHandler = ({target: {value}}) => {\r\n        setNickname(value);\r\n    }\r\n    const onChangePass = ({target:{value}}) => {\r\n\r\n        if(value.length < 8){\r\n            setPassState({...passState,value: value, valid: false, msg: 'passShort'});\r\n        }else{\r\n            setPassState({...passState,value: value, valid: true, msg: null});\r\n        }\r\n    }\r\n\r\n\r\n    const sendActivation = () => {\r\n        \r\n        goNextConf();\r\n\r\n        axios.post(`${DEFAULT_CONFIG.server}/users/activate`, \r\n            {\r\n                token: props.match.params.token,\r\n                language: idioma,\r\n                gender: sexState,\r\n                nickname: nicknameState,\r\n                avatar: previewAvatar,\r\n                isUserInvited: props.match.params.invited === 'invited',\r\n                password: passState.value\r\n            })\r\n        .then(resp => {\r\n            if(resp.status === 200){\r\n                goNextConf();\r\n            }\r\n            \r\n        })\r\n        .catch(err => {\r\n            setActivationError(true);\r\n        });\r\n    }\r\n\r\n    if(redirectState){\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return <ActivateUserView \r\n        idioma={idioma}\r\n        activeStep={activeStep}\r\n        handleFinish={handleFinish}\r\n        handleLanguageChange={handleLanguageChange}\r\n        sexSelectHandler={sexSelectHandler}\r\n        sexState={sexState}\r\n        nicknameState={nicknameState}\r\n        setNicknameHandler={setNicknameHandler}\r\n        preview={previewAvatar}\r\n        setPreview={setPreviewAvatar}\r\n        \r\n        goNextConf={goNextConf}\r\n        goBackConf={goBackConf}\r\n\r\n        sendActivation={sendActivation}\r\n        activationError={activationError}\r\n        avatarRef={avatarRef}\r\n\r\n        isUserInvited={props.match.params.invited === 'invited'}\r\n        passState={passState}\r\n        onChangePass={onChangePass}\r\n\r\n    />;\r\n\r\n}\r\nexport default withRouter(ActivateUserController);","import React from 'react';\r\nimport ActivateUserController from './activateuser.controller';\r\n\r\nconst ActivateUser = props => {\r\n\r\n    return <ActivateUserController />;\r\n\r\n}\r\nexport default ActivateUser;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket'\r\nimport {loginData} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\n\r\nconst UserSubscriber = props => {   \r\n    const client = socket.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n\r\n        client.on('new user', data => {\r\n            console.log('new user');\r\n            \r\n            friendDispatcher({\r\n                action: 'connect', \r\n                payload: {\r\n                    data:data,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.connected\r\n                }\r\n            });\r\n        });\r\n        \r\n        if(userData)\r\n            client.emit('new user', {userId: userData.userId});\r\n\r\n        return () => client.off('new user');\r\n    }, [friendDispatcher, client, userData]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst UserSubscriber = props => {\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const client = socket.getSocket();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('user disconnect', data => {\r\n            friendDispatcher({\r\n                action: 'disconnect', \r\n                payload: {\r\n                    socketId: data.socketId,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.disconnected\r\n                }\r\n            })\r\n        });\r\n\r\n        return () => client.off('user disconnect');\r\n    }, []);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {chatConversation} from '../recoil/atoms';\r\nimport socket from '../../utils/socket'\r\nconst IncomingMsgSubscriber = props => {\r\n\r\n    const [conversation, setConvertation] = useRecoilState(chatConversation);\r\n    const client = socket.getSocket();\r\n    \r\n    useEffect(() => {\r\n\r\n        client.on('message', data => {\r\n            const newStateObj = {...conversation};\r\n            if(conversation[data.socketId]){\r\n                newStateObj[data.socketId] = {...conversation[data.socketId]};\r\n                if(conversation[data.socketId].text){\r\n                    newStateObj[data.socketId].text = [...conversation[data.socketId].text, {myMsg: false, msg: data.msg}];\r\n                    \r\n                    \r\n\r\n                    if(data.socketId !== newStateObj.active){\r\n                        newStateObj[data.socketId].novistos = newStateObj[data.socketId].novistos + 1; \r\n                    }\r\n                }else{\r\n                    newStateObj[data.socketId].text = [];\r\n                }\r\n                \r\n            }else{\r\n                newStateObj[data.socketId] = {\r\n                    text: [{myMsg: false, msg: data.msg}],\r\n                    nickname: null,\r\n                    socketId: null,\r\n                    novistos: 1\r\n                }\r\n            }\r\n            setConvertation(newStateObj);\r\n        });\r\n\r\n        return () => client.off('message');\r\n    }, [conversation]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default IncomingMsgSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst DeclinedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('declined friendship', ({declinerId, declinedId, socketIdDecliner, socketIdDeclined}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: declinerId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDecliner}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.declinedInv[idioma]}`, {variant: \"warning\"});\r\n                })\r\n                .catch(err => {\r\n                    if(err.response.status === 404){\r\n                        friendDispatcher({\r\n                            action: 'delete', \r\n                            payload: {\r\n                                friendId: declinerId\r\n                            }});\r\n                    }\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('declined friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeclinedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst RequestFriendSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('requested friendship', ({userIdRequester, userIdRequested, socketIdRequester}) => {\r\n            if(userIdRequested === userData.userId){\r\n                \r\n                \r\n                const optimisticAction = token => {\r\n                    axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                        friendId: userIdRequester\r\n                    },{\r\n                        headers: {\r\n                            'Authorization': token\r\n                        }\r\n                    })\r\n                    .then(resp => {\r\n                        if(resp.status === 200){\r\n                            \r\n                            friendDispatcher({\r\n                                action: 'add', \r\n                                payload: {\r\n                                    friend: {...resp.data.friend, socketId: socketIdRequester}\r\n                                }});\r\n                            return resp.data.friend;\r\n                        }\r\n                    })\r\n                    .then(friend => {\r\n                        enqueueSnackbar(`${friend.nickname} ${text.requestedInv[idioma]}`, {variant: \"success\"});\r\n                    })\r\n                    .catch(err => {\r\n                        openErrorNotification(text.errorLoadingFriends[idioma])\r\n                    });\r\n                }\r\n                authMiddleware(optimisticAction);\r\n                \r\n            }\r\n        });\r\n\r\n        return () => client.off('requested friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RequestFriendSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst AcceptedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('accepted friendship', ({accepterId, socketIdAccepter}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: accepterId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdAccepter}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.accept[idioma]}`, {variant: \"success\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('accepted friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default AcceptedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst DeletedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('deleted contact', ({deleterId, socketIdDeleter}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: deleterId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDeleter}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.delete[idioma]}`, {variant: \"error\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('deleted contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeletedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst BlokedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('blocked contact', ({blokerId, socketIdBloked}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: blokerId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdBloked}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.block[idioma]}`, {variant: \"error\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n        });\r\n\r\n        return () => client.off('bloked contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default BlokedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue, useRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport {addMsgToConversationSelector, friendSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector} from '../recoil/selectors';\r\nimport {loginData, activeChatWith, idiomaState} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst RecibedMessageSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const editMsgToStateSaved = useSetRecoilState(editMsgToStateSavedSelector);\r\n    const editAllMsgToReaded = useSetRecoilState(editAllMsgToReadedSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const activeChatContactId = useRecoilValue(activeChatWith);\r\n    const {enqueueSnackbar} = useSnackbar();\r\n    const [friends, friendDispatcher] = useRecoilState(friendSelector);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n        client.on('recived message', ({content, userOriginId, socketIdSender, messageId, datetime, consecutive}) => {\r\n            \r\n            const contact = friends.find(f => f.contactId === userOriginId);\r\n            if(activeChatContactId !== userOriginId){                \r\n                enqueueSnackbar(`${contact.nickname} ${text.writingYou[idioma]}`, {variant: 'info'});\r\n\r\n                const dataObj = {\r\n                    [userOriginId]: {\r\n                        cantidad: 1,\r\n                        lastMessage: content,\r\n                        datetime: datetime\r\n                    }\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n            }else{\r\n\r\n                const dataObj = {\r\n                    [userOriginId]: {\r\n                        cantidad: 0,\r\n                        lastMessage: content,\r\n                        datetime: datetime\r\n                    }\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n                const client = socketClient.getSocket();\r\n                client.emit('read messages', {\r\n                    userId: userData.userId,\r\n                    contactId: contact.contactId,\r\n                    notifyTo: contact.socketId,\r\n                    token: localStorage.getItem('token')\r\n                });\r\n            }\r\n            addMsgToConversation({\r\n                contactId: userOriginId,\r\n                messageId: messageId,\r\n                content: content,\r\n                datetime: datetime,\r\n                state: 0\r\n            });\r\n        });\r\n\r\n        client.on('saved message', ({contactId, messageId, datetime,consecutive,soketIdContact}) => {\r\n            editMsgToStateSaved({\r\n                contactId: contactId,\r\n                messageId: messageId,\r\n                datetime: datetime,\r\n                consecutive: consecutive\r\n            });\r\n        });\r\n\r\n        client.on('readed messages', ({contactId}) => {\r\n            editAllMsgToReaded({contactId})\r\n        });\r\n\r\n        return () => {\r\n            client.off('recived message');\r\n            client.off('saved message');\r\n            client.off('readed messages');\r\n        };\r\n    });\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RecibedMessageSubscriber;","//import React from 'react';\r\nimport {useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport {tokenTimeoutAtom} from '../components/recoil/atoms';\r\nimport useLogout from './useLogout';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration'\r\nimport { useCallback } from 'react';\r\n\r\nconst useRefreshToken = () => {\r\n\r\n    const setTokenTimeout = useSetRecoilState(tokenTimeoutAtom);\r\n    const logout = useLogout();\r\n    \r\n    const refreshToken = useCallback(() => {\r\n        const token = localStorage.getItem('token');\r\n        const refresh_token = localStorage.getItem('refresh_token');\r\n        const refresh_token_expires = localStorage.getItem('refresh_token_expires');\r\n        if (refresh_token && refresh_token_expires && new Date(refresh_token_expires).getTime() > new Date().getTime()) {\r\n            \r\n            return axios.post(`${DEFAULT_CONFIG.server}/users/refreshtoken`, {\r\n                token: token, refresh_token: refresh_token\r\n              })\r\n              .then(resp => {\r\n                if(resp.status === 200){\r\n                  const {new_token, new_refresh_token, new_token_expires, new_refresh_token_expires} = resp.data;\r\n                  localStorage.setItem('token', new_token);\r\n                  localStorage.setItem('refresh_token', new_refresh_token);\r\n                  localStorage.setItem('token_expires', new_token_expires);\r\n                  localStorage.setItem('refresh_token_expires', new_refresh_token_expires);\r\n                  setTokenTimeout({\r\n                        timeleft: new_token_expires\r\n                  })\r\n                }          \r\n              })\r\n              .catch(err => {\r\n                  logout();\r\n              });\r\n    \r\n        }else{\r\n            logout();\r\n        }\r\n    }, [logout, setTokenTimeout])\r\n    \r\n    return refreshToken;\r\n  }\r\n\r\n  export default useRefreshToken;","import React from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {subscribeToEventsState, loginData, activeChatWith} from './components/recoil/atoms';\r\n\r\n// --------------------------- New Style --------------------- //\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Signin from './view/signin';\r\nimport ContactList from './view/contacts';\r\nimport MainButton from './view/mainButton';\r\nimport MainContainter from './view/main';\r\nimport Toolbar from './view/toolbar';\r\nimport ChatCmp from './view/chat';\r\nimport Signup from './view/signup';\r\nimport UiComponents from './components/uiComponents';\r\nimport ChangePass from './view/changepass';\r\nimport ActivateUser from './view/activateuser';\r\nimport NewUserSubscriber from './components/events/newUserSubscriber';\r\nimport UserDisconnectSubscriber from './components/events/userDisconnectSubscriber';\r\nimport IncomingMsgSubscriber from './components/events/incomingMsgSubscriber';\r\nimport DeclinedFriendshipSubscriber from './components/events/declinedFriendshipSubscriber';\r\nimport RequestFriendSubscriber from './components/events/requestFriendshipSubscriber';\r\nimport AcceptFriendshipSubscriber from './components/events/acceptedFriendshipSubscriber';\r\nimport DeletedContactSubscriber from './components/events/deletedContactSubscriber';\r\nimport BlokedContactSubscriber from './components/events/blokedContactSubscriber';\r\nimport RecibedMessageSubscriber from './components/events/recibedMessageSubscriber';\r\nimport {SnackbarProvider} from 'notistack';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport {tokenTimeoutAtom, darkModeAtom} from './components/recoil/atoms';\r\nimport useRefreshToken from './utils/useRefreshToken';\r\nimport { Container, makeStyles } from '@material-ui/core';\r\nconst TimerCmp = () => {\r\n\r\n    const refreshToken = useRefreshToken();\r\n    const timeoutData = useRecoilValue(tokenTimeoutAtom);\r\n    \r\n    React.useEffect(() => {\r\n        \r\n        let timeleft = new Date(timeoutData.timeleft).getTime() - new Date().getTime();\r\n        if(timeleft >= 10000){\r\n            setTimeout(()=> {\r\n                refreshToken();\r\n            }, timeleft - 10000);\r\n        }\r\n\r\n    }, [timeoutData]);\r\n\r\n    return <></>;\r\n}\r\n\r\nconst themeDark = createMuiTheme({palette: {type: 'dark',}});\r\nconst themeDefault = createMuiTheme({});\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n    const dark = useRecoilValue(darkModeAtom);\r\n    const subscribe = useRecoilValue(subscribeToEventsState);\r\n    const userData = useRecoilValue(loginData);\r\n    const chatWith = useRecoilValue(activeChatWith);\r\n    const notistackRef = React.createRef();\r\n    const onClickDismiss = key => () => { \r\n        notistackRef.current.closeSnackbar(key);\r\n    }\r\n  \r\n    const cmp  = userData !== null \r\n    ? <>\r\n            {\r\n                chatWith \r\n                ? <ChatCmp />                \r\n                : <Route path=\"/contacts\" exact render={ () => (\r\n                    <ThemeProvider theme={dark ? themeDark : themeDefault}>\r\n                        <Toolbar />\r\n                        <MainButton />\r\n                        <ContactList />\r\n                    </ThemeProvider>\r\n                )} />\r\n            }\r\n        </> \r\n    : null ;\r\n\r\n\r\n    return (<ThemeProvider theme={dark ? themeDark : themeDefault}>\r\n       \r\n            <MainContainter>\r\n                <CssBaseline />\r\n                <UiComponents />\r\n                <SnackbarProvider \r\n                    maxSnack={3} \r\n                    autoHideDuration={3000}\r\n                    preventDuplicate\r\n                    anchorOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    ref={notistackRef}\r\n                    action={(key) => (\r\n                        <IconButton onClick={onClickDismiss(key)}>\r\n                            <CloseIcon fontSize=\"small\" style={{color: 'white'}} />\r\n                        </IconButton>\r\n                    )}\r\n                >\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={Signin} />\r\n                        <Route path=\"/signup\" exact component={Signup} />\r\n                        {cmp}\r\n                        <Route path=\"/changepass/:token\" exact component={ChangePass} />\r\n                        <Route path=\"/activateuser/:token/:nickname/:invited\" exact component={ActivateUser} /> \r\n                        <Route path=\"/activateuser/:token/:nickname\" exact component={ActivateUser} /> \r\n                        <Redirect from='/' to='/' />       \r\n                    </Switch>\r\n                    \r\n                    {subscribe ? <>\r\n                            <NewUserSubscriber />\r\n                            <UserDisconnectSubscriber />\r\n                            <IncomingMsgSubscriber />\r\n                            <RequestFriendSubscriber />\r\n                            <DeclinedFriendshipSubscriber />\r\n                            <AcceptFriendshipSubscriber />\r\n                            <DeletedContactSubscriber />\r\n                            <BlokedContactSubscriber />\r\n                            <RecibedMessageSubscriber />\r\n                        </>: null\r\n                    }\r\n                    <TimerCmp />\r\n                </SnackbarProvider>\r\n            </MainContainter>\r\n        </ThemeProvider>);\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {RecoilRoot} from 'recoil';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n//import 'fontsource-roboto';\r\nimport \"fontsource-roboto/300.css\"\r\nimport \"fontsource-roboto/400.css\"\r\nimport \"fontsource-roboto/500.css\"\r\nimport \"fontsource-roboto/700.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>      \r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n//serviceWorker.register();\r\n"],"sourceRoot":""}