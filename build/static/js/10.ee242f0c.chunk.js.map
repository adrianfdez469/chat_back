{"version":3,"sources":["utils/axiosHook.js","view/toolbar/profileOptions/changepass/changepass.view.js","view/toolbar/profileOptions/changepass/changepass.controller.js","view/toolbar/profileOptions/changepass/index.js","view/toolbar/profileOptions/changeavatar/changeavatar.view.js","view/toolbar/profileOptions/changeavatar/changeavatar.controller.js","view/toolbar/profileOptions/changeavatar/index.js","view/toolbar/profileOptions/editprofile/editprofile.view.js","view/toolbar/profileOptions/editprofile/editprofile.controller.js","view/toolbar/profileOptions/editprofile/index.js","view/shareapp/shareapp.view.js","view/shareapp/shareapp.controller.js","view/shareapp/index.js","view/feedback/feedback.view.js","view/feedback/feeedback.controller.js","view/feedback/index.js","view/bugreport/bugreport.view.js","view/bugreport/bugreport.controller.js","view/bugreport/index.js","view/toolbar/profileOptions/profileOpt.view.js","view/toolbar/profileOptions/profileOpt.controller.js","view/toolbar/profileOptions/index.js","view/toolbar/toolbar.view.js","view/toolbar/toolbar.controller.js","view/toolbar/index.js"],"names":["useAxiosHook","useNotificationHook","openErrorNotification","openSuccessNotification","postRequest","url","bodyParams","doFnAfterSuccess","doFnAfterError","messageOnSuccess","messageOnError","authMidleware","token","axios","post","DEFAULT_CONFIG","server","headers","then","resp","catch","err","usePassStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","ChangepassView","text","idioma","oldPassState","passState","pass2State","onOldPassChange","onPassChange","onPass2Change","submitPass","classes","Container","component","maxWidth","className","Avatar","fontSize","Typography","variant","title","noValidate","TextField","required","fullWidth","name","label","oldpassword","type","id","autoComplete","value","onChange","helperText","valid","invalidOldPass","error","password","invalidPass","repeatPassword","passNotEqual","Button","color","onClick","changePass","ChangepassController","useRecoilValue","idiomaState","logout","useLogout","useState","setOldPassState","setPassState","setPass2State","target","event","preventDefault","length","oldPassword","passChangeOk","status","console","log","response","passChange403Error","passChangeError","ChangePass","props","useStyles","avatarEdit","marginLeft","justifyContent","height","button","marginBottom","ChangeAvatarView","preview","setPreview","avatarRef","onAvatarChange","onCrop","prev","onClose","closeIconColor","pink","choosefile","ref","src","disabled","btnCambiar","ChangeavatarController","close","setAvatar","useSetRecoilState","userAvatarState","previewAvatar","setPreviewAvatar","useRef","onError","data","avatarUrl","ChangeAvatar","link","cursor","textDecoration","customSwitch","alignSelf","CustomSwitch","withStyles","switchBase","blue","opacity","common","white","borderColor","track","checked","Switch","EditProfileView","lastName","isOpen","setClose","userData","nameState","nicknameState","emailState","gender","onNameChange","onEmailChange","onNickNameChange","onLastNameChange","onSwitchGender","onSave","avatarSrc","CssBaseline","Grid","container","item","xs","sm","firstName","autoFocus","msg","email","invalidEmail","nickname","style","male","female","save","EditProfileController","useRecoilState","loginData","setUserData","useNotification","setEmailState","setNickNameState","setNameState","setLastName","setGender","oldState","test","newUserData","onSaveSuccess","duplicated","EditProfile","ShareAppView","onSend","DialogTitle","winTitle","DialogContent","DialogContentText","DialogActions","send","ShareAppController","language","hostname","window","location","host","sendSuccess","emailExist","ShareApp","labels","0","0.5","1","1.5","2","2.5","3","3.5","4","4.5","5","ratingRow","FeedbackView","React","memo","globalState","comentState","onCommentChange","RatingRowStars","ratingType","lbAverage","Rating","readOnly","size","overall","precision","Box","ml","comment","multiline","rowsMax","state","setstate","newValue","onChangeActive","FeedbackController","setComntState","design","performance","usability","setGlobalState","calcProm","desing","cant","promedio","restoProm","useCallback","useEffect","lbOnLoadError","rating","stateObj","designRating","performaceRating","usabilityRating","lbOnSaveError","lbOnsaveOk","Feedback","BugReportView","report","rows","BugReportController","description","sendError","sendOk","BugReport","root","cardHeaderAction","cardHeaderContent","overflowX","marginRight","langSelect","fontFamily","fontWeight","lineHeight","letterSpacing","avatarMan","getContrastText","avatarWoman","useSmallPhotoCameraButtonStyle","iconButton","background","default","boxShadow","action","SmallPhotoCameraButton","IconButton","ProfileView","changeIdioma","darkMode","changeTheme","setChangePass","changeAvatar","setChangeAvatar","editProfile","setChangeProfile","shareApp","setShareApp","feedback","setFeedback","bugreport","setBugreport","Card","CardHeader","content","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","aria-label","Tooltip","subheader","Divider","List","ListItem","ListItemIcon","ListItemText","primary","edit","primaryTypographyProps","editpass","FormControl","Select","displayEmpty","inputProps","MenuItem","FormControlLabel","control","share","shareDesc","secondaryTypographyProps","feedbackDesc","reportDesc","Dialog","open","ProfileOptController","setChangePassword","setChangeAvat","setEditProfileState","setShareAppState","setFeedbackState","setBugreportState","setIdioma","darkModeAtom","setDarkMode","lang","localStorage","setItem","oldMode","ProfileOptions","flexGrow","menuButton","ToolbarView","anchorEl","setAnchorEl","Boolean","AppBar","position","aria-controls","aria-haspopup","currentTarget","Popover","transformOrigin","ToolbarController","Toolbar"],"mappings":"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","file":"static/js/10.ee242f0c.chunk.js","sourcesContent":["//import React from 'react';\r\nimport axios from 'axios';\r\n//import {useSetRecoilState} from 'recoil';\r\nimport authMidleware from '../authMiddleware';\r\nimport useNotificationHook from '../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\n//import useBackdrop from '../components/uiComponents/backdrop/useBackdrop';\r\n\r\nconst useAxiosHook = () => {\r\n\r\n    const {openErrorNotification, openSuccessNotification} = useNotificationHook();\r\n    //const {closeBackDrop, showBackDrop} = useBackdrop();\r\n\r\n    const postRequest = ({url, bodyParams= {}, doFnAfterSuccess=null, doFnAfterError = null, messageOnSuccess=null, messageOnError=null}) => {\r\n        \r\n        const optimisticAction = token => {\r\n            //showBackDrop();\r\n            axios.post(`${DEFAULT_CONFIG.server}${url}`, \r\n                bodyParams, \r\n                {\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    //closeBackDrop();\r\n                    if(messageOnSuccess) openSuccessNotification(messageOnSuccess);\r\n                    if(doFnAfterSuccess) doFnAfterSuccess(resp, token);\r\n                })\r\n                .catch(err => {\r\n                    //closeBackDrop();\r\n                    if(messageOnError) openErrorNotification(messageOnError);\r\n                    if(doFnAfterError) doFnAfterError(err);\r\n                })\r\n        }\r\n        /*const pesimisticAction = () => {            \r\n            clearUserData();\r\n        }*/\r\n        \r\n        authMidleware(optimisticAction/*, pesimisticAction*/);\r\n    };   \r\n\r\n\r\n    return {postRequest};\r\n\r\n}\r\nexport default useAxiosHook;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Container, Avatar, Typography, TextField, Button} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\nconst usePassStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(4),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    }\r\n  }));\r\n\r\nconst ChangepassView = ({text, idioma, oldPassState, passState, pass2State, onOldPassChange, onPassChange, onPass2Change, submitPass }) => {\r\n\r\n    const classes = usePassStyles();\r\n    \r\n    return <Container component=\"main\" maxWidth=\"xs\">  \r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon fontSize=\"large\"/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                    {text.title[idioma]}\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={text.oldpassword[idioma]}\r\n                            type=\"password\"\r\n                            id=\"oldpassword\"\r\n                            autoComplete=\"current-password\"\r\n                            value={oldPassState.value}\r\n                            onChange={onOldPassChange}\r\n                            helperText={!oldPassState.valid ? text.invalidOldPass[idioma] : ''}\r\n                            error={!oldPassState.valid}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={text.password[idioma]}\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            value={passState.value}\r\n                            onChange={onPassChange}\r\n                            helperText={!passState.valid ? text.invalidPass[idioma] : ''}\r\n                            error={!passState.valid}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={text.repeatPassword[idioma]}\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            value={pass2State.value}\r\n                            onChange={onPass2Change}\r\n                            helperText={!pass2State.valid ? text.passNotEqual[idioma] : ''}\r\n                            error={!pass2State.valid}\r\n                        />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={submitPass}            \r\n                    >\r\n                        {text.changePass[idioma]}\r\n                    </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n\r\n}\r\nexport default ChangepassView;","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {idiomaState} from '../../../../components/recoil/atoms';\r\nimport useLogout from '../../../../utils/useLogout';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport useNotificationHook from '../../../../components/uiComponents/notification/notification.hook';\r\nimport ChangepassView from './changepass.view';\r\nimport text from './idioma.json';\r\n\r\nconst ChangepassController = () => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const logout = useLogout();\r\n    const {postRequest} = useAxiosHook();\r\n    const {openErrorNotification} = useNotificationHook();\r\n\r\n    const [oldPassState, setOldPassState] = useState({value: \"\", valid: true});\r\n    const [passState, setPassState] = useState({value: \"\", valid: true});\r\n    const [pass2State, setPass2State] = useState({value: \"\", valid: true});\r\n\r\n    const onOldPassChange = ({target: {value}}) => {\r\n        setOldPassState({...passState, value: value, valid: true});\r\n    }\r\n    const onPassChange = ({target: {value}}) => {\r\n        setPassState({...passState, value: value, valid: true});\r\n        setPass2State({...pass2State, valid: true});\r\n    }\r\n    const onPass2Change = ({target: {value}}) => {\r\n        setPass2State({...pass2State, value: value, valid: true});\r\n    }\r\n\r\n    const submitPass = (event) => {\r\n        event.preventDefault();\r\n        if(oldPassState.value.length === 0){\r\n            setOldPassState({...oldPassState, valid: false})\r\n        } else if(passState.value.length < 8){\r\n            setPassState({...passState, valid: false});\r\n        }else if(pass2State.value !== passState.value){\r\n            setPass2State({...pass2State, valid: false});\r\n        }else {\r\n\r\n            postRequest({\r\n                url: '/users/changePassword',\r\n                bodyParams: {\r\n                    oldPassword: oldPassState.value, \r\n                    password: passState.value\r\n                },\r\n                messageOnSuccess: text.passChangeOk[idioma],\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        logout();\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    console.log(err.response);\r\n                    if(err.response.status === 403){\r\n                        openErrorNotification(text.passChange403Error[idioma])\r\n                    }else{\r\n                        openErrorNotification(text.passChangeError[idioma])\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return <ChangepassView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        oldPassState={oldPassState}\r\n        passState={passState}\r\n        pass2State={pass2State}\r\n\r\n        onOldPassChange={onOldPassChange}\r\n        onPassChange={onPassChange}\r\n        onPass2Change={onPass2Change}\r\n        submitPass={submitPass}\r\n    />;\r\n\r\n}\r\n\r\nexport default ChangepassController;","import React from 'react';\r\nimport ChangepassController from './changepass.controller';\r\nconst ChangePass = props => { \r\n    \r\n    return <ChangepassController {...props}/>;\r\n\r\n}\r\nexport default ChangePass;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Avatar, Button} from '@material-ui/core';\r\nimport { pink } from '@material-ui/core/colors';\r\nimport AvatarEdit from 'react-avatar-edit';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    avatarEdit: {\r\n        margin: theme.spacing(2),\r\n        marginLeft: theme.spacing(3),\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: ''\r\n    },\r\n    avatar: {\r\n        marginLeft: theme.spacing(7),\r\n        width: theme.spacing(10),\r\n        height: theme.spacing(10),\r\n    },\r\n    button: {\r\n        width: '100%', \r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\n\r\nconst ChangeAvatarView = ({text, idioma, preview, setPreview, avatarRef, onAvatarChange}) => {\r\n\r\n    const classes = useStyles(); \r\n\r\n    return <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.avatarEdit}>\r\n                <AvatarEdit\r\n                        width={120}\r\n                        height={100}\r\n                        onCrop={prev => {                                    \r\n                            setPreview(prev)}\r\n                        }\r\n                        onClose={() => {setPreview(null)}}\r\n                        closeIconColor={pink[500]}\r\n                        label={text.choosefile[idioma]}        \r\n                        ref={avatarRef}                    \r\n                    />\r\n                    <Avatar                           \r\n                        src={preview}\r\n                        variant=\"circle\"\r\n                        className={classes.avatar}\r\n                    />\r\n            </div>\r\n            <Button \r\n                variant=\"contained\" \r\n                color=\"primary\"  \r\n                disabled={preview === null} \r\n                className={classes.button}\r\n                onClick={onAvatarChange}\r\n            >\r\n                {text.btnCambiar[idioma]}\r\n            </Button>\r\n        </Container>\r\n}\r\nexport default ChangeAvatarView;","import React, {useState, useRef} from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, userAvatarState} from '../../../../components/recoil/atoms';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport {DEFAULT_CONFIG} from '../../../../conf/configuration'\r\nimport ChangeavatarView from './changeavatar.view';\r\nimport text from './idioma.json';\r\n\r\nconst ChangeavatarController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {postRequest} = useAxiosHook();\r\n    const setAvatar = useSetRecoilState(userAvatarState);\r\n    const [previewAvatar, setPreviewAvatar] = useState(null);\r\n    const avatarRef = useRef(null);\r\n\r\n    const onAvatarChange = () => {\r\n        postRequest({\r\n            url: '/users/changeAvatar',\r\n            bodyParams: {\r\n                avatar: previewAvatar\r\n            },\r\n            messageOnError: text.onError[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                if(resp.status === 200){\r\n                    close();\r\n                    setAvatar(`${DEFAULT_CONFIG.server}${resp.data.avatarUrl}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return <ChangeavatarView \r\n        text={text}\r\n        idioma={idioma}\r\n        preview={previewAvatar}\r\n        setPreview={setPreviewAvatar}\r\n        avatarRef={avatarRef}\r\n        \r\n        onAvatarChange={onAvatarChange}\r\n    />;\r\n\r\n}\r\nexport default ChangeavatarController;","import React from 'react';\r\nimport ChangeAvatarController from './changeavatar.controller';\r\n\r\nconst ChangeAvatar = props => {\r\n    \r\n    return <ChangeAvatarController {...props} />;\r\n}\r\n\r\nexport default ChangeAvatar;","import React from 'react';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport {Container, TextField, Grid, Button, Avatar, CssBaseline, Typography, Switch} from '@material-ui/core';\r\nimport PermIdentityOutlinedIcon from '@material-ui/icons/PermIdentityOutlined';\r\nimport {pink, blue} from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    link: {\r\n        cursor: 'pointer',\r\n        textDecoration: 'none',\r\n        color: theme.palette.text.secondary,\r\n        '&:hover':{\r\n            textDecoration: 'underline',\r\n        }\r\n    },\r\n    customSwitch: {\r\n        alignSelf: 'center'\r\n    }\r\n}));\r\n\r\nconst CustomSwitch = withStyles((theme) => ({\r\n    switchBase: {\r\n        color: blue[800],  \r\n        '&$checked': {\r\n            color: pink[500],\r\n            '& + $track': {\r\n                opacity: 1,\r\n                backgroundColor: theme.palette.common.white,\r\n                borderColor: theme.palette.common.white,\r\n            },\r\n        }\r\n    },\r\n    track: {\r\n        opacity: 1,\r\n        backgroundColor: theme.palette.common.white,\r\n    },\r\n    checked: {},\r\n  }))(Switch);\r\n\r\nconst EditProfileView = ({text, idioma, isOpen, setClose, userData, \r\n    lastName, nameState, nicknameState, emailState, gender,\r\n    onNameChange, onEmailChange, onNickNameChange, onLastNameChange, onSwitchGender,\r\n    onSave, avatarSrc\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return <Container component=\"main\" maxWidth=\"xs\">    \r\n            <CssBaseline /> \r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}> \r\n                    <PermIdentityOutlinedIcon fontSize=\"large\"/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    {text.title[idioma]}\r\n                </Typography>       \r\n            \r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                autoComplete=\"fname\"\r\n                                name=\"firstName\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"firstName\"\r\n                                label={text.firstName[idioma]}\r\n                                autoFocus\r\n                                value={nameState.value}\r\n                                helperText={!nameState.valid ? text[nameState.msg][idioma] : ''}\r\n                                error={!nameState.valid}\r\n                                onChange={onNameChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"lastName\"\r\n                                label={text.lastName[idioma]}\r\n                                name=\"lastName\"\r\n                                autoComplete=\"lname\"\r\n                                value={lastName.value}\r\n                                onChange={onLastNameChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label={text.email[idioma]}\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                value={emailState.value}\r\n                                helperText={!emailState.valid ? text.invalidEmail[idioma] : ''}\r\n                                error={!emailState.valid}\r\n                                onChange={onEmailChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"nickname\"\r\n                                label={text.nickname[idioma]}\r\n                                \r\n                                id=\"nickname\"\r\n                                \r\n                                value={nicknameState.value}\r\n                                helperText={!nicknameState.valid ? text[nicknameState.msg][idioma] : ''}\r\n                                error={!nicknameState.valid}\r\n                                onChange={onNickNameChange}\r\n                            />\r\n                        </Grid>\r\n                        \r\n                            <Typography component=\"div\" style={{width: '100%'}}>\r\n                                <Grid component=\"label\" container alignItems=\"center\" spacing={1} style={{width: '100%', margin: 0, justifyContent: 'center'}}>\r\n                                    <Grid item>{text.male[idioma]}</Grid>\r\n                                        <Grid item>\r\n                                            <CustomSwitch checked={gender} onChange={onSwitchGender} name=\"checkedC\" className={classes.customSwitch}/>\r\n                                        </Grid>\r\n                                    <Grid item>{text.female[idioma]}</Grid>\r\n                                </Grid>\r\n                            </Typography>\r\n                                 \r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={onSave}\r\n                    >\r\n                        {text.save[idioma]}\r\n                    </Button>\r\n                </form>\r\n\r\n                \r\n        \r\n            </div>\r\n        </Container>;\r\n\r\n}\r\nexport default EditProfileView;","import React, {useState, useRef, useEffect, useCallback} from 'react';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport {loginData, idiomaState, userAvatarState} from '../../../../components/recoil/atoms';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport useNotification from '../../../../components/uiComponents/notification/notification.hook';\r\nimport EditProfileView from './editprofile.view';\r\nimport text from './idioma.json'; \r\n\r\nconst EditProfileController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const avatarSrc = useRecoilValue(userAvatarState);\r\n    const [userData, setUserData] = useRecoilState(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    const {openErrorNotification} = useNotification();\r\n\r\n    const [emailState, setEmailState] = useState({value: userData.email, valid: true});\r\n    const [nicknameState, setNickNameState] = useState({value: userData.nickname, valid: true});    \r\n    const [nameState, setNameState] = useState({value: userData.firstName, valid: true});  \r\n    const [lastName, setLastName] = useState({value: userData.lastName, valid: true});\r\n    const [gender, setGender] = useState(userData.gender === \"F\" ? true : false);  \r\n    \r\n    \r\n    const onNameChange = ({target: {value}}) => {\r\n        setNameState(oldState => ({...oldState, value: value, valid: true}));\r\n    };\r\n    const onLastNameChange = ({target: {value}}) => {\r\n        setLastName(oldState => ({...oldState, value: value, valid: true}));\r\n    };\r\n    const onEmailChange = ({target:{value}}) => {\r\n        setEmailState(oldState => ({...oldState, value: value, valid: true}));\r\n    }\r\n    const onNickNameChange = ({target: {value}}) => {\r\n        setNickNameState(oldState => ({...oldState, value: value, valid: true}));\r\n    }\r\n    const onSwitchGender = ({target: {checked}}) => {\r\n        setGender(oldState => !oldState);\r\n    }\r\n\r\n    const onSave =(event) => {\r\n        event.preventDefault();\r\n        if(!/^[a-zA-Z\\']+$/.test(nameState.value)){\r\n            setNameState({...nameState, valid: false, msg: 'nameInvalid'});\r\n        }else\r\n        if(nameState.value.length < 2){\r\n            setNameState({...nameState, valid: false, msg: 'nameShort'});\r\n        }else\r\n        if(nameState.value.length >= 20){\r\n            setNameState({...nameState, valid: false, msg: 'nameLong'});\r\n        }else\r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(emailState.value)){\r\n            setEmailState({...emailState, valid: false});\r\n        }else\r\n        if(nicknameState.value.length === 0){\r\n            setNickNameState({...nicknameState, valid: false, msg: 'nicknameNull'});\r\n        }else\r\n        {\r\n            const newUserData = {\r\n                firstName: nameState.value,\r\n                lastName: lastName.value,\r\n                nickname: nicknameState.value,\r\n                email: emailState.value,\r\n                gender: gender ? 'F' : 'M'\r\n            }; \r\n\r\n            postRequest({\r\n                url: '/users/editprofile',\r\n                bodyParams: newUserData,\r\n                messageOnSuccess: text.onSaveSuccess[idioma],\r\n                doFnAfterError: err => {\r\n                    if(err.response.status === 409){\r\n                        openErrorNotification(text.duplicated[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.error[idioma]);\r\n                    }\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    setUserData({...userData, ...newUserData});\r\n                    close();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return <EditProfileView \r\n        userData={userData}\r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        lastName={lastName}\r\n        nameState={nameState}\r\n        nicknameState={nicknameState}\r\n        emailState={emailState}\r\n        gender={gender}\r\n        \r\n        onNameChange={onNameChange}\r\n        onEmailChange={onEmailChange}\r\n        onNickNameChange={onNickNameChange}\r\n        onLastNameChange={onLastNameChange}\r\n        onSwitchGender={onSwitchGender}\r\n\r\n        avatarSrc={avatarSrc}\r\n\r\n        onSave={onSave}\r\n\r\n    />;\r\n}\r\nexport default EditProfileController;","import React from 'react';\r\nimport EditProfileController from './editprofile.controller';\r\n\r\nconst EditProfile = props => {\r\n    \r\n    return <EditProfileController {...props} />;\r\n\r\n}\r\nexport default EditProfile;","import React from 'react';\r\n\r\nimport {Container, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Grid} from '@material-ui/core';\r\n\r\n\r\nconst ShareAppView = ({idioma, text, nameState, onNameChange, emailState, onEmailChange, onSend}) => {\r\n\r\n    \r\n\r\n    return <Container maxWidth=\"sm\"> \r\n            <DialogTitle id=\"form-dialog-title\">{text.winTitle[idioma]}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {text.text[idioma]}\r\n                </DialogContentText>\r\n                \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            autoComplete=\"fname\"\r\n                            name=\"firstName\"\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"firstName\"\r\n                            label={text.name[idioma]}\r\n                            autoFocus\r\n                            value={nameState.value}\r\n                            helperText={!nameState.valid ? text[nameState.msg][idioma] : ''}\r\n                            error={!nameState.valid}\r\n                            onChange={onNameChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label={text.email[idioma]}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            autoComplete=\"email\"\r\n                            value={emailState.value}\r\n                            helperText={!emailState.valid ? text.invalidEmail[idioma] : ''}\r\n                            error={!emailState.valid}\r\n                            onChange={onEmailChange}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onSend}>\r\n                        {text.send[idioma]}\r\n                    </Button>\r\n            </DialogActions>\r\n        </Container>;\r\n\r\n}\r\nexport default ShareAppView;","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useNotification from '../../components/uiComponents/notification/notification.hook';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\nimport ShareAppView from './shareapp.view';\r\nimport text from './idioma.json';\r\n\r\nconst ShareAppController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    const {postRequest} = useAxiosHook();\r\n    const {openErrorNotification} = useNotification();\r\n\r\n    const [emailState, setEmailState] = useState({value: '', valid: true});\r\n    const [nameState, setNameState] = useState({value: '', valid: true});  \r\n\r\n\r\n    const onNameChange = ({target: {value}}) => {\r\n        setNameState(oldState => ({...oldState, value: value, valid: true}));\r\n    };\r\n    const onEmailChange = ({target:{value}}) => {\r\n        setEmailState(oldState => ({...oldState, value: value, valid: true}));\r\n    }\r\n\r\n    const onSend =(event) => {\r\n        event.preventDefault();\r\n        if(!/^[a-zA-Z\\']+$/.test(nameState.value)){\r\n            setNameState({...nameState, valid: false, msg: 'nameInvalid'});\r\n        }else\r\n        if(nameState.value.length < 2){\r\n            setNameState({...nameState, valid: false, msg: 'nameShort'});\r\n        }else\r\n        if(nameState.value.length >= 20){\r\n            setNameState({...nameState, valid: false, msg: 'nameLong'});\r\n        }else\r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(emailState.value)){\r\n            setEmailState({...emailState, valid: false});\r\n        }else\r\n        {\r\n            postRequest({\r\n                url: '/users/shareapp',\r\n                bodyParams: {\r\n                    firstName: nameState.value,\r\n                    email: emailState.value,\r\n                    language: idioma,\r\n                    hostname: window.location.host\r\n                },\r\n                messageOnSuccess: text.sendSuccess[idioma],\r\n                doFnAfterError: err => {\r\n                    if(err.response.status === 409){\r\n                        openErrorNotification(text.emailExist[idioma]);\r\n                    }\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    close();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return <ShareAppView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        nameState={nameState}\r\n        onNameChange={onNameChange}\r\n        emailState={emailState}\r\n        onEmailChange={onEmailChange}\r\n\r\n        onSend={onSend}\r\n    />;\r\n\r\n}\r\nexport default ShareAppController;","import React from 'react';\r\n\r\nimport ShareAppController from './shareapp.controller';\r\n\r\nconst ShareApp = props => {\r\n    \r\n    return <ShareAppController {...props} />;\r\n\r\n}\r\nexport default ShareApp;","import React from 'react';\r\n\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Container, DialogTitle, DialogContent, DialogContentText, Grid, TextField, DialogActions, Button, Box, Typography} from '@material-ui/core';\r\n\r\n\r\nconst labels = {\r\n    0: 'unrated',\r\n    0.5: 'useless',\r\n    1: 'useless+',\r\n    1.5: 'poor',\r\n    2: 'poor+',\r\n    2.5: 'ok',\r\n    3: 'ok+',\r\n    3.5: 'good',\r\n    4: 'good+',\r\n    4.5: 'excellent',\r\n    5: 'excellent+',\r\n};\r\n  \r\n  const useStyles = makeStyles(theme => ({\r\n    ratingRow: {\r\n      width: '250px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      marginBottom: theme.spacing(1)\r\n    }\r\n  }));\r\n\r\nconst FeedbackView = React.memo(({text, idioma,\r\n    globalState, onChange,\r\n    comentState, onCommentChange, onSave\r\n}) => {\r\n\r\n    \r\n    const classes = useStyles();\r\n\r\n    return <Container maxWidth=\"sm\"> \r\n                <DialogTitle id=\"form-dialog-title\">{text.title[idioma]}</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                            <RatingRowStars text={text} idioma={idioma} classes={classes} globalState={globalState} onChange={onChange} type=\"design\"/>\r\n                            <RatingRowStars text={text} idioma={idioma} classes={classes} globalState={globalState} onChange={onChange} type=\"performance\"/>\r\n                            <RatingRowStars text={text} idioma={idioma} classes={classes} globalState={globalState} onChange={onChange} type=\"usability\"/>\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{display:\"flex\"}}>\r\n                            \r\n                                <div style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                }}>\r\n                                    <div>\r\n                                        <Typography className={classes.ratingType}>{text.lbAverage[idioma]}</Typography>\r\n                                        <div className={classes.ratingRow}>\r\n                                            <Rating\r\n                                                readOnly\r\n                                                name=\"hover-feedback\"\r\n                                                size=\"large\"\r\n                                                value={globalState.overall}\r\n                                                precision={0.5}\r\n                                            />\r\n                                            {\r\n                                                globalState.overall !== null && <Box ml={2}>{\r\n                                                text[labels[globalState.overall]][idioma]\r\n                                            }</Box>}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            \r\n                        </Grid>\r\n                        <Grid item xs={12} >\r\n                            <TextField\r\n                                id=\"outlined-textarea\"\r\n                                label={text.comment[idioma]}\r\n                                multiline\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                value={comentState}\r\n                                onChange={onCommentChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={onSave}>\r\n                            {text.save[idioma]}\r\n                        </Button>\r\n                </DialogActions>\r\n            </Container>;\r\n\r\n})\r\n\r\nconst RatingRowStars = React.memo(({text, idioma, classes, globalState, onChange, type }) => {\r\n    \r\n    const [state, setstate] = React.useState(-1);\r\n\r\n    return <Grid item xs={12} >\r\n            <Typography className={classes.ratingType}>{text[type][idioma]}</Typography>\r\n            <div className={classes.ratingRow}>\r\n                <Rating\r\n                    value={globalState[type]}\r\n                    precision={0.5}\r\n                    onChange={(event, newValue) => onChange(newValue, type)}\r\n                    onChangeActive={(event, newValue) => setstate(newValue)}\r\n                />\r\n                {globalState[type] !== null && <Box ml={2}>{\r\n                    text[labels[state !== -1 ? state : globalState[type]]][idioma]\r\n                }</Box>}\r\n            </div>\r\n        </Grid>\r\n})\r\n\r\nexport default FeedbackView;","import React, {useState, useEffect, useCallback} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useNotification from '../../components/uiComponents/notification/notification.hook';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\n\r\nimport FeedbackView from './feedback.view';\r\nimport text from './idioma.json';\r\n\r\n\r\nconst FeedbackController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const  {postRequest}  = useAxiosHook();\r\n\r\n    const [comentState, setComntState] = useState('');\r\n    const [globalState, setGlobalState] = useState({\r\n        design: 0,\r\n        performance: 0,\r\n        usability: 0,\r\n        overall: 0\r\n    });\r\n    \r\n\r\n    const onCommentChange = ({target: {value}}) => {\r\n        setComntState(value);\r\n    }\r\n\r\n    const calcProm = (desing, performance, usability, newValue = 0) => {\r\n        let cant = newValue > 0 ? 1 : 0;\r\n        let promedio = newValue;\r\n        if(desing > 0) {\r\n            promedio += desing;\r\n            cant++; \r\n        }\r\n        if(performance > 0){\r\n            promedio += performance;\r\n            cant++;\r\n        }\r\n        if(usability > 0){\r\n            promedio += usability;\r\n            cant++;\r\n        }\r\n        if(cant > 0){\r\n            promedio = promedio / cant;\r\n            const restoProm = promedio % 0.5;\r\n            promedio = promedio - restoProm;\r\n        }\r\n        \r\n        return promedio;\r\n    }\r\n    const onChange = useCallback((newValue, type) => {\r\n\r\n        setGlobalState(oldState => {\r\n            let desing = 0;\r\n            let performance = 0;\r\n            let usability = 0;\r\n            if(type !== 'design' && oldState.design > 0){\r\n                desing = oldState.design;\r\n            }\r\n            if(type !== 'performance' && oldState.performance > 0){\r\n                performance = oldState.performance;\r\n            }\r\n            if(type !== 'usability' && oldState.usability > 0){\r\n                usability = oldState.usability;\r\n            }\r\n            \r\n\r\n            let promedio = calcProm(desing, performance, usability, newValue);\r\n            \r\n            const newGlobalState = {...oldState, [type]: newValue, overall: promedio};\r\n            return newGlobalState;\r\n\r\n        });\r\n    }, []);\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n\r\n        postRequest({\r\n            url: '/users/getUserFeedback',\r\n            messageOnError: text.lbOnLoadError[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                if(resp.status === 200){\r\n                    const rating = resp.data.rating;\r\n                    const stateObj = {\r\n                        design: rating.design,\r\n                        performance: rating.performance,\r\n                        usability: rating.usability,\r\n                        overall: calcProm(rating.design, rating.performance, rating.usability)\r\n                    }\r\n                    \r\n                    setGlobalState(stateObj);\r\n                    setComntState(rating.comment);\r\n                }\r\n            }\r\n        })\r\n    }, []);\r\n\r\n    const onSave = () => {\r\n        postRequest({\r\n            url: \"/users/saveFeedback\",\r\n            bodyParams: {\r\n                designRating: globalState.design, \r\n                performaceRating: globalState.performance, \r\n                usabilityRating: globalState.usability, \r\n                comment: comentState\r\n            },\r\n            messageOnError: text.lbOnSaveError[idioma],\r\n            messageOnSuccess: text.lbOnsaveOk[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                close();\r\n            }\r\n        });\r\n    }\r\n\r\n    return <FeedbackView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        globalState={globalState}\r\n        onChange={onChange}\r\n        \r\n        comentState={comentState}\r\n        onCommentChange={onCommentChange}\r\n\r\n        onSave={onSave}\r\n    />;\r\n\r\n}\r\nexport default FeedbackController;","import React from 'react';\r\n\r\nimport FeedbackController from './feeedback.controller';\r\n\r\nconst Feedback = React.memo(props => {\r\n    \r\n    return <FeedbackController {...props} />;\r\n\r\n});\r\nexport default Feedback;","import React from 'react';\r\n\r\nimport {Container, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Grid} from '@material-ui/core';\r\n\r\n\r\nconst BugReportView = ({idioma, text, comentState, onCommentChange, onSend}) => {\r\n\r\n    return <Container maxWidth=\"sm\"> \r\n            <DialogTitle id=\"form-dialog-title\">{text.winTitle[idioma]}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {text.text[idioma]}\r\n                </DialogContentText>\r\n                \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} >\r\n                    <TextField\r\n                                id=\"outlined-textarea\"\r\n                                label={text.report[idioma]}\r\n                                multiline\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                rows={4}\r\n                                value={comentState}\r\n                                onChange={onCommentChange}\r\n                            />\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onSend}>\r\n                        {text.send[idioma]}\r\n                    </Button>\r\n            </DialogActions>\r\n        </Container>;\r\n\r\n}\r\nexport default BugReportView;","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\nimport BugReportView from './bugreport.view';\r\nimport text from './idioma.json';\r\n\r\nconst BugReportController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    const {postRequest} = useAxiosHook();\r\n\r\n    const [comentState, setComntState] = useState('');\r\n\r\n    const onCommentChange = ({target: {value}}) => {\r\n        setComntState(value);\r\n    }\r\n\r\n    const onSend = () => {\r\n        postRequest({\r\n            url: \"/bugs/saveBugReport\",\r\n            bodyParams: {\r\n                description: comentState\r\n            },\r\n            messageOnError: text.sendError[idioma],\r\n            messageOnSuccess: text.sendOk[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                close();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    return <BugReportView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        comentState={comentState}\r\n        onCommentChange={onCommentChange}\r\n\r\n        onSend={onSend}\r\n    />;\r\n\r\n}\r\nexport default BugReportController;","import React from 'react';\r\n\r\nimport BugReportController from './bugreport.controller';\r\n\r\nconst BugReport = props => {\r\n    \r\n    return <BugReportController {...props} />;\r\n\r\n}\r\nexport default BugReport;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardHeader, Avatar, Badge, IconButton, Divider, List, ListItem, ListItemIcon , FormControl, ListItemText, Select, MenuItem, FormControlLabel, Switch, Dialog, Tooltip } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PhotoCameraOutlinedIcon from '@material-ui/icons/PhotoCameraOutlined';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport BugReportIcon from '@material-ui/icons/BugReport';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {blue, pink} from '@material-ui/core/colors'\r\n\r\nimport ChangePass from './changepass';\r\nimport ChangeAvatar from './changeavatar';\r\nimport EditProfile from './editprofile';\r\nimport ShareApp from '../../shareapp';\r\nimport Feedback from '../../feedback';\r\nimport BugReport from '../../bugreport';\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    avatar: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7)\r\n    },\r\n    cardHeaderAction: {\r\n        alignSelf: 'flex-end',\r\n    },\r\n    cardHeaderContent:{\r\n        overflowX: \"hidden\",\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    langSelect: {\r\n        fontSize: '0.9em', \r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        fontWeight: 400,\r\n        lineHeight: 1.5,\r\n        letterSpacing:'0.00938em'\r\n    },\r\n    avatarMan: {\r\n        color: theme.palette.getContrastText(blue[400]),\r\n        backgroundColor: blue[400],\r\n    },\r\n    avatarWoman: {\r\n        color: theme.palette.getContrastText(pink[300]),\r\n        backgroundColor: pink[300],\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst ProfileView = ({text, idioma, avatarUrl, userData, logout, changeIdioma, darkMode, changeTheme, \r\n    changePass, setChangePass, changeAvatar, setChangeAvatar, editProfile, setChangeProfile, shareApp, setShareApp, feedback, setFeedback,\r\n    bugreport, setBugreport\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n\r\n    return (<>\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                classes={{\r\n                    action: classes.cardHeaderAction,\r\n                    content: classes.cardHeaderContent,\r\n                }}\r\n                avatar={\r\n                    <Badge\r\n                        overlap=\"circle\"\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right'\r\n                        }}\r\n                        badgeContent={<SmallPhotoCameraButton onClick={setChangeAvatar}/>}\r\n                    >   \r\n                            <Avatar \r\n                                aria-label=\"recipe\" \r\n                                className={`${classes.avatar} ${userData.gender === \"M\" ? classes.avatarMan : classes.avatarWoman}`} \r\n                                src={avatarUrl}                            \r\n                            />                        \r\n                    </Badge>\r\n                }\r\n                action={\r\n                    <Tooltip title={text.logout[idioma]}>\r\n                        <IconButton onClick={logout}>\r\n                            <ExitToAppIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                title={userData.nickname}\r\n                subheader={userData.email}\r\n            />\r\n            \r\n            <Divider />\r\n            \r\n                <List>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setChangeProfile}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <EditIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.edit[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setChangePass}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <VpnKeyIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.editpass[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <LanguageIcon />\r\n                        </ListItemIcon>\r\n                            <FormControl >\r\n                                <Select\r\n                                    value={idioma}\r\n                                    onChange={changeIdioma}\r\n                                    displayEmpty\r\n                                    className={classes.langSelect}\r\n                                    inputProps={{ 'aria-label': 'Without label' }}\r\n                                >\r\n                                    <MenuItem value={'en'}>English</MenuItem>\r\n                                    <MenuItem value={'es'}>Español</MenuItem>\r\n                                </Select>\r\n                                \r\n                            </FormControl>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <ColorLensIcon />\r\n                        </ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={darkMode}\r\n                                    onChange={changeTheme}\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label={text.darkMode[idioma]}\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                    <ListItem \r\n                        button\r\n                        onClick={setShareApp}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <ShareIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.share[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                            secondary={text.shareDesc[idioma]}\r\n                            secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setFeedback}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <StarIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.feedback[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                            secondary={text.feedbackDesc[idioma]}\r\n                            secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setBugreport}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <BugReportIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.report[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                            secondary={text.reportDesc[idioma]}\r\n                            secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                        />\r\n                    </ListItem>\r\n                </List>\r\n        </Card>\r\n        \r\n        <Dialog open={changePass} onClose={setChangePass}>\r\n            <ChangePass />\r\n        </Dialog>\r\n\r\n        <Dialog open={changeAvatar} onClose={setChangeAvatar}>\r\n            <ChangeAvatar close={setChangeAvatar}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={editProfile} onClose={setChangeProfile}>\r\n            <EditProfile close={setChangeProfile}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={shareApp} onClose={setShareApp}>\r\n            <ShareApp close={setShareApp}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={feedback} onClose={setFeedback}>\r\n            <Feedback close={setFeedback}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={bugreport} onClose={setBugreport}>\r\n            <BugReport close={setBugreport}/>\r\n        </Dialog>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nconst useSmallPhotoCameraButtonStyle = makeStyles(theme => {\r\n        \r\n        return {\r\n            iconButton: {\r\n                backgroundColor: theme.palette.background.default,\r\n                boxShadow: `0 0 5px ${theme.palette.action.disabled}`,\r\n                '&:hover': {\r\n                    backgroundColor: theme.palette.background.default\r\n                }\r\n            }\r\n        }\r\n    }\r\n);\r\n\r\nconst SmallPhotoCameraButton = ({onClick}) => {\r\n    const classes = useSmallPhotoCameraButtonStyle();\r\n    return (\r\n        <IconButton size=\"small\" \r\n            className={classes.iconButton}\r\n            onClick={onClick}\r\n        >\r\n            <PhotoCameraOutlinedIcon fontSize=\"small\"/>\r\n        </IconButton>\r\n        \r\n    );\r\n}\r\n\r\nexport default ProfileView;","import React, {useState} from 'react';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport {loginData, userAvatarState, idiomaState, darkModeAtom} from '../../../components/recoil/atoms';\r\nimport ProfileOptView from './profileOpt.view';\r\nimport useLogout from '../../../utils/useLogout';\r\nimport text from './idioma.json';\r\nimport useAxiosHook from '../../../utils/axiosHook';\r\n\r\nconst ProfileOptController = props => {\r\n\r\n    const [changePass, setChangePassword] = useState(false);\r\n    const setChangePass  = () => {\r\n        setChangePassword(oldState => !oldState);\r\n    }\r\n    const [changeAvatar, setChangeAvat] = useState(false);\r\n    const setChangeAvatar  = () => {\r\n        setChangeAvat(oldState => !oldState);\r\n    }\r\n    const [editProfile, setEditProfileState] = useState(false);\r\n    const setChangeProfile  = () => {\r\n        setEditProfileState(oldState => !oldState);\r\n    }\r\n    const [shareApp, setShareAppState] = useState(false);\r\n    const setShareApp  = () => {\r\n        setShareAppState(oldState => !oldState);\r\n    }\r\n    const [feedback, setFeedbackState] = useState(false);\r\n    const setFeedback  = () => {\r\n        setFeedbackState(oldState => !oldState);\r\n    }\r\n    const [bugreport, setBugreportState] = useState(false);\r\n    const setBugreport  = () => {\r\n        setBugreportState(oldState => !oldState);\r\n    }\r\n    \r\n    const [idioma, setIdioma] = useRecoilState(idiomaState);\r\n    const [darkMode, setDarkMode] = useRecoilState(darkModeAtom);\r\n    const userData = useRecoilValue(loginData);\r\n    const avatarUrl = useRecoilValue(userAvatarState);\r\n    const logout = useLogout();\r\n    const {postRequest} = useAxiosHook();\r\n    \r\n    const changeTheme = () => {\r\n        localStorage.setItem('darkMode', !darkMode);\r\n        setDarkMode(oldMode => !oldMode);\r\n    }\r\n\r\n\r\n\r\n    const changeIdioma = ({target:{value}}) => {\r\n        setIdioma(value);\r\n        postRequest({\r\n            url: '/users/changeUserLanguage',\r\n            bodyParams: {\r\n                lang: value\r\n            }\r\n        });\r\n    }\r\n\r\n    return <> \r\n            <ProfileOptView  \r\n                text={text}\r\n                idioma={idioma}\r\n                avatarUrl={avatarUrl}\r\n                userData={userData}\r\n                logout={logout}\r\n                changeIdioma={changeIdioma}\r\n                darkMode={darkMode}\r\n                changeTheme={changeTheme}\r\n                \r\n                changePass={changePass}\r\n                setChangePass={setChangePass}\r\n\r\n                changeAvatar={changeAvatar}\r\n                setChangeAvatar={setChangeAvatar}\r\n\r\n                editProfile={editProfile}\r\n                setChangeProfile={setChangeProfile}\r\n\r\n                shareApp={shareApp}\r\n                setShareApp={setShareApp}\r\n\r\n                feedback={feedback}\r\n                setFeedback={setFeedback}\r\n\r\n                bugreport={bugreport}\r\n                setBugreport={setBugreport}\r\n            />\r\n        </>\r\n        ;\r\n\r\n}\r\nexport default ProfileOptController;","import React from 'react';\r\nimport ProfileOptController from './profileOpt.controller';\r\n\r\nconst ProfileOptions = props => {\r\n\r\n    return <ProfileOptController />;\r\n\r\n}\r\nexport default ProfileOptions;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ProfileOpt from './profileOptions';\r\nimport {blue, pink} from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  avatarMan: {\r\n    color: theme.palette.getContrastText(blue[400]),\r\n    backgroundColor: blue[400],\r\n  },\r\n  avatarWoman: {\r\n    color: theme.palette.getContrastText(pink[300]),\r\n    backgroundColor: pink[300],\r\n  },\r\n}));\r\n\r\nconst ToolbarView = ({avatarSrc, userData}) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        \r\n        <Toolbar>\r\n          \r\n            {/*<IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                <MenuIcon />\r\n            </IconButton>*/}\r\n          \r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Shutapp\r\n            </Typography>          \r\n            <div>\r\n                <IconButton\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"menu-appbar\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleMenu}\r\n                    color=\"inherit\"\r\n                >\r\n                    <Avatar\r\n                        src={avatarSrc}\r\n                        className={userData.gender === \"M\" ? classes.avatarMan : classes.avatarWoman}\r\n                    />\r\n                    \r\n                </IconButton>\r\n                <Popover \r\n                    open={open}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                >\r\n                    <ProfileOpt />\r\n                </Popover>\r\n\r\n              \r\n            </div>          \r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToolbarView;","import React from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\n\r\nimport ToolbarView from './toolbar.view';\r\n\r\nimport {userAvatarState, loginData} from '../../components/recoil/atoms';\r\n\r\nconst ToolbarController = props => {\r\n\r\n    const avatarSrc = useRecoilValue(userAvatarState);\r\n    const userData = useRecoilValue(loginData);\r\n    \r\n    return <ToolbarView \r\n        avatarSrc={avatarSrc}\r\n        userData={userData}\r\n    />;\r\n\r\n}\r\nexport default ToolbarController;","import React from 'react';\r\nimport ToolbarController from './toolbar.controller';\r\n\r\nconst Toolbar = props => {\r\n\r\n    return <ToolbarController />;\r\n\r\n}\r\nexport default Toolbar;"],"sourceRoot":""}