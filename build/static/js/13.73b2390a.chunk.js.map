{"version":3,"sources":["components/recoil/selectors.js","view/mainButton/mainButton.view.js","view/addContact/addContact.view.js","view/addContact/addContact.controller.js","view/addContact/index.js","view/mainButton/mainButton.controller.js","view/mainButton/index.js"],"names":["friendSelector","selector","key","get","friendsAtom","length","sort","f1","f2","friendShipStatus","socketId","email","set","a","action","payload","oldFriends","friends","push","friend","fIndex","findIndex","f","contactId","slice","concat","index","unread","data","dataObj","map","cantidad","lastMsg","lastMessage","datetime","filter","friendId","Array","isArray","idx","dat","userId","conectedFriendName","nickname","updatedFriend","notification","msg","idiomaState","variant","disconectedFriendName","initConversationSelector","conversation","getMessageState","userOriginId","UserDestinyId","readed","getConversationWithContact","oldConversation","message","_id","content","state","userOrigin","userDestiny","addMsgToConversationSelector","newMessageObj","messageId","editMsgToStateSavedSelector","consecutive","modMessage","editAllMsgToReadedSelector","useStyles","makeStyles","theme","speedDial","position","bottom","spacing","right","icon","color","palette","text","secondary","MainButtonView","idioma","handleOpen","handleClose","open","openAddContactView","classes","SpeedDial","ariaLabel","className","SpeedDialIcon","onClose","onOpen","SpeedDialAction","tooltipTitle","addContact","tooltipOpen","onClick","sendAll","console","log","alert","avatar","backgroundColor","blue","dialogContent","padding","search","borderRadius","shape","fade","common","white","marginLeft","width","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","UserItem","user","sendFriendRequest","ListItem","ListItemAvatar","Avatar","src","DEFAULT_CONFIG","server","avatarUrl","ListItemText","primary","ListItemSecondaryAction","IconButton","blockinguser","grey","disabled","InputSearch","buscarUsuarios","inputSearchRef","React","useState","searchState","setSearchState","InputBase","onKeyPress","event","charCode","placeholder","root","input","inputProps","value","onChange","target","inputRef","endAdornment","InputAdornment","size","aria-label","AddContactView","closeAddContactWin","users","Dialog","maxWidth","onEntering","aria-labelledby","DialogTitle","id","dialogTitle","title","Divider","DialogContent","dividers","List","style","minHeight","DialogActions","Button","autoFocus","close","AddContactController","props","useRecoilValue","useRecoilState","addContactViewOpenState","addContactState","setAddContactState","setUsers","openErrorNotification","useNotificationHook","useRef","userData","loginData","friendDispatcher","useSetRecoilState","authMiddleware","token","axios","post","stringPattern","current","start","limit","headers","then","resp","status","catch","err","lbErrorLoadingUsers","useEffect","socketClient","getSocket","emit","userIdRequester","userIdRequested","lbErrorSendigFriendRequest","AddContact","MainButtonController","setOpen","addContactViewState","setAddContactViewState","MainButton"],"mappings":"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","file":"static/js/13.73b2390a.chunk.js","sourcesContent":["import {selector} from 'recoil';\r\n\r\nimport {friendsAtom, idiomaState, messagesAtom, getConversationWithContact} from './atoms';\r\n\r\nconst friendSelector = selector({\r\n    key: 'friendSelector',\r\n    get: ({get}) => {\r\n        if(get(friendsAtom).length > 0){\r\n            const friends = [...get(friendsAtom)];\r\n\r\n            return friends.sort(\r\n                (f1,f2) => {\r\n                    \r\n                    if(f1.friendShipStatus === 1 && f2.friendShipStatus === 1){\r\n                        if(f1.socketId && !f2.socketId) return -1;\r\n                        if(!f1.socketId && f2.socketId) return 1;    \r\n                    }\r\n                    if(f1.friendShipStatus < f2.friendShipStatus) return -1; \r\n                    if(f1.friendShipStatus > f2.friendShipStatus) return 1;\r\n                    if(f1.email < f2.email) return -1; \r\n                    if(f1.email > f2.email) return 1; \r\n                }\r\n            );\r\n        }else{\r\n            return [];\r\n        }\r\n        \r\n    },\r\n    set: async ({set, get}, {action, payload}) => {\r\n\r\n        switch(action){\r\n            case 'initialize': \r\n                set(friendsAtom, oldFriends => {\r\n                    if(oldFriends.length === 0){\r\n                        return payload.friends;\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                break;\r\n            case 'add':\r\n                set(friendsAtom, oldFriends => {\r\n                    const friends = [...oldFriends];\r\n                    friends.push(payload.friend);\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'update':\r\n                set(friendsAtom, oldFriends => {\r\n                    const fIndex = oldFriends.findIndex(f => f.contactId === payload.friend.contactId);\r\n                    const friends = oldFriends.slice(0, fIndex)\r\n                                            .concat([payload.friend])\r\n                                            .concat(oldFriends.slice(fIndex+1));\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'reset_cant_no_leidos':\r\n                set(friendsAtom, oldFriends => {\r\n                    const index = oldFriends.findIndex(friend => friend.contactId === payload.contactId);\r\n                    return oldFriends.slice(0, index).concat([{...oldFriends[index], unread: 0}]).concat(oldFriends.slice(index+1));\r\n                });\r\n                break;\r\n            case 'set_message_info': // Para poner la cantidad de mensajes sin leer, el ultimo mensaje y la fecha del ultimo mensaje\r\n                set(friendsAtom, oldFriends => {\r\n                    const data = payload.dataObj;\r\n                    const newFriends = oldFriends.map(friend => {\r\n                        if(data[friend.contactId]){\r\n                            let cantidad = 0;\r\n                            if(friend.unread){\r\n                                cantidad = friend.unread;\r\n                            }\r\n                            if(data[friend.contactId].cantidad){\r\n                                cantidad += data[friend.contactId].cantidad; \r\n                            }\r\n                            return {...friend, \r\n                                unread:  cantidad,\r\n                                lastMsg: data[friend.contactId].lastMessage,\r\n                                datetime: data[friend.contactId].datetime\r\n                            }\r\n                        }\r\n                        return friend;\r\n                    });\r\n                    return newFriends;\r\n                });\r\n            break;\r\n            case 'delete':\r\n                set(friendsAtom, oldFriends => {\r\n                    return oldFriends.filter(f => f.contactId !== payload.friendId);\r\n                });\r\n                break;\r\n            case 'connect':                \r\n                if(Array.isArray(payload.data)){\r\n                    set(friendsAtom, oldFriends => {\r\n                        return oldFriends.map(friend => {\r\n                            const idx = payload.data.findIndex(dat => dat.userId === friend.contactId);\r\n                            if(idx >= 0){\r\n                                return {...friend, socketId: payload.data[idx].socketId};     \r\n                            }\r\n                            return {...friend};\r\n                        });\r\n                    }); \r\n                }else{\r\n\r\n                    const {userId, socketId} = payload.data;\r\n                    let conectedFriendName = null;\r\n                    let friendShipStatus = 0;\r\n                    \r\n                    set(friendsAtom, oldFriends => {\r\n                        const fIndex = oldFriends.findIndex(f => f.contactId === userId);\r\n                        if(fIndex >= 0){\r\n                            conectedFriendName = oldFriends[fIndex].nickname;\r\n                            friendShipStatus = oldFriends[fIndex].friendShipStatus;\r\n                            const updatedFriend = {...oldFriends[fIndex], socketId: socketId };\r\n                        \r\n                            const friends = oldFriends.slice(0, fIndex)\r\n                                                    .concat([updatedFriend])\r\n                                                    .concat(oldFriends.slice(fIndex+1));\r\n                            return friends;\r\n                        }\r\n                        return oldFriends;\r\n                    });\r\n                    if(conectedFriendName && friendShipStatus === 1)\r\n                        payload.notification(`${conectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'info'});\r\n                }                \r\n                break;\r\n            case 'disconnect':\r\n                let disconectedFriendName = null;\r\n                let friendShipStatus = 0;\r\n                \r\n                set(friendsAtom, oldFriends => {\r\n                    \r\n                    const index = oldFriends.findIndex(friend => friend.socketId === payload.socketId);\r\n                    if(index >= 0){\r\n                        disconectedFriendName = oldFriends[index].nickname;\r\n                        friendShipStatus = oldFriends[index].friendShipStatus;\r\n                        return [...oldFriends].slice(0, index).concat([{...oldFriends[index], socketId: null}]).concat(oldFriends.slice(index+1));\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                if(disconectedFriendName && friendShipStatus === 1)\r\n                    payload.notification(`${disconectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'warning'});\r\n                break;\r\n            \r\n                default: break;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst messageStates = {\r\n    'NINGUNO': 0, // Cuando no es enviado por el propio usuario, sino que se lo enviaron a el, por lo que los estados no tienen sentido para este tipo de mensajes\r\n    'ENVIADO': 1,\r\n    'GUARDADO': 2,\r\n    'LEIDO': 3\r\n};\r\n\r\nconst initConversationSelector = selector({\r\n    key:'conversationSelector',\r\n    set: ({set}, {contactId, conversation}) => {\r\n\r\n        const getMessageState = (userOriginId, UserDestinyId, contactId, readed) => {\r\n\r\n            if(userOriginId === contactId){\r\n                return 0;\r\n            }else if(UserDestinyId === contactId){\r\n                return readed ? 3 : 2;\r\n            }\r\n        }\r\n\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return conversation.map(message => {\r\n                return {\r\n                    _id: message._id,\r\n                    content: message.content,\r\n                    datetime: message.datetime,\r\n                    state: getMessageState(message.userOrigin, message.userDestiny, contactId, message.readed)\r\n                };\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nconst addMsgToConversationSelector = selector({\r\n    key: 'addMessageToConversation',\r\n    set: ({set}, {contactId, messageId, content, datetime, state}) => {\r\n        const newMessageObj = {\r\n            _id: messageId,\r\n            content: content,\r\n            datetime: datetime,\r\n            state: state\r\n        };        \r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation.concat([newMessageObj]);\r\n        });\r\n\r\n    }\r\n});\r\n\r\n\r\nconst editMsgToStateSavedSelector = selector({\r\n    key: 'editMsgToStateSavedSelector',\r\n    set: ({set}, {contactId, messageId, datetime, consecutive}) => {\r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            \r\n            const index = oldConversation.findIndex(message => message._id === consecutive && message.state === 1);\r\n            if(index >= 0){\r\n                const modMessage = {...oldConversation[index], state: 2, _id: messageId, datetime: datetime};\r\n                return oldConversation.slice(0, index).concat([modMessage]).concat(oldConversation.slice(index+1));\r\n            }\r\n            return oldConversation;\r\n        });\r\n    }\r\n});\r\n\r\nconst editAllMsgToReadedSelector = selector({\r\n    key: 'editAllMsgToSavedSelector',\r\n    set: ({set}, {contactId}) => {\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation\r\n                .map(message => {\r\n                    if(message.state !== 0)\r\n                        return {...message, state: 3}\r\n                    else\r\n                        return message;\r\n                });\r\n        });\r\n    }\r\n});\r\n\r\nexport {friendSelector, initConversationSelector, addMsgToConversationSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\r\nimport text from './idioma.json'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    speedDial: {\r\n      position: 'absolute',\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n    icon: {\r\n        color: theme.palette.text.secondary\r\n    }\r\n  }));\r\n\r\nconst MainButtonView = ({idioma, handleOpen, handleClose, open, openAddContactView}) => {\r\n\r\n  const classes = useStyles();\r\n  \r\n\r\n    return (\r\n      <>\r\n        <SpeedDial\r\n            ariaLabel=\"SpeedDial tooltip example\"\r\n            className={classes.speedDial}            \r\n            icon={<SpeedDialIcon />}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            open={open}\r\n        >\r\n          <SpeedDialAction\r\n            key='add'\r\n            icon={<PersonAddIcon className={classes.icon}/>}\r\n            tooltipTitle={text.addContact[idioma]}\r\n            tooltipOpen\r\n            onClick={openAddContactView}\r\n          />\r\n          <SpeedDialAction\r\n            key='addgroup'\r\n            icon={<CallSplitIcon className={classes.icon}/>}\r\n            tooltipTitle={text.sendAll[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje de difusion');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          {/*<SpeedDialAction\r\n            key='addgroup'\r\n            icon={<GroupAddIcon className={classes.icon}/>}\r\n            tooltipTitle={text.addGroup[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Crear un grupo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='send'\r\n            icon={<MessageIcon className={classes.icon}/>}\r\n            tooltipTitle={text.sendMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje a un contacto que no esta en tu lista de contacto');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='share'\r\n            icon={<ShareIcon className={classes.icon}/>}\r\n            tooltipTitle={text.shareMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Compartir la aplicacion por correo electronivo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />*/}\r\n        </SpeedDial>\r\n      </>\r\n    );\r\n\r\n}\r\nexport default MainButtonView;","import React from 'react';\r\n\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport { blue, red, grey } from '@material-ui/core/colors';\r\n\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport text from './idioma.json';\r\nimport { ListItemSecondaryAction } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n      backgroundColor: blue[100],\r\n      color: blue[600],\r\n    },\r\n    dialogContent: {\r\n      padding: 0\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n          backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },*/\r\n      },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      inputRoot: {\r\n        color: 'inherit',\r\n      },\r\n      inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n          width: '12ch',\r\n          '&:focus': {\r\n            width: '20ch',\r\n          },\r\n        },*/\r\n      },\r\n\r\n  }));\r\n\r\nconst AddContactView = ({idioma, closeAddContactWin, open,\r\n    buscarUsuarios, users,\r\n    inputSearchRef,\r\n    sendFriendRequest\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Dialog\r\n            maxWidth=\"xs\"\r\n            onEntering={() => {}}\r\n            aria-labelledby=\"confirmation-dialog-title\"\r\n            open={open}\r\n            onClose={closeAddContactWin}\r\n        >\r\n            <DialogTitle id=\"confirmation-dialog-title\" className={classes.dialogTitle}>{text.title[idioma]} </DialogTitle>\r\n            <Divider />\r\n            <InputSearch idioma={idioma} buscarUsuarios={buscarUsuarios} inputSearchRef={inputSearchRef}/>\r\n            <DialogContent dividers className={classes.dialogContent}>\r\n                <List style={{minHeight:'200px'}}>\r\n                    {\r\n                        users.map(user => {\r\n                            return (\r\n                                <UserItem user={user} sendFriendRequest={sendFriendRequest}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={closeAddContactWin} color=\"primary\">\r\n                    {text.close[idioma]}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n\r\n}\r\n\r\nconst UserItem = ({user, sendFriendRequest}) => {\r\n\r\n    const classes = useStyles();\r\n    //const [iconButtonDisabledState, setIconButtonDisabledState] = React.useState(false)\r\n\r\n    const disableItem = () => {\r\n        //setIconButtonDisabledState(true);\r\n        sendFriendRequest(user.userId);\r\n\r\n    }\r\n\r\n    return (\r\n        <ListItem key={user.email} >\r\n            <ListItemAvatar>\r\n                <Avatar className={classes.avatar} src={DEFAULT_CONFIG.server + user.avatarUrl}></Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={user.nickname}\r\n                secondary={user.email}\r\n            />\r\n            \r\n                <ListItemSecondaryAction>\r\n                    <IconButton color={user.blockinguser ? grey[100] : blue[300]} onClick={disableItem} disabled={user.blockinguser}>\r\n                        <AddIcon color={user.blockinguser ? 'disabled' : \"primary\"}/>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            \r\n        </ListItem>\r\n    )\r\n\r\n}\r\n\r\nconst InputSearch = ({idioma, buscarUsuarios, inputSearchRef}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [searchState, setSearchState] = React.useState('');\r\n\r\n    const onChangeSearch = ({target: {value}}) => {\r\n        setSearchState(value);\r\n    }\r\n    const clearSearch = () => {\r\n        setSearchState('');\r\n    }\r\n    const keyPressHandler = (event) => {\r\n        if(event.charCode === 13){\r\n            buscarUsuarios();\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className={classes.search}>\r\n                <div className={classes.searchIcon}>\r\n                    <SearchIcon />\r\n                </div>\r\n                <InputBase\r\n                    onKeyPress={keyPressHandler}\r\n                    placeholder={text.search[idioma]}\r\n                    classes={{\r\n                        root: classes.inputRoot,\r\n                        input: classes.inputInput,\r\n                    }}\r\n                    inputProps={{ 'aria-label': 'search' }}\r\n                    value={searchState}\r\n                    onChange={onChangeSearch}\r\n                    inputRef={inputSearchRef}\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            {searchState !== '' ?\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={clearSearch}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            : null}\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={buscarUsuarios}\r\n                            >\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                        </InputAdornment> \r\n                        \r\n                    }\r\n                />\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default AddContactView;","import React, {useState, useEffect, useRef} from 'react';\r\nimport {useRecoilValue, useRecoilState, useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport useNotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport AddContactView from './addContact.view';\r\nimport authMiddleware from '../../authMiddleware';\r\nimport text from './idioma.json';\r\nimport {addContactViewOpenState, loginData/*, friendSelector*/} from '../../components/recoil/atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\n\r\nimport {idiomaState} from '../../components/recoil/atoms'\r\nimport socketClient from '../../utils/socket';\r\n\r\nconst AddContactController = props => {\r\n    const idioma = useRecoilValue(idiomaState); \r\n    const [addContactState, setAddContactState] = useRecoilState(addContactViewOpenState);\r\n    const [users, setUsers] = useState([]);\r\n    const {openErrorNotification} = useNotificationHook();\r\n    const inputSearchRef = useRef({value: ''});\r\n    const userData = useRecoilValue(loginData);\r\n\r\n    //const addContact = useSetRecoilState(friendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    \r\n\r\n    const buscarUsuarios = () => {\r\n        \r\n        const optimisticAction = (token) => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/searchContact`, {\r\n                stringPattern: inputSearchRef.current.value,\r\n                start: 0,\r\n                limit: 20\r\n            }, {\r\n                headers: {\r\n                    \"Authorization\": token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    setUsers(resp.data.users);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.lbErrorLoadingUsers[idioma]);\r\n            });\r\n        }\r\n        authMiddleware(optimisticAction);\r\n    }\r\n\r\n    useEffect(() => {\r\n        buscarUsuarios();\r\n    }, [])\r\n\r\n    const sendFriendRequest = (userId) => {\r\n        \r\n        const optimisticAction = (token) => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/sendFriendRequest`, {\r\n                userId: userId\r\n            }, {\r\n                headers: {\r\n                    \"Authorization\": token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    setUsers(users => {\r\n                        return users.filter(user => user.userId !== userId);\r\n                    });\r\n\r\n                    //addContact(resp.data.friend);\r\n                    friendDispatcher({action: 'add', payload: {friend: resp.data.friend}});\r\n                    \r\n                }\r\n            })\r\n            .then(() => {\r\n                const client = socketClient.getSocket();\r\n                client.emit('request friendship', {\r\n                    userIdRequester: userData.userId,\r\n                    userIdRequested: userId,\r\n                    token: token\r\n                });\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.lbErrorSendigFriendRequest[idioma]);\r\n            });\r\n        }\r\n        authMiddleware(optimisticAction);\r\n    }\r\n\r\n    const closeAddContactWin = () => {\r\n        setAddContactState(false);\r\n    }\r\n\r\n    return <AddContactView \r\n        idioma={idioma}\r\n        closeAddContactWin={closeAddContactWin}\r\n        open={addContactState}\r\n\r\n        users={users}\r\n        buscarUsuarios={buscarUsuarios}\r\n\r\n        inputSearchRef={inputSearchRef} \r\n        sendFriendRequest={sendFriendRequest}\r\n    />;\r\n\r\n}\r\nexport default AddContactController;","import React from 'react';\r\nimport AddContactController from './addContact.controller';\r\n\r\nconst AddContact = props => {\r\n\r\n    return <AddContactController />;\r\n\r\n}\r\n\r\nexport default AddContact;","import React, {useState} from 'react';\r\nimport {useRecoilState, useRecoilValue} from 'recoil';\r\nimport MainButtonView from './mainButton.view';\r\nimport AddContact from '../addContact';\r\n\r\n\r\nimport {idiomaState, addContactViewOpenState} from '../../components/recoil/atoms';\r\n\r\nconst MainButtonController = props => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [addContactViewState,setAddContactViewState] = useRecoilState(addContactViewOpenState);\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    \r\n    const openAddContactView = () => {\r\n        setAddContactViewState(true);\r\n    }\r\n\r\n    return <>\r\n        <MainButtonView \r\n            open={open}\r\n            handleOpen={handleOpen}\r\n            handleClose={handleClose}\r\n            idioma={idioma}\r\n            openAddContactView={openAddContactView}\r\n        />\r\n        {addContactViewState ? <AddContact /> : null}\r\n        \r\n    </>;\r\n\r\n}\r\nexport default MainButtonController;","import React from 'react';\r\nimport MainButtonController from './mainButton.controller';\r\nconst MainButton = props => {\r\n\r\n    return <MainButtonController />;\r\n\r\n}\r\nexport default MainButton;"],"sourceRoot":""}