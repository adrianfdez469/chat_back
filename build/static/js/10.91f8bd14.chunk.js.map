{"version":3,"sources":["components/recoil/selectors.js","utils/axiosHook.js","view/toolbar/profileOptions/changepass/changepass.view.js","view/toolbar/profileOptions/changepass/changepass.controller.js","view/toolbar/profileOptions/changepass/index.js","view/toolbar/profileOptions/changeavatar/changeavatar.view.js","view/toolbar/profileOptions/changeavatar/changeavatar.controller.js","view/toolbar/profileOptions/changeavatar/index.js","view/toolbar/profileOptions/editprofile/editprofile.view.js","view/toolbar/profileOptions/editprofile/editprofile.controller.js","view/toolbar/profileOptions/editprofile/index.js","view/shareapp/shareapp.view.js","view/shareapp/shareapp.controller.js","view/shareapp/index.js","view/feedback/feedback.view.js","view/feedback/feeedback.controller.js","view/feedback/index.js","view/bugreport/bugreport.view.js","view/bugreport/bugreport.controller.js","view/bugreport/index.js","view/toolbar/profileOptions/profileOpt.view.js","view/toolbar/profileOptions/profileOpt.controller.js","view/toolbar/profileOptions/index.js"],"names":["friendSelector","selector","key","get","friendsAtom","length","sort","f1","f2","friendShipStatus","socketId","email","set","a","action","payload","oldFriends","friends","push","friend","fIndex","findIndex","f","contactId","slice","concat","index","unread","data","dataObj","map","cantidad","lastMsg","lastMessage","datetime","activeChatWith","friendId","oldActive","filter","Array","isArray","idx","dat","userId","conectedFriendName","nickname","updatedFriend","notification","msg","idiomaState","variant","disconectedFriendName","initConversationSelector","conversation","getMessageState","userOriginId","UserDestinyId","readed","getConversationWithContact","oldConversation","message","_id","content","state","userOrigin","userDestiny","addMsgToConversationSelector","newMessageObj","messageId","editMsgToStateSavedSelector","consecutive","modMessage","editAllMsgToReadedSelector","useAxiosHook","useNotificationHook","openErrorNotification","openSuccessNotification","idioma","useRecoilValue","postRequest","url","bodyParams","doFnAfterSuccess","doFnAfterError","messageOnSuccess","messageOnError","authMidleware","token","axios","post","DEFAULT_CONFIG","server","headers","then","resp","catch","err","response","usePassStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","ChangepassView","text","oldPassState","passState","pass2State","onOldPassChange","onPassChange","onPass2Change","submitPass","classes","Container","component","maxWidth","className","Avatar","fontSize","Typography","title","noValidate","TextField","required","fullWidth","name","label","oldpassword","type","id","autoComplete","value","onChange","helperText","valid","invalidOldPass","error","password","invalidPass","repeatPassword","passNotEqual","Button","color","onClick","changePass","ChangepassController","logout","useLogout","useState","setOldPassState","setPassState","setPass2State","target","event","preventDefault","oldPassword","passChangeOk","status","passChange403Error","passChangeError","connError","ChangePass","props","useStyles","avatarEdit","marginLeft","justifyContent","height","button","marginBottom","ChangeAvatarView","preview","setPreview","avatarRef","onAvatarChange","onCrop","prev","onClose","closeIconColor","pink","choosefile","ref","src","disabled","btnCambiar","ChangeavatarController","close","setAvatar","useSetRecoilState","userAvatarState","previewAvatar","setPreviewAvatar","useRef","onError","avatarUrl","ChangeAvatar","link","cursor","textDecoration","customSwitch","alignSelf","CustomSwitch","withStyles","switchBase","blue","opacity","common","white","borderColor","track","checked","Switch","EditProfileView","lastName","isOpen","setClose","userData","nameState","nicknameState","emailState","gender","onNameChange","onEmailChange","onNickNameChange","onLastNameChange","onSwitchGender","onSave","avatarSrc","CssBaseline","Grid","container","item","xs","sm","firstName","autoFocus","invalidEmail","style","male","female","save","EditProfileController","useRecoilState","loginData","setUserData","useNotification","setEmailState","setNickNameState","setNameState","setLastName","setGender","oldState","test","newUserData","onSaveSuccess","duplicated","EditProfile","ShareAppView","onSend","DialogTitle","winTitle","DialogContent","DialogContentText","DialogActions","send","ShareAppController","friendDispatcher","language","hostname","window","location","host","sendSuccess","emailExist","newFriend","ShareApp","labels","0","0.5","1","1.5","2","2.5","3","3.5","4","4.5","5","ratingRow","FeedbackView","React","memo","globalState","comentState","onCommentChange","RatingRowStars","ratingType","lbAverage","Rating","readOnly","size","overall","precision","Box","ml","comment","multiline","rowsMax","setstate","newValue","onChangeActive","FeedbackController","setComntState","design","performance","usability","setGlobalState","calcProm","desing","cant","promedio","restoProm","useCallback","useEffect","lbOnLoadError","rating","stateObj","designRating","performaceRating","usabilityRating","lbOnSaveError","lbOnsaveOk","Feedback","BugReportView","report","rows","BugReportController","description","sendError","sendOk","BugReport","root","cardHeaderAction","cardHeaderContent","overflowX","marginRight","langSelect","fontFamily","fontWeight","lineHeight","letterSpacing","avatarMan","getContrastText","avatarWoman","useSmallPhotoCameraButtonStyle","iconButton","background","default","boxShadow","SmallPhotoCameraButton","IconButton","ProfileView","changeIdioma","darkMode","changeTheme","setChangePass","changeAvatar","setChangeAvatar","editProfile","setChangeProfile","shareApp","setShareApp","feedback","setFeedback","bugreport","setBugreport","open","anchorEl","handleClose","Popover","anchorOrigin","vertical","horizontal","transformOrigin","Card","CardHeader","Badge","overlap","badgeContent","aria-label","Tooltip","subheader","Divider","List","ListItem","ListItemIcon","ListItemText","primary","edit","primaryTypographyProps","editpass","FormControl","Select","displayEmpty","inputProps","MenuItem","FormControlLabel","control","share","shareDesc","secondaryTypographyProps","feedbackDesc","reportDesc","Dialog","ProfileOptController","setChangePassword","setChangeAvat","setEditProfileState","setShareAppState","setFeedbackState","setBugreportState","setIdioma","darkModeAtom","setDarkMode","lang","localStorage","setItem","oldMode","ProfileOptions"],"mappings":"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","file":"static/js/10.91f8bd14.chunk.js","sourcesContent":["import {selector} from 'recoil';\r\n\r\nimport {friendsAtom, idiomaState, getConversationWithContact, activeChatWith} from './atoms';\r\n\r\nconst friendSelector = selector({\r\n    key: 'friendSelector',\r\n    get: ({get}) => {\r\n        if(get(friendsAtom).length > 0){\r\n            const friends = [...get(friendsAtom)];\r\n\r\n            return friends.sort(\r\n                (f1,f2) => {\r\n                    \r\n                    if(f1.friendShipStatus === 1 && f2.friendShipStatus === 1){\r\n                        if(f1.socketId && !f2.socketId) return -1;\r\n                        if(!f1.socketId && f2.socketId) return 1;    \r\n                    }\r\n                    if(f1.friendShipStatus < f2.friendShipStatus) return -1; \r\n                    if(f1.friendShipStatus > f2.friendShipStatus) return 1;\r\n                    if(f1.email < f2.email) return -1; \r\n                    if(f1.email > f2.email) return 1; \r\n                }\r\n            );\r\n        }else{\r\n            return [];\r\n        }\r\n        \r\n    },\r\n    set: async ({set, get}, {action, payload}) => {\r\n\r\n        switch(action){\r\n            case 'initialize': \r\n                set(friendsAtom, oldFriends => {\r\n                    if(oldFriends.length === 0){\r\n                        return payload.friends;\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                break;\r\n            case 'add':\r\n                set(friendsAtom, oldFriends => {\r\n                    const friends = [...oldFriends];\r\n                    friends.push(payload.friend);\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'update':\r\n                set(friendsAtom, oldFriends => {\r\n                    const fIndex = oldFriends.findIndex(f => f.contactId === payload.friend.contactId);\r\n                    const friends = oldFriends.slice(0, fIndex)\r\n                                            .concat([payload.friend])\r\n                                            .concat(oldFriends.slice(fIndex+1));\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'reset_cant_no_leidos':\r\n                set(friendsAtom, oldFriends => {\r\n                    const index = oldFriends.findIndex(friend => friend.contactId === payload.contactId);\r\n                    return oldFriends.slice(0, index).concat([{...oldFriends[index], unread: 0}]).concat(oldFriends.slice(index+1));\r\n                });\r\n                break;\r\n            case 'set_message_info': // Para poner la cantidad de mensajes sin leer, el ultimo mensaje y la fecha del ultimo mensaje\r\n                set(friendsAtom, oldFriends => {\r\n                    const data = payload.dataObj;\r\n                    const newFriends = oldFriends.map(friend => {\r\n                        if(data[friend.contactId]){\r\n                            let cantidad = 0;\r\n                            if(friend.unread){\r\n                                cantidad = friend.unread;\r\n                            }\r\n                            if(data[friend.contactId].cantidad){\r\n                                cantidad += data[friend.contactId].cantidad; \r\n                            }\r\n                            return {...friend, \r\n                                unread:  cantidad,\r\n                                lastMsg: data[friend.contactId].lastMessage,\r\n                                datetime: data[friend.contactId].datetime\r\n                            }\r\n                        }\r\n                        return friend;\r\n                    });\r\n                    return newFriends;\r\n                });\r\n            break;\r\n            case 'delete':\r\n                const activeChatContactId = get(activeChatWith);\r\n                if(activeChatContactId === payload.friendId){\r\n                    set(activeChatWith, oldActive => {\r\n                        return null;\r\n                    });\r\n                }\r\n                set(friendsAtom, oldFriends => {\r\n                    return oldFriends.filter(f => f.contactId !== payload.friendId);\r\n                });\r\n                break;\r\n            case 'connect':                \r\n                if(Array.isArray(payload.data)){\r\n                    set(friendsAtom, oldFriends => {\r\n                        return oldFriends.map(friend => {\r\n                            const idx = payload.data.findIndex(dat => dat.userId === friend.contactId);\r\n                            if(idx >= 0){\r\n                                return {...friend, socketId: payload.data[idx].socketId};     \r\n                            }\r\n                            return {...friend};\r\n                        });\r\n                    }); \r\n                }else{\r\n\r\n                    const {userId, socketId} = payload.data;\r\n                    let conectedFriendName = null;\r\n                    let friendShipStatus = 0;\r\n                    \r\n                    set(friendsAtom, oldFriends => {\r\n                        const fIndex = oldFriends.findIndex(f => f.contactId === userId);\r\n                        if(fIndex >= 0){\r\n                            conectedFriendName = oldFriends[fIndex].nickname;\r\n                            friendShipStatus = oldFriends[fIndex].friendShipStatus;\r\n                            const updatedFriend = {...oldFriends[fIndex], socketId: socketId };\r\n                        \r\n                            const friends = oldFriends.slice(0, fIndex)\r\n                                                    .concat([updatedFriend])\r\n                                                    .concat(oldFriends.slice(fIndex+1));\r\n                            return friends;\r\n                        }\r\n                        return oldFriends;\r\n                    });\r\n                    if(conectedFriendName && friendShipStatus === 1)\r\n                        payload.notification(`${conectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'info'});\r\n                }                \r\n                break;\r\n            case 'disconnect':\r\n                let disconectedFriendName = null;\r\n                let friendShipStatus = 0;\r\n                \r\n                set(friendsAtom, oldFriends => {\r\n                    \r\n                    const index = oldFriends.findIndex(friend => friend.socketId === payload.socketId);\r\n                    if(index >= 0){\r\n                        disconectedFriendName = oldFriends[index].nickname;\r\n                        friendShipStatus = oldFriends[index].friendShipStatus;\r\n                        return [...oldFriends].slice(0, index).concat([{...oldFriends[index], socketId: null}]).concat(oldFriends.slice(index+1));\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                if(disconectedFriendName && friendShipStatus === 1)\r\n                    payload.notification(`${disconectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'warning'});\r\n                break;\r\n            \r\n                default: break;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst messageStates = {\r\n    'NINGUNO': 0, // Cuando no es enviado por el propio usuario, sino que se lo enviaron a el, por lo que los estados no tienen sentido para este tipo de mensajes\r\n    'ENVIADO': 1,\r\n    'GUARDADO': 2,\r\n    'LEIDO': 3\r\n};\r\n\r\nconst initConversationSelector = selector({\r\n    key:'conversationSelector',\r\n    set: ({set}, {contactId, conversation}) => {\r\n\r\n        const getMessageState = (userOriginId, UserDestinyId, contactId, readed) => {\r\n\r\n            if(userOriginId === contactId){\r\n                return 0;\r\n            }else if(UserDestinyId === contactId){\r\n                return readed ? 3 : 2;\r\n            }\r\n        }\r\n\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return conversation.map(message => {\r\n                return {\r\n                    _id: message._id,\r\n                    content: message.content,\r\n                    datetime: message.datetime,\r\n                    state: getMessageState(message.userOrigin, message.userDestiny, contactId, message.readed)\r\n                };\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nconst addMsgToConversationSelector = selector({\r\n    key: 'addMessageToConversation',\r\n    set: ({set}, {contactId, messageId, content, datetime, state}) => {\r\n        const newMessageObj = {\r\n            _id: messageId,\r\n            content: content,\r\n            datetime: datetime,\r\n            state: state\r\n        };        \r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation.concat([newMessageObj]);\r\n        });\r\n\r\n    }\r\n});\r\n\r\n\r\nconst editMsgToStateSavedSelector = selector({\r\n    key: 'editMsgToStateSavedSelector',\r\n    set: ({set}, {contactId, messageId, datetime, consecutive}) => {\r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            \r\n            const index = oldConversation.findIndex(message => message._id === consecutive && message.state === 1);\r\n            if(index >= 0){\r\n                const modMessage = {...oldConversation[index], state: 2, _id: messageId, datetime: datetime};\r\n                return oldConversation.slice(0, index).concat([modMessage]).concat(oldConversation.slice(index+1));\r\n            }\r\n            return oldConversation;\r\n        });\r\n    }\r\n});\r\n\r\nconst editAllMsgToReadedSelector = selector({\r\n    key: 'editAllMsgToSavedSelector',\r\n    set: ({set}, {contactId}) => {\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation\r\n                .map(message => {\r\n                    if(message.state !== 0)\r\n                        return {...message, state: 3}\r\n                    else\r\n                        return message;\r\n                });\r\n        });\r\n    }\r\n});\r\n\r\nexport {friendSelector, initConversationSelector, addMsgToConversationSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector}","//import React from 'react';\r\nimport axios from 'axios';\r\nimport {useRecoilValue} from 'recoil';\r\nimport authMidleware from '../authMiddleware';\r\nimport useNotificationHook from '../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nimport {idiomaState} from '../components/recoil/atoms';\r\n//import useBackdrop from '../components/uiComponents/backdrop/useBackdrop';\r\n\r\nconst useAxiosHook = () => {\r\n\r\n    const {openErrorNotification, openSuccessNotification} = useNotificationHook();\r\n    const {idioma} = useRecoilValue(idiomaState);\r\n    //const {closeBackDrop, showBackDrop} = useBackdrop();\r\n\r\n    const postRequest = ({url, bodyParams= {}, doFnAfterSuccess=null, doFnAfterError = null, messageOnSuccess=null, messageOnError=null}) => {\r\n        \r\n        const optimisticAction = token => {\r\n            //showBackDrop();\r\n            axios.post(`${DEFAULT_CONFIG.server}${url}`, \r\n                bodyParams, \r\n                {\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    //closeBackDrop();\r\n                    if(messageOnSuccess) openSuccessNotification(messageOnSuccess);\r\n                    if(doFnAfterSuccess) doFnAfterSuccess(resp, token);\r\n                })\r\n                .catch(err => {\r\n                    //closeBackDrop();\r\n                    if(!err.response){\r\n                        const connMsgError = {\"es\": \"Error de conexión\", \"en\": \"Network error\"};\r\n                        openErrorNotification(connMsgError[idioma]);\r\n                    }else if(messageOnError) openErrorNotification(messageOnError);\r\n\r\n                    if(doFnAfterError) doFnAfterError(err);\r\n                })\r\n        }\r\n        /*const pesimisticAction = () => {            \r\n            clearUserData();\r\n        }*/\r\n        \r\n        authMidleware(optimisticAction/*, pesimisticAction*/);\r\n    };   \r\n\r\n\r\n    return {postRequest};\r\n\r\n}\r\nexport default useAxiosHook;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Container, Avatar, Typography, TextField, Button} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\nconst usePassStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(4),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    }\r\n  }));\r\n\r\nconst ChangepassView = ({text, idioma, oldPassState, passState, pass2State, onOldPassChange, onPassChange, onPass2Change, submitPass }) => {\r\n\r\n    const classes = usePassStyles();\r\n    \r\n    return <Container component=\"main\" maxWidth=\"xs\">  \r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon fontSize=\"large\"/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                    {text.title[idioma]}\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={text.oldpassword[idioma]}\r\n                            type=\"password\"\r\n                            id=\"oldpassword\"\r\n                            autoComplete=\"current-password\"\r\n                            value={oldPassState.value}\r\n                            onChange={onOldPassChange}\r\n                            helperText={!oldPassState.valid ? text.invalidOldPass[idioma] : ''}\r\n                            error={!oldPassState.valid}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={text.password[idioma]}\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            value={passState.value}\r\n                            onChange={onPassChange}\r\n                            helperText={!passState.valid ? text.invalidPass[idioma] : ''}\r\n                            error={!passState.valid}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={text.repeatPassword[idioma]}\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            value={pass2State.value}\r\n                            onChange={onPass2Change}\r\n                            helperText={!pass2State.valid ? text.passNotEqual[idioma] : ''}\r\n                            error={!pass2State.valid}\r\n                        />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={submitPass}            \r\n                    >\r\n                        {text.changePass[idioma]}\r\n                    </Button>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n\r\n}\r\nexport default ChangepassView;","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {idiomaState} from '../../../../components/recoil/atoms';\r\nimport useLogout from '../../../../utils/useLogout';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport useNotificationHook from '../../../../components/uiComponents/notification/notification.hook';\r\nimport ChangepassView from './changepass.view';\r\nimport text from './idioma.json';\r\n\r\nconst ChangepassController = () => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const logout = useLogout();\r\n    const {postRequest} = useAxiosHook();\r\n    const {openErrorNotification} = useNotificationHook();\r\n\r\n    const [oldPassState, setOldPassState] = useState({value: \"\", valid: true});\r\n    const [passState, setPassState] = useState({value: \"\", valid: true});\r\n    const [pass2State, setPass2State] = useState({value: \"\", valid: true});\r\n\r\n    const onOldPassChange = ({target: {value}}) => {\r\n        setOldPassState({...passState, value: value, valid: true});\r\n    }\r\n    const onPassChange = ({target: {value}}) => {\r\n        setPassState({...passState, value: value, valid: true});\r\n        setPass2State({...pass2State, valid: true});\r\n    }\r\n    const onPass2Change = ({target: {value}}) => {\r\n        setPass2State({...pass2State, value: value, valid: true});\r\n    }\r\n\r\n    const submitPass = (event) => {\r\n        event.preventDefault();\r\n        if(oldPassState.value.length === 0){\r\n            setOldPassState({...oldPassState, valid: false})\r\n        } else if(passState.value.length < 8){\r\n            setPassState({...passState, valid: false});\r\n        }else if(pass2State.value !== passState.value){\r\n            setPass2State({...pass2State, valid: false});\r\n        }else {\r\n\r\n            postRequest({\r\n                url: '/users/changePassword',\r\n                bodyParams: {\r\n                    oldPassword: oldPassState.value, \r\n                    password: passState.value\r\n                },\r\n                messageOnSuccess: text.passChangeOk[idioma],\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        logout();\r\n                    }\r\n                },\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else if(err.response.status === 403){\r\n                        openErrorNotification(text.passChange403Error[idioma])\r\n                    }else{\r\n                        openErrorNotification(text.passChangeError[idioma])\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return <ChangepassView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        oldPassState={oldPassState}\r\n        passState={passState}\r\n        pass2State={pass2State}\r\n\r\n        onOldPassChange={onOldPassChange}\r\n        onPassChange={onPassChange}\r\n        onPass2Change={onPass2Change}\r\n        submitPass={submitPass}\r\n    />;\r\n\r\n}\r\n\r\nexport default ChangepassController;","import React from 'react';\r\nimport ChangepassController from './changepass.controller';\r\nconst ChangePass = props => { \r\n    \r\n    return <ChangepassController {...props}/>;\r\n\r\n}\r\nexport default ChangePass;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Avatar, Button} from '@material-ui/core';\r\nimport { pink } from '@material-ui/core/colors';\r\nimport AvatarEdit from 'react-avatar-edit';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    avatarEdit: {\r\n        margin: theme.spacing(2),\r\n        marginLeft: theme.spacing(3),\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: ''\r\n    },\r\n    avatar: {\r\n        marginLeft: theme.spacing(7),\r\n        width: theme.spacing(10),\r\n        height: theme.spacing(10),\r\n    },\r\n    button: {\r\n        width: '100%', \r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\n\r\nconst ChangeAvatarView = ({text, idioma, preview, setPreview, avatarRef, onAvatarChange}) => {\r\n\r\n    const classes = useStyles(); \r\n\r\n    return <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={classes.avatarEdit}>\r\n                <AvatarEdit\r\n                        width={120}\r\n                        height={100}\r\n                        onCrop={prev => {                                    \r\n                            setPreview(prev)}\r\n                        }\r\n                        onClose={() => {setPreview(null)}}\r\n                        closeIconColor={pink[500]}\r\n                        label={text.choosefile[idioma]}        \r\n                        ref={avatarRef}                    \r\n                    />\r\n                    <Avatar                           \r\n                        src={preview}\r\n                        variant=\"circle\"\r\n                        className={classes.avatar}\r\n                    />\r\n            </div>\r\n            <Button \r\n                variant=\"contained\" \r\n                color=\"primary\"  \r\n                disabled={preview === null} \r\n                className={classes.button}\r\n                onClick={onAvatarChange}\r\n            >\r\n                {text.btnCambiar[idioma]}\r\n            </Button>\r\n        </Container>\r\n}\r\nexport default ChangeAvatarView;","import React, {useState, useRef} from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, userAvatarState} from '../../../../components/recoil/atoms';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport {DEFAULT_CONFIG} from '../../../../conf/configuration'\r\nimport ChangeavatarView from './changeavatar.view';\r\nimport text from './idioma.json';\r\n\r\nconst ChangeavatarController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {postRequest} = useAxiosHook();\r\n    const setAvatar = useSetRecoilState(userAvatarState);\r\n    const [previewAvatar, setPreviewAvatar] = useState(null);\r\n    const avatarRef = useRef(null);\r\n\r\n    const onAvatarChange = () => {\r\n        postRequest({\r\n            url: '/users/changeAvatar',\r\n            bodyParams: {\r\n                avatar: previewAvatar\r\n            },\r\n            messageOnError: text.onError[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                if(resp.status === 200){\r\n                    close();\r\n                    //setAvatar(`${DEFAULT_CONFIG.server}${resp.data.avatarUrl}`);\r\n                    setAvatar(resp.data.avatarUrl);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return <ChangeavatarView \r\n        text={text}\r\n        idioma={idioma}\r\n        preview={previewAvatar}\r\n        setPreview={setPreviewAvatar}\r\n        avatarRef={avatarRef}\r\n        \r\n        onAvatarChange={onAvatarChange}\r\n    />;\r\n\r\n}\r\nexport default ChangeavatarController;","import React from 'react';\r\nimport ChangeAvatarController from './changeavatar.controller';\r\n\r\nconst ChangeAvatar = props => {\r\n    \r\n    return <ChangeAvatarController {...props} />;\r\n}\r\n\r\nexport default ChangeAvatar;","import React from 'react';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport {Container, TextField, Grid, Button, Avatar, CssBaseline, Typography, Switch} from '@material-ui/core';\r\nimport PermIdentityOutlinedIcon from '@material-ui/icons/PermIdentityOutlined';\r\nimport {pink, blue} from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    link: {\r\n        cursor: 'pointer',\r\n        textDecoration: 'none',\r\n        color: theme.palette.text.secondary,\r\n        '&:hover':{\r\n            textDecoration: 'underline',\r\n        }\r\n    },\r\n    customSwitch: {\r\n        alignSelf: 'center'\r\n    }\r\n}));\r\n\r\nconst CustomSwitch = withStyles((theme) => ({\r\n    switchBase: {\r\n        color: blue[800],  \r\n        '&$checked': {\r\n            color: pink[500],\r\n            '& + $track': {\r\n                opacity: 1,\r\n                backgroundColor: theme.palette.common.white,\r\n                borderColor: theme.palette.common.white,\r\n            },\r\n        }\r\n    },\r\n    track: {\r\n        opacity: 1,\r\n        backgroundColor: theme.palette.common.white,\r\n    },\r\n    checked: {},\r\n  }))(Switch);\r\n\r\nconst EditProfileView = ({text, idioma, isOpen, setClose, userData, \r\n    lastName, nameState, nicknameState, emailState, gender,\r\n    onNameChange, onEmailChange, onNickNameChange, onLastNameChange, onSwitchGender,\r\n    onSave, avatarSrc\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return <Container component=\"main\" maxWidth=\"xs\">    \r\n            <CssBaseline /> \r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}> \r\n                    <PermIdentityOutlinedIcon fontSize=\"large\"/>\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    {text.title[idioma]}\r\n                </Typography>       \r\n            \r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                autoComplete=\"fname\"\r\n                                name=\"firstName\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"firstName\"\r\n                                label={text.firstName[idioma]}\r\n                                autoFocus\r\n                                value={nameState.value}\r\n                                helperText={!nameState.valid ? text[nameState.msg][idioma] : ''}\r\n                                error={!nameState.valid}\r\n                                onChange={onNameChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"lastName\"\r\n                                label={text.lastName[idioma]}\r\n                                name=\"lastName\"\r\n                                autoComplete=\"lname\"\r\n                                value={lastName.value}\r\n                                onChange={onLastNameChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label={text.email[idioma]}\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                value={emailState.value}\r\n                                helperText={!emailState.valid ? text.invalidEmail[idioma] : ''}\r\n                                error={!emailState.valid}\r\n                                onChange={onEmailChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"nickname\"\r\n                                label={text.nickname[idioma]}\r\n                                \r\n                                id=\"nickname\"\r\n                                \r\n                                value={nicknameState.value}\r\n                                helperText={!nicknameState.valid ? text[nicknameState.msg][idioma] : ''}\r\n                                error={!nicknameState.valid}\r\n                                onChange={onNickNameChange}\r\n                            />\r\n                        </Grid>\r\n                        \r\n                            <Typography component=\"div\" style={{width: '100%'}}>\r\n                                <Grid component=\"label\" container alignItems=\"center\" spacing={1} style={{width: '100%', margin: 0, justifyContent: 'center'}}>\r\n                                    <Grid item>{text.male[idioma]}</Grid>\r\n                                        <Grid item>\r\n                                            <CustomSwitch checked={gender} onChange={onSwitchGender} name=\"checkedC\" className={classes.customSwitch}/>\r\n                                        </Grid>\r\n                                    <Grid item>{text.female[idioma]}</Grid>\r\n                                </Grid>\r\n                            </Typography>\r\n                                 \r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={onSave}\r\n                    >\r\n                        {text.save[idioma]}\r\n                    </Button>\r\n                </form>\r\n\r\n                \r\n        \r\n            </div>\r\n        </Container>;\r\n\r\n}\r\nexport default EditProfileView;","import React, {useState, useRef, useEffect, useCallback} from 'react';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport {loginData, idiomaState, userAvatarState} from '../../../../components/recoil/atoms';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport useNotification from '../../../../components/uiComponents/notification/notification.hook';\r\nimport EditProfileView from './editprofile.view';\r\nimport text from './idioma.json'; \r\n\r\nconst EditProfileController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const avatarSrc = useRecoilValue(userAvatarState);\r\n    const [userData, setUserData] = useRecoilState(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    const {openErrorNotification} = useNotification();\r\n\r\n    const [emailState, setEmailState] = useState({value: userData.email, valid: true});\r\n    const [nicknameState, setNickNameState] = useState({value: userData.nickname, valid: true});    \r\n    const [nameState, setNameState] = useState({value: userData.firstName, valid: true});  \r\n    const [lastName, setLastName] = useState({value: userData.lastName, valid: true});\r\n    const [gender, setGender] = useState(userData.gender === \"F\" ? true : false);  \r\n    \r\n    \r\n    const onNameChange = ({target: {value}}) => {\r\n        setNameState(oldState => ({...oldState, value: value, valid: true}));\r\n    };\r\n    const onLastNameChange = ({target: {value}}) => {\r\n        setLastName(oldState => ({...oldState, value: value, valid: true}));\r\n    };\r\n    const onEmailChange = ({target:{value}}) => {\r\n        setEmailState(oldState => ({...oldState, value: value, valid: true}));\r\n    }\r\n    const onNickNameChange = ({target: {value}}) => {\r\n        setNickNameState(oldState => ({...oldState, value: value, valid: true}));\r\n    }\r\n    const onSwitchGender = ({target: {checked}}) => {\r\n        setGender(oldState => !oldState);\r\n    }\r\n\r\n    const onSave =(event) => {\r\n        event.preventDefault();\r\n        if(!/^[a-zA-Z\\']+$/.test(nameState.value)){\r\n            setNameState({...nameState, valid: false, msg: 'nameInvalid'});\r\n        }else\r\n        if(nameState.value.length < 2){\r\n            setNameState({...nameState, valid: false, msg: 'nameShort'});\r\n        }else\r\n        if(nameState.value.length >= 20){\r\n            setNameState({...nameState, valid: false, msg: 'nameLong'});\r\n        }else\r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(emailState.value)){\r\n            setEmailState({...emailState, valid: false});\r\n        }else\r\n        if(nicknameState.value.length === 0){\r\n            setNickNameState({...nicknameState, valid: false, msg: 'nicknameNull'});\r\n        }else\r\n        {\r\n            const newUserData = {\r\n                firstName: nameState.value,\r\n                lastName: lastName.value,\r\n                nickname: nicknameState.value,\r\n                email: emailState.value,\r\n                gender: gender ? 'F' : 'M'\r\n            }; \r\n\r\n            postRequest({\r\n                url: '/users/editprofile',\r\n                bodyParams: newUserData,\r\n                messageOnSuccess: text.onSaveSuccess[idioma],\r\n                doFnAfterError: err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }\r\n                    else if(err.response.status === 409){\r\n                        openErrorNotification(text.duplicated[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.error[idioma]);\r\n                    }\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    setUserData({...userData, ...newUserData});\r\n                    close();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return <EditProfileView \r\n        userData={userData}\r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        lastName={lastName}\r\n        nameState={nameState}\r\n        nicknameState={nicknameState}\r\n        emailState={emailState}\r\n        gender={gender}\r\n        \r\n        onNameChange={onNameChange}\r\n        onEmailChange={onEmailChange}\r\n        onNickNameChange={onNickNameChange}\r\n        onLastNameChange={onLastNameChange}\r\n        onSwitchGender={onSwitchGender}\r\n\r\n        avatarSrc={avatarSrc}\r\n\r\n        onSave={onSave}\r\n\r\n    />;\r\n}\r\nexport default EditProfileController;","import React from 'react';\r\nimport EditProfileController from './editprofile.controller';\r\n\r\nconst EditProfile = props => {\r\n    \r\n    return <EditProfileController {...props} />;\r\n\r\n}\r\nexport default EditProfile;","import React from 'react';\r\n\r\nimport {Container, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Grid} from '@material-ui/core';\r\n\r\n\r\nconst ShareAppView = ({idioma, text, nameState, onNameChange, emailState, onEmailChange, onSend}) => {\r\n\r\n    \r\n\r\n    return <Container maxWidth=\"sm\"> \r\n            <DialogTitle id=\"form-dialog-title\">{text.winTitle[idioma]}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {text.text[idioma]}\r\n                </DialogContentText>\r\n                \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            autoComplete=\"fname\"\r\n                            name=\"firstName\"\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"firstName\"\r\n                            label={text.name[idioma]}\r\n                            autoFocus\r\n                            value={nameState.value}\r\n                            helperText={!nameState.valid ? text[nameState.msg][idioma] : ''}\r\n                            error={!nameState.valid}\r\n                            onChange={onNameChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label={text.email[idioma]}\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            autoComplete=\"email\"\r\n                            value={emailState.value}\r\n                            helperText={!emailState.valid ? text.invalidEmail[idioma] : ''}\r\n                            error={!emailState.valid}\r\n                            onChange={onEmailChange}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onSend}>\r\n                        {text.send[idioma]}\r\n                    </Button>\r\n            </DialogActions>\r\n        </Container>;\r\n\r\n}\r\nexport default ShareAppView;","import React, {useState} from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useNotification from '../../components/uiComponents/notification/notification.hook';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\nimport ShareAppView from './shareapp.view';\r\nimport text from './idioma.json';\r\n\r\nconst ShareAppController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    const {postRequest} = useAxiosHook();\r\n    const {openErrorNotification} = useNotification();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n    const [emailState, setEmailState] = useState({value: '', valid: true});\r\n    const [nameState, setNameState] = useState({value: '', valid: true});  \r\n\r\n\r\n    const onNameChange = ({target: {value}}) => {\r\n        setNameState(oldState => ({...oldState, value: value, valid: true}));\r\n    };\r\n    const onEmailChange = ({target:{value}}) => {\r\n        setEmailState(oldState => ({...oldState, value: value, valid: true}));\r\n    }\r\n\r\n    const onSend =(event) => {\r\n        event.preventDefault();\r\n        if(!/^[a-zA-Z\\']+$/.test(nameState.value)){\r\n            setNameState({...nameState, valid: false, msg: 'nameInvalid'});\r\n        }else\r\n        if(nameState.value.length < 2){\r\n            setNameState({...nameState, valid: false, msg: 'nameShort'});\r\n        }else\r\n        if(nameState.value.length >= 20){\r\n            setNameState({...nameState, valid: false, msg: 'nameLong'});\r\n        }else\r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(emailState.value)){\r\n            setEmailState({...emailState, valid: false});\r\n        }else\r\n        {\r\n            postRequest({\r\n                url: '/users/shareapp',\r\n                bodyParams: {\r\n                    firstName: nameState.value,\r\n                    email: emailState.value,\r\n                    language: idioma,\r\n                    hostname: window.location.host\r\n                },\r\n                messageOnSuccess: text.sendSuccess[idioma],\r\n                doFnAfterError: err => {                    \r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }\r\n                    else if(err.response.status === 409){\r\n                        openErrorNotification(text.emailExist[idioma]);\r\n                    }\r\n                },\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 201){\r\n                        const newFriend = resp.data.friend;\r\n                        friendDispatcher({action: 'add', payload: {friend: newFriend}});\r\n                    }\r\n                    close();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return <ShareAppView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        nameState={nameState}\r\n        onNameChange={onNameChange}\r\n        emailState={emailState}\r\n        onEmailChange={onEmailChange}\r\n\r\n        onSend={onSend}\r\n    />;\r\n\r\n}\r\nexport default ShareAppController;","import React from 'react';\r\n\r\nimport ShareAppController from './shareapp.controller';\r\n\r\nconst ShareApp = props => {\r\n    \r\n    return <ShareAppController {...props} />;\r\n\r\n}\r\nexport default ShareApp;","import React from 'react';\r\n\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Container, DialogTitle, DialogContent, DialogContentText, Grid, TextField, DialogActions, Button, Box, Typography} from '@material-ui/core';\r\n\r\n\r\nconst labels = {\r\n    0: 'unrated',\r\n    0.5: 'useless',\r\n    1: 'useless+',\r\n    1.5: 'poor',\r\n    2: 'poor+',\r\n    2.5: 'ok',\r\n    3: 'ok+',\r\n    3.5: 'good',\r\n    4: 'good+',\r\n    4.5: 'excellent',\r\n    5: 'excellent+',\r\n};\r\n  \r\n  const useStyles = makeStyles(theme => ({\r\n    ratingRow: {\r\n      width: '250px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      marginBottom: theme.spacing(1)\r\n    }\r\n  }));\r\n\r\nconst FeedbackView = React.memo(({text, idioma,\r\n    globalState, onChange,\r\n    comentState, onCommentChange, onSave\r\n}) => {\r\n\r\n    \r\n    const classes = useStyles();\r\n\r\n    return <Container maxWidth=\"sm\"> \r\n                <DialogTitle id=\"form-dialog-title\">{text.title[idioma]}</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                            <RatingRowStars text={text} idioma={idioma} classes={classes} globalState={globalState} onChange={onChange} type=\"design\"/>\r\n                            <RatingRowStars text={text} idioma={idioma} classes={classes} globalState={globalState} onChange={onChange} type=\"performance\"/>\r\n                            <RatingRowStars text={text} idioma={idioma} classes={classes} globalState={globalState} onChange={onChange} type=\"usability\"/>\r\n                        </Grid>\r\n                        <Grid item xs={6} style={{display:\"flex\"}}>\r\n                            \r\n                                <div style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                }}>\r\n                                    <div>\r\n                                        <Typography className={classes.ratingType}>{text.lbAverage[idioma]}</Typography>\r\n                                        <div className={classes.ratingRow}>\r\n                                            <Rating\r\n                                                readOnly\r\n                                                name=\"hover-feedback\"\r\n                                                size=\"large\"\r\n                                                value={globalState.overall}\r\n                                                precision={0.5}\r\n                                            />\r\n                                            {\r\n                                                globalState.overall !== null && <Box ml={2}>{\r\n                                                text[labels[globalState.overall]][idioma]\r\n                                            }</Box>}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            \r\n                        </Grid>\r\n                        <Grid item xs={12} >\r\n                            <TextField\r\n                                id=\"outlined-textarea\"\r\n                                label={text.comment[idioma]}\r\n                                multiline\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                value={comentState}\r\n                                onChange={onCommentChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={onSave}>\r\n                            {text.save[idioma]}\r\n                        </Button>\r\n                </DialogActions>\r\n            </Container>;\r\n\r\n})\r\n\r\nconst RatingRowStars = React.memo(({text, idioma, classes, globalState, onChange, type }) => {\r\n    \r\n    const [state, setstate] = React.useState(-1);\r\n\r\n    return <Grid item xs={12} >\r\n            <Typography className={classes.ratingType}>{text[type][idioma]}</Typography>\r\n            <div className={classes.ratingRow}>\r\n                <Rating\r\n                    value={globalState[type]}\r\n                    precision={0.5}\r\n                    onChange={(event, newValue) => onChange(newValue, type)}\r\n                    onChangeActive={(event, newValue) => setstate(newValue)}\r\n                />\r\n                {globalState[type] !== null && <Box ml={2}>{\r\n                    text[labels[state !== -1 ? state : globalState[type]]][idioma]\r\n                }</Box>}\r\n            </div>\r\n        </Grid>\r\n})\r\n\r\nexport default FeedbackView;","import React, {useState, useEffect, useCallback} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport useNotification from '../../components/uiComponents/notification/notification.hook';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\n\r\nimport FeedbackView from './feedback.view';\r\nimport text from './idioma.json';\r\n\r\n\r\nconst FeedbackController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const  {postRequest}  = useAxiosHook();\r\n\r\n    const [comentState, setComntState] = useState('');\r\n    const [globalState, setGlobalState] = useState({\r\n        design: 0,\r\n        performance: 0,\r\n        usability: 0,\r\n        overall: 0\r\n    });\r\n    \r\n\r\n    const onCommentChange = ({target: {value}}) => {\r\n        setComntState(value);\r\n    }\r\n\r\n    const calcProm = (desing, performance, usability, newValue = 0) => {\r\n        let cant = newValue > 0 ? 1 : 0;\r\n        let promedio = newValue;\r\n        if(desing > 0) {\r\n            promedio += desing;\r\n            cant++; \r\n        }\r\n        if(performance > 0){\r\n            promedio += performance;\r\n            cant++;\r\n        }\r\n        if(usability > 0){\r\n            promedio += usability;\r\n            cant++;\r\n        }\r\n        if(cant > 0){\r\n            promedio = promedio / cant;\r\n            const restoProm = promedio % 0.5;\r\n            promedio = promedio - restoProm;\r\n        }\r\n        \r\n        return promedio;\r\n    }\r\n    const onChange = useCallback((newValue, type) => {\r\n\r\n        setGlobalState(oldState => {\r\n            let desing = 0;\r\n            let performance = 0;\r\n            let usability = 0;\r\n            if(type !== 'design' && oldState.design > 0){\r\n                desing = oldState.design;\r\n            }\r\n            if(type !== 'performance' && oldState.performance > 0){\r\n                performance = oldState.performance;\r\n            }\r\n            if(type !== 'usability' && oldState.usability > 0){\r\n                usability = oldState.usability;\r\n            }\r\n            \r\n\r\n            let promedio = calcProm(desing, performance, usability, newValue);\r\n            \r\n            const newGlobalState = {...oldState, [type]: newValue, overall: promedio};\r\n            return newGlobalState;\r\n\r\n        });\r\n    }, []);\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n\r\n        postRequest({\r\n            url: '/users/getUserFeedback',\r\n            messageOnError: text.lbOnLoadError[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                if(resp.status === 200){\r\n                    const rating = resp.data.rating;\r\n                    const stateObj = {\r\n                        design: rating.design,\r\n                        performance: rating.performance,\r\n                        usability: rating.usability,\r\n                        overall: calcProm(rating.design, rating.performance, rating.usability)\r\n                    }\r\n                    \r\n                    setGlobalState(stateObj);\r\n                    setComntState(rating.comment);\r\n                }\r\n            }\r\n        })\r\n    }, []);\r\n\r\n    const onSave = () => {\r\n        postRequest({\r\n            url: \"/users/saveFeedback\",\r\n            bodyParams: {\r\n                designRating: globalState.design, \r\n                performaceRating: globalState.performance, \r\n                usabilityRating: globalState.usability, \r\n                comment: comentState\r\n            },\r\n            messageOnError: text.lbOnSaveError[idioma],\r\n            messageOnSuccess: text.lbOnsaveOk[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                close();\r\n            }\r\n        });\r\n    }\r\n\r\n    return <FeedbackView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        globalState={globalState}\r\n        onChange={onChange}\r\n        \r\n        comentState={comentState}\r\n        onCommentChange={onCommentChange}\r\n\r\n        onSave={onSave}\r\n    />;\r\n\r\n}\r\nexport default FeedbackController;","import React from 'react';\r\n\r\nimport FeedbackController from './feeedback.controller';\r\n\r\nconst Feedback = React.memo(props => {\r\n    \r\n    return <FeedbackController {...props} />;\r\n\r\n});\r\nexport default Feedback;","import React from 'react';\r\n\r\nimport {Container, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, Button, Grid} from '@material-ui/core';\r\n\r\n\r\nconst BugReportView = ({idioma, text, comentState, onCommentChange, onSend}) => {\r\n\r\n    return <Container maxWidth=\"sm\"> \r\n            <DialogTitle id=\"form-dialog-title\">{text.winTitle[idioma]}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {text.text[idioma]}\r\n                </DialogContentText>\r\n                \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} >\r\n                    <TextField\r\n                                id=\"outlined-textarea\"\r\n                                label={text.report[idioma]}\r\n                                multiline\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                rowsMax={4}\r\n                                rows={4}\r\n                                value={comentState}\r\n                                onChange={onCommentChange}\r\n                            />\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onSend}>\r\n                        {text.send[idioma]}\r\n                    </Button>\r\n            </DialogActions>\r\n        </Container>;\r\n\r\n}\r\nexport default BugReportView;","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\nimport BugReportView from './bugreport.view';\r\nimport text from './idioma.json';\r\n\r\nconst BugReportController = ({close}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    const {postRequest} = useAxiosHook();\r\n\r\n    const [comentState, setComntState] = useState('');\r\n\r\n    const onCommentChange = ({target: {value}}) => {\r\n        setComntState(value);\r\n    }\r\n\r\n    const onSend = () => {\r\n        postRequest({\r\n            url: \"/bugs/saveBugReport\",\r\n            bodyParams: {\r\n                description: comentState\r\n            },\r\n            messageOnError: text.sendError[idioma],\r\n            messageOnSuccess: text.sendOk[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                close();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    return <BugReportView \r\n        text={text}\r\n        idioma={idioma}\r\n\r\n        comentState={comentState}\r\n        onCommentChange={onCommentChange}\r\n\r\n        onSend={onSend}\r\n    />;\r\n\r\n}\r\nexport default BugReportController;","import React from 'react';\r\n\r\nimport BugReportController from './bugreport.controller';\r\n\r\nconst BugReport = props => {\r\n    \r\n    return <BugReportController {...props} />;\r\n\r\n}\r\nexport default BugReport;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Popover from '@material-ui/core/Popover';\r\n\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PhotoCameraOutlinedIcon from '@material-ui/icons/PhotoCameraOutlined';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport BugReportIcon from '@material-ui/icons/BugReport';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport {blue, pink} from '@material-ui/core/colors'\r\n\r\nimport ChangePass from './changepass';\r\nimport ChangeAvatar from './changeavatar';\r\nimport EditProfile from './editprofile';\r\nimport ShareApp from '../../shareapp';\r\nimport Feedback from '../../feedback';\r\nimport BugReport from '../../bugreport';\r\n\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    avatar: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7)\r\n    },\r\n    cardHeaderAction: {\r\n        alignSelf: 'flex-end',\r\n    },\r\n    cardHeaderContent:{\r\n        overflowX: \"hidden\",\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    langSelect: {\r\n        fontSize: '0.9em', \r\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n        fontWeight: 400,\r\n        lineHeight: 1.5,\r\n        letterSpacing:'0.00938em'\r\n    },\r\n    avatarMan: {\r\n        color: theme.palette.getContrastText(blue[400]),\r\n        backgroundColor: blue[400],\r\n    },\r\n    avatarWoman: {\r\n        color: theme.palette.getContrastText(pink[300]),\r\n        backgroundColor: pink[300],\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst ProfileView = ({text, idioma, avatarUrl, userData, logout, changeIdioma, darkMode, changeTheme, \r\n    changePass, setChangePass, changeAvatar, setChangeAvatar, editProfile, setChangeProfile, shareApp, setShareApp, feedback, setFeedback,\r\n    bugreport, setBugreport,\r\n    open, anchorEl, handleClose\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n\r\n    return (<Popover\r\n        \r\n                    open={open}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                >\r\n\r\n\r\n\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                classes={{\r\n                    action: classes.cardHeaderAction,\r\n                    content: classes.cardHeaderContent,\r\n                }}\r\n                avatar={\r\n                    <Badge\r\n                        overlap=\"circle\"\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right'\r\n                        }}\r\n                        badgeContent={<SmallPhotoCameraButton onClick={setChangeAvatar}/>}\r\n                    >   \r\n                            <Avatar \r\n                                aria-label=\"recipe\" \r\n                                className={`${classes.avatar} ${userData.gender === \"M\" ? classes.avatarMan : classes.avatarWoman}`} \r\n                                src={avatarUrl}                            \r\n                            />                        \r\n                    </Badge>\r\n                }\r\n                action={\r\n                    <Tooltip title={text.logout[idioma]}>\r\n                        <IconButton onClick={logout}>\r\n                            <ExitToAppIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                title={userData.nickname}\r\n                subheader={userData.email}\r\n            />\r\n            \r\n            <Divider />\r\n            \r\n                <List>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setChangeProfile}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <EditIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.edit[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setChangePass}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <VpnKeyIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.editpass[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <LanguageIcon />\r\n                        </ListItemIcon>\r\n                            <FormControl >\r\n                                <Select\r\n                                    value={idioma}\r\n                                    onChange={changeIdioma}\r\n                                    displayEmpty\r\n                                    className={classes.langSelect}\r\n                                    inputProps={{ 'aria-label': 'Without label' }}\r\n                                >\r\n                                    <MenuItem value={'en'}>English</MenuItem>\r\n                                    <MenuItem value={'es'}>Español</MenuItem>\r\n                                </Select>\r\n                                \r\n                            </FormControl>\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <ColorLensIcon />\r\n                        </ListItemIcon>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={darkMode}\r\n                                    onChange={changeTheme}\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label={text.darkMode[idioma]}\r\n                        />\r\n                    </ListItem>\r\n                    <Divider />\r\n                    <ListItem \r\n                        button\r\n                        onClick={setShareApp}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <ShareIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.share[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                            secondary={text.shareDesc[idioma]}\r\n                            secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setFeedback}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <StarIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.feedback[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                            secondary={text.feedbackDesc[idioma]}\r\n                            secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem \r\n                        button\r\n                        onClick={setBugreport}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <BugReportIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={text.report[idioma]}\r\n                            primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                            secondary={text.reportDesc[idioma]}\r\n                            secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                        />\r\n                    </ListItem>\r\n                </List>\r\n        </Card>\r\n        \r\n        <Dialog open={changePass} onClose={setChangePass}>\r\n            <ChangePass />\r\n        </Dialog>\r\n\r\n        <Dialog open={changeAvatar} onClose={setChangeAvatar}>\r\n            <ChangeAvatar close={setChangeAvatar}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={editProfile} onClose={setChangeProfile}>\r\n            <EditProfile close={setChangeProfile}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={shareApp} onClose={setShareApp}>\r\n            <ShareApp close={setShareApp}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={feedback} onClose={setFeedback}>\r\n            <Feedback close={setFeedback}/>\r\n        </Dialog>\r\n        \r\n        <Dialog open={bugreport} onClose={setBugreport}>\r\n            <BugReport close={setBugreport}/>\r\n        </Dialog>\r\n    </Popover>\r\n\r\n  );\r\n}\r\n\r\nconst useSmallPhotoCameraButtonStyle = makeStyles(theme => {\r\n        \r\n        return {\r\n            iconButton: {\r\n                backgroundColor: theme.palette.background.default,\r\n                boxShadow: `0 0 5px ${theme.palette.action.disabled}`,\r\n                '&:hover': {\r\n                    backgroundColor: theme.palette.background.default\r\n                }\r\n            }\r\n        }\r\n    }\r\n);\r\n\r\nconst SmallPhotoCameraButton = ({onClick}) => {\r\n    const classes = useSmallPhotoCameraButtonStyle();\r\n    return (\r\n        <IconButton size=\"small\" \r\n            className={classes.iconButton}\r\n            onClick={onClick}\r\n        >\r\n            <PhotoCameraOutlinedIcon fontSize=\"small\"/>\r\n        </IconButton>\r\n        \r\n    );\r\n}\r\n\r\nexport default ProfileView;","import React, {useState} from 'react';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport {loginData, userAvatarState, idiomaState, darkModeAtom} from '../../../components/recoil/atoms';\r\nimport ProfileOptView from './profileOpt.view';\r\nimport useLogout from '../../../utils/useLogout';\r\nimport text from './idioma.json';\r\nimport useAxiosHook from '../../../utils/axiosHook';\r\n\r\nconst ProfileOptController = props => {\r\n\r\n    const [changePass, setChangePassword] = useState(false);\r\n    const setChangePass  = () => {\r\n        setChangePassword(oldState => !oldState);\r\n    }\r\n    const [changeAvatar, setChangeAvat] = useState(false);\r\n    const setChangeAvatar  = () => {\r\n        setChangeAvat(oldState => !oldState);\r\n    }\r\n    const [editProfile, setEditProfileState] = useState(false);\r\n    const setChangeProfile  = () => {\r\n        setEditProfileState(oldState => !oldState);\r\n    }\r\n    const [shareApp, setShareAppState] = useState(false);\r\n    const setShareApp  = () => {\r\n        setShareAppState(oldState => !oldState);\r\n    }\r\n    const [feedback, setFeedbackState] = useState(false);\r\n    const setFeedback  = () => {\r\n        setFeedbackState(oldState => !oldState);\r\n    }\r\n    const [bugreport, setBugreportState] = useState(false);\r\n    const setBugreport  = () => {\r\n        setBugreportState(oldState => !oldState);\r\n    }\r\n    \r\n    const [idioma, setIdioma] = useRecoilState(idiomaState);\r\n    const [darkMode, setDarkMode] = useRecoilState(darkModeAtom);\r\n    const userData = useRecoilValue(loginData);\r\n    const avatarUrl = useRecoilValue(userAvatarState);\r\n    const logout = useLogout();\r\n    const {postRequest} = useAxiosHook();\r\n    \r\n    const changeTheme = () => {\r\n        localStorage.setItem('darkMode', !darkMode);\r\n        setDarkMode(oldMode => !oldMode);\r\n    }\r\n\r\n\r\n\r\n    const changeIdioma = ({target:{value}}) => {\r\n        setIdioma(value);\r\n        postRequest({\r\n            url: '/users/changeUserLanguage',\r\n            bodyParams: {\r\n                lang: value\r\n            }\r\n        });\r\n    }\r\n\r\n    return <> \r\n            <ProfileOptView  \r\n                text={text}\r\n                idioma={idioma}\r\n                avatarUrl={avatarUrl}\r\n                userData={userData}\r\n                logout={logout}\r\n                changeIdioma={changeIdioma}\r\n                darkMode={darkMode}\r\n                changeTheme={changeTheme}\r\n                \r\n                changePass={changePass}\r\n                setChangePass={setChangePass}\r\n\r\n                changeAvatar={changeAvatar}\r\n                setChangeAvatar={setChangeAvatar}\r\n\r\n                editProfile={editProfile}\r\n                setChangeProfile={setChangeProfile}\r\n\r\n                shareApp={shareApp}\r\n                setShareApp={setShareApp}\r\n\r\n                feedback={feedback}\r\n                setFeedback={setFeedback}\r\n\r\n                bugreport={bugreport}\r\n                setBugreport={setBugreport}\r\n                {...props}\r\n            />\r\n        </>\r\n        ;\r\n\r\n}\r\nexport default ProfileOptController;","import React from 'react';\r\nimport ProfileOptController from './profileOpt.controller';\r\n\r\nconst ProfileOptions = props => {\r\n\r\n    return <ProfileOptController {...props}/>;\r\n\r\n}\r\nexport default ProfileOptions;"],"sourceRoot":""}