{"version":3,"sources":["components/recoil/atoms.js","components/uiComponents/notification/notification.atom.js","components/uiComponents/notification/notification.hook.js","view/signin/forgotpass/forgotPass.view.js","conf/configuration.js","view/signin/forgotpass/forgotPass.controller.js","view/signin/forgotpass/index.js","view/signin/signin.view.js","utils/socket.js","authMiddleware.js","view/signin/signin.controller.js","view/signin/index.js","components/recoil/selectors.js","utils/axiosHook.js","view/contacts/contact/acceptInvAction/acceptinv.view.js","view/contacts/contact/acceptInvAction/acceptInv.controller.js","view/contacts/contact/acceptInvAction/index.js","view/contacts/contact/declineInvAction/declineinv.view.js","view/contacts/contact/declineInvAction/declineInv.controller.js","view/contacts/contact/declineInvAction/index.js","view/contacts/contact/deleteAction/delete.view.js","view/contacts/contact/deleteAction/delete.controller.js","view/contacts/contact/deleteAction/index.js","view/contacts/contact/blockAction/block.view.js","view/contacts/contact/blockAction/block.controller.js","view/contacts/contact/blockAction/index.js","view/contacts/contact/contactAction.proxy.js","view/contacts/contact/contact.view.js","view/contacts/contact/contact.controller.js","view/contacts/contact/index.js","view/contacts/contacs.view.js","view/contacts/contacts.controller.js","view/contacts/index.js","view/mainButton/mainButton.view.js","view/addContact/addContact.view.js","view/addContact/addContact.controller.js","view/addContact/index.js","view/mainButton/mainButton.controller.js","view/mainButton/index.js","view/main/main.view.js","view/main/index.js","view/toolbar/profileOptions/profileOpt.view.js","utils/useLogout.js","view/toolbar/profileOptions/profileOpt.controller.js","view/toolbar/profileOptions/index.js","view/toolbar/toolbar.view.js","view/toolbar/toolbar.controller.js","view/toolbar/index.js","view/chat/chatHeader/chatHeader.view.js","view/chat/chatHeader/chatHeader.controller.js","view/chat/chatHeader/index.js","view/chat/chatBody/chatBody.view.js","view/chat/chatBody/chatBody.controller.js","view/chat/chatBody/index.js","view/chat/chatEditor/chatEditor.view.js","view/chat/chatEditor/chatEditor.controller.js","view/chat/chatEditor/index.js","view/chat/chat.view.js","view/chat/index.js","view/signup/signup.view.js","view/signup/signup.controller.js","view/signup/index.js","components/uiComponents/notification/notification.view.js","components/uiComponents/index.js","view/changepass/changepass.view.js","view/changepass/changepass.controller.js","view/changepass/index.js","view/activateuser/activateuser.view.js","view/activateuser/activateuser.controller.js","view/activateuser/index.js","components/events/newUserSubscriber.js","components/events/userDisconnectSubscriber.js","components/events/incomingMsgSubscriber.js","components/events/declinedFriendshipSubscriber.js","components/events/requestFriendshipSubscriber.js","components/events/acceptedFriendshipSubscriber.js","components/events/deletedContactSubscriber.js","components/events/blokedContactSubscriber.js","components/events/recibedMessageSubscriber.js","utils/useRefreshToken.js","App.js","serviceWorker.js","index.js"],"names":["idiomaState","atom","key","default","idioma","userLang","navigator","language","userLanguage","test","getDefaultLanguage","loginData","userAvatarState","chatConversation","contactListState","subscribeToEventsState","addContactViewOpenState","friendsAtom","activeChatWith","getConversationWithContact","contactId","tokenTimeoutAtom","tokentimeout","notificationAtom","open","autoHideDuration","severity","msg","NotificationHook","useRecoilState","notificationState","setNotificationState","defaultToOpem","openSpecificNotification","openNotification","properties","openSuccessNotification","openErrorNotification","openInfoNotification","openWarningNotification","ForgotPassView","forgetPassHandler","forgotWinState","forgotWinOk","onChangeForgotEmail","forgotEmailState","Dialog","onClose","aria-labelledby","DialogTitle","id","text","title","DialogContent","DialogContentText","forgotText","TextField","autoFocus","margin","label","email","type","fullWidth","onChange","value","helperText","valid","invalidEmail","error","DialogActions","Button","onClick","color","forgotBtnCancel","forgotBtnOk","DEFAULT_CONFIG","server","ForgotPassController","useState","setForgotEmailStste","target","axios","post","hostname","window","location","host","then","resp","status","emailSended","catch","err","response","emailNotFound","ForgotPass","props","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","submit","link","cursor","SignIn","emailRef","passRef","onSignIn","rememberChecked","onRememberChange","classes","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","signin","noValidate","required","name","autoComplete","inputRef","password","FormControlLabel","control","Checkbox","checked","rememberme","Grid","container","item","xs","Link","forgotpassword","to","gosignup","socket","AuthMiddleware","nextOptimisticAction","a","token","localStorage","getItem","token_expires","Date","getTime","dataOptimistic","SigninController","setIdiomaState","setUserAvatarState","useSetRecoilState","setTokenTimeOut","setLoginData","redirectState","setRedirect","useRef","remember","setRemember","setforgotWinState","useEffect","authMiddleware","data","_id","nickname","firstName","lastname","gender","avatarUrl","setItem","timeleft","userId","lastName","console","log","current","event","preventDefault","removeItem","refresh_token","refresh_token_expires","notAuthorized","internalError","Signin","friendSelector","selector","get","length","sort","f1","f2","friendShipStatus","socketId","set","action","payload","oldFriends","friends","push","friend","fIndex","findIndex","f","slice","concat","index","unread","dataObj","map","cantidad","lastMsg","lastMessage","datetime","filter","friendId","Array","isArray","idx","dat","conectedFriendName","updatedFriend","notification","disconectedFriendName","initConversationSelector","conversation","getMessageState","userOriginId","UserDestinyId","readed","oldConversation","message","content","state","userOrigin","userDestiny","addMsgToConversationSelector","newMessageObj","messageId","editMsgToStateSavedSelector","consecutive","modMessage","editAllMsgToReadedSelector","useAxiosHook","useNotificationHook","postRequest","url","bodyParams","doFnAfterSuccess","doFnAfterError","messageOnSuccess","messageOnError","authMidleware","headers","AcceptInvActionView","MenuItem","ListItemIcon","fontSize","ListItemText","primary","acceptInv","socketClient","getSocket","openSocket","close","AcceptInvActionController","preAction","contact","useRecoilValue","userData","friendDispatcher","acceptedUserId","emit","accepterId","socketIdRequester","errorAccepting","AcceptInv","DeclineInvActionView","decline","DeclineInvActionController","declinedUserId","declinerId","declinedId","socketIdDeclined","errorDeclining","DeclineInv","DeleteActionView","delete","DeleteActionController","deletedUserId","onDeleteError","deleterId","socketIdDeleted","DeleteAction","BlockActionView","block","BlockActionController","blokedUserId","onBlockError","blokerId","socketIdBloked","BlockAction","ContactActionProxy","handleClose","useStyle","infoIcon","marginRight","overflow","textAlign","flex","padding","transition","borderRadius","border","outline","position","userSelect","verticalAlign","justifyContent","textDecoration","listItemText","paddingRight","OnlineStyledBadge","withStyles","badge","boxShadow","background","top","left","height","animation","transform","opacity","Badge","OfflineStyledBadge","grey","OnlineBadge","overlap","anchorOrigin","vertical","horizontal","children","StyledMenu","Menu","elevation","getContentAnchorEl","transformOrigin","useCustomTooltipGreenStyle","arrow","green","tooltip","useCustomTooltipRedStyle","red","CustomTooltip","classesRed","classesGreen","Tooltip","ContactView","React","memo","handleMenu","anchorEl","openChat","labelId","Fragment","ListItem","button","ListItemAvatar","badgeContent","alt","src","friendShipStatusCode","secondaryTypographyProps","style","ListItemSecondaryAction","IconButton","edge","aria-label","keepMounted","Boolean","Divider","ContactContrller","setAnchorEl","setActiveChat","useCallback","currentTarget","notifyTo","Contact","ContactsView","contacts","List","align","goMakeFriends","beta","ContactsController","setSubscribeToEvents","searchFriends","errorLoadingFriends","errorLoadingFriendsData","contactsData","Contacts","speedDial","bottom","right","MainButtonView","handleOpen","openAddContactView","SpeedDial","ariaLabel","icon","SpeedDialIcon","onOpen","SpeedDialAction","tooltipTitle","addContact","tooltipOpen","sendAll","alert","blue","dialogContent","search","shape","fade","common","white","marginLeft","searchIcon","pointerEvents","inputRoot","inputInput","paddingLeft","transitions","create","UserItem","user","sendFriendRequest","blockinguser","disabled","InputSearch","buscarUsuarios","inputSearchRef","searchState","setSearchState","InputBase","onKeyPress","charCode","placeholder","root","input","inputProps","endAdornment","InputAdornment","size","AddContactView","closeAddContactWin","users","onEntering","dialogTitle","dividers","minHeight","AddContactController","addContactState","setAddContactState","setUsers","stringPattern","start","limit","lbErrorLoadingUsers","userIdRequester","userIdRequested","lbErrorSendigFriendRequest","AddContact","MainButtonController","setOpen","addContactViewState","setAddContactViewState","MainButton","overflowY","MainView","MainContainer","cardHeaderAction","alignSelf","SmallPhotoCameraButton","ProfileView","logout","Card","CardHeader","subheader","edit","primaryTypographyProps","editpass","share","shareDesc","feedback","feedbackDesc","report","reportDesc","useLogout","setUserAvatar","setSubscribe","setContactList","setFriends","client","ProfileOptController","ProfileOptions","flexGrow","menuButton","ToolbarView","avatarSrc","AppBar","aria-controls","aria-haspopup","toUpperCase","split","Popover","ToolbarController","Toolbar","grow","customAppBar","breakpoints","up","values","sm","ChatHeaderView","closeChat","noWrap","ChatHeaderController","idContact","setActiveChatWith","find","ChatHeader","useMessageStyle","marginBottom","info","light","contrastText","timeMessage","typography","subtitle2","mymsg","notmymsg","msgAvatar","myMsgAvatar","notMyMsgAvatar","doneIcon","Message","msgStyle","avatarStyle","options","locale","es","date","formatRelative","stateIcon","lightGreen","useChatStyle","offset","mixins","toolbar","offsetDown","ChatBodyView","messages","element","document","getElementById","scrollTop","scrollHeight","elem","arr","ChatBodyController","initConversation","userDate","errorLoadConversation","readerId","messengerId","messengerSocketId","ChatBody","appBar","textarea","fontFamily","maxHeight","ChatEditorView","sendMessage","refAreaTexto","keyPress","role","contentEditable","ref","ChatEditorController","addMsgToConversation","setConsecutive","innerText","replace","prev","userDestinyId","toSocketId","focus","ChatEditor","ChatView","Chat","SignUp","onSignUp","emailState","onEmailChange","passState","onPassChange","nameState","onNameChange","lastNameRef","signup","justify","SignupController","setEmailState","setPassState","setNameState","userCreated","duplicated","Signup","Alert","NotificationView","setNotState","reason","Snackbar","Notification","ChangePassView","pass2State","onPass2Change","submitPass","invalidPass","repeatPassword","passNotEqual","changePass","withRouter","setPass2State","match","params","passChangeOk","passChangeError","ChangePass","paddingTop","actionsContainer","Stepper","combo","minWidth","avatarPink","getContrastText","pink","avatarBlue","blueGrey","avatarButton","avatarEdit","ActivateUserView","activeStep","handleFinish","handleLanguageChange","sexSelectHandler","sexState","nicknameState","setNicknameHandler","preview","setPreview","goNextConf","goBackConf","sendActivation","activationError","avatarRef","hello","hello1","descriptionText","orientation","Step","StepLabel","labelIdioma","StepContent","FormControl","Select","next","labelSexo","back","labelNickname","labelAvatar","onCrop","closeIconColor","choosefile","label1","label3","content3","goLogin","setIdioma","setActiveStep","setActivationError","setSexState","setNickname","previewAvatar","setPreviewAvatar","ActivateUser","UserSubscriber","enqueueSnackbar","useSnackbar","on","connected","off","disconnected","IncomingMsgSubscriber","setConvertation","newStateObj","myMsg","active","novistos","DeclinedFriendshipSubscriber","useNotifications","socketIdDecliner","declinedInv","RequestFriendSubscriber","requestedInv","AcceptedFriendshipSubscriber","socketIdAccepter","accept","DeletedContactSubscriber","socketIdDeleter","BlokedContactSubscriber","RecibedMessageSubscriber","editMsgToStateSaved","editAllMsgToReaded","activeChatContactId","socketIdSender","writingYou","soketIdContact","useRefreshToken","setTokenTimeout","new_token","new_refresh_token","new_token_expires","new_refresh_token_expires","TimerCmp","refreshToken","timeoutData","setTimeout","App","subscribe","chatWith","notistackRef","createRef","onClickDismiss","closeSnackbar","cmp","path","exact","render","maxSnack","preventDuplicate","from","isLocalhost","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","StrictMode","URL","process","href","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.21c85ae5.chunk.js","sourcesContent":["\r\nimport {atom, selector} from 'recoil';\r\n\r\nconst getDefaultLanguage= () => {\r\n    let idioma = 'en';\r\n    var userLang = navigator.language || navigator.userLanguage;\r\n    if(/^(es-).+/.test(userLang)){\r\n        idioma = 'es';\r\n    }\r\n    return idioma;\r\n}\r\n\r\nconst idiomaState = atom({\r\n    key: 'idiomaState',\r\n    default: getDefaultLanguage()\r\n});\r\n\r\nconst loginData = atom({\r\n    key: 'loginData',\r\n    default: null\r\n});\r\nconst userAvatarState = atom({\r\n    key: 'userAvatarState',\r\n    default: null\r\n});\r\n\r\n\r\n\r\nconst chatConversation = atom({\r\n    key: 'chatConversation',\r\n    default: {\r\n        'active': false\r\n    }\r\n});\r\n\r\nconst contactListState = atom({\r\n    key: 'contactListState',\r\n    default: []\r\n});\r\n\r\n\r\nconst view = {\r\n    posibleViews: {\r\n        LOGIN: 'LOGIN',\r\n        CONTACTS: 'CONTACTS',\r\n        CHAT: 'CHAT'\r\n    },\r\n    getAtom: atom({\r\n        key: 'view',\r\n        default: 'LOGIN'\r\n    })\r\n};\r\n\r\nconst backdropState = atom({\r\n    key: 'backdropState',\r\n    default: false\r\n});\r\n\r\nconst subscribeToEventsState = atom({\r\n    key: 'subscribeToEventsState',\r\n    default: false\r\n})\r\n\r\nconst addContactViewOpenState = atom({\r\n    key: 'addContactViewOpenState',\r\n    default: false\r\n});\r\n\r\nconst friendsAtom = atom({\r\n    key: 'friendsAtom',\r\n    default: []\r\n});\r\n\r\nconst activeChatWith = atom({\r\n    key: 'activeChatWith',\r\n    default: null\r\n});\r\n\r\nconst getConversationWithContact = contactId => atom({\r\n    key: `conversationWith_${contactId}`,\r\n    default: []\r\n});\r\n\r\nconst messagesAtom = atom({\r\n    key: 'messagesAtom',\r\n    default: null\r\n});\r\n\r\nconst tokenTimeoutAtom = atom({\r\n    key: 'tokenTimeoutAtom',\r\n    default: {\r\n        tokentimeout: 0\r\n    }\r\n});\r\n\r\nexport {idiomaState, loginData, chatConversation, view, contactListState, subscribeToEventsState, \r\n    backdropState, userAvatarState, addContactViewOpenState,\r\n    friendsAtom, \r\n    activeChatWith, messagesAtom, getConversationWithContact, tokenTimeoutAtom\r\n};","import {atom} from 'recoil';\r\n\r\nconst notificationAtom = atom({\r\n    key: \"notificationAtom\",\r\n    default: {\r\n        open: false,\r\n        autoHideDuration: 6000,\r\n        severity: 'success',\r\n        msg: \"\"\r\n    }\r\n});\r\n\r\nexport {notificationAtom};","import React from 'react';\r\nimport {useRecoilState} from 'recoil'\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\nconst NotificationHook = () => {\r\n    \r\n    const [notificationState, setNotificationState] = useRecoilState(notificationAtom);\r\n\r\n    const defaultToOpem = {\r\n        ...notificationState,\r\n        open: true,\r\n        autoHideDuration: 3000\r\n    };\r\n\r\n    const openNotification = properties => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            ...properties\r\n        });\r\n    }\r\n\r\n    const openSpecificNotification = (severity, msg) => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            severity: severity,\r\n            msg: msg\r\n        });\r\n    }\r\n\r\n    const openSuccessNotification = msg => {\r\n        openSpecificNotification(\"success\",msg);\r\n    }\r\n\r\n    const openWarningNotification = msg => {\r\n        openSpecificNotification(\"warning\",msg);\r\n    }\r\n\r\n    const openErrorNotification = msg => {\r\n        openSpecificNotification(\"error\",msg);\r\n    }\r\n\r\n    const openInfoNotification = msg => {\r\n        openSpecificNotification(\"info\",msg);\r\n    }\r\n\r\n    return {    \r\n        openNotification: openNotification,\r\n        openSuccessNotification: openSuccessNotification,\r\n        openErrorNotification: openErrorNotification,\r\n        openInfoNotification: openInfoNotification,\r\n        openWarningNotification: openWarningNotification\r\n    };\r\n\r\n}\r\nexport default NotificationHook;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@material-ui/core';\r\nimport text from './idioma.json';\r\n\r\n\r\n\r\nconst ForgotPassView = ({idioma, forgetPassHandler, forgotWinState, forgotWinOk, onChangeForgotEmail, forgotEmailState}) => {\r\n\r\n    return (\r\n        <Dialog open={forgotWinState} onClose={forgetPassHandler} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">{text.title[idioma]}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {text.forgotText[idioma]}\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label={text.email[idioma]}\r\n            type=\"email\"\r\n            fullWidth\r\n            onChange={onChangeForgotEmail}\r\n            value={forgotEmailState.value}\r\n            helperText={!forgotEmailState.valid ? text.invalidEmail[idioma] : ''}\r\n            error={!forgotEmailState.valid}\r\n\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={forgetPassHandler} color=\"primary\">\r\n            {text.forgotBtnCancel[idioma]}\r\n          </Button>\r\n          <Button onClick={forgotWinOk} color=\"primary\">\r\n            {text.forgotBtnOk[idioma]}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n\r\n}\r\nexport default ForgotPassView;","const DEV = {\r\n    server: \"http://localhost:3001\"\r\n}\r\nconst PROD = {\r\n    server: \"https://shut-app-back.herokuapp.com\"\r\n}\r\n\r\nexport const DEFAULT_CONFIG = process.env.NODE_ENV === \"development\" ? DEV : PROD;","import React, {useState} from 'react';\r\nimport NotificationHook from '../../../components/uiComponents/notification/notification.hook';\r\nimport text from './idioma.json';\r\nimport ForgotPassView from './forgotPass.view';\r\nimport axios from 'axios';\r\nimport {DEFAULT_CONFIG} from '../../../conf/configuration';\r\n\r\n\r\nconst ForgotPassController = ({idioma, forgotWinState, forgetPassHandler}) => {\r\n\r\n    const [forgotEmailState, setForgotEmailStste] = useState({value:'', valid:true});\r\n    const {openSuccessNotification, openErrorNotification} = NotificationHook();\r\n\r\n    const onChangeForgotEmail = ({target: {value}}) => {\r\n        setForgotEmailStste({...forgotEmailState, valid: true, value: value});\r\n    }\r\n\r\n    const forgotWinOk = () => {        \r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(forgotEmailState.value)){\r\n            setForgotEmailStste({...forgotEmailState, valid: false});\r\n        }else{\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/forgot`, {\r\n                email: forgotEmailState.value,\r\n                hostname: window.location.host\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 201){\r\n                    // Send a notification\r\n                    openSuccessNotification(text.emailSended[idioma]);\r\n                }\r\n                forgetPassHandler();\r\n\r\n            })\r\n            .catch(err => {\r\n                if(err.response.status === 404){\r\n                    openErrorNotification(text.emailNotFound[idioma]);\r\n                }else{\r\n                    openErrorNotification(text.error[idioma]);\r\n                }\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n    return <ForgotPassView \r\n        idioma={idioma}\r\n        forgotWinState={forgotWinState}\r\n        onChangeForgotEmail={onChangeForgotEmail}\r\n        forgotWinOk={forgotWinOk}\r\n        forgotEmailState={forgotEmailState}\r\n        setForgotEmailStste={setForgotEmailStste}\r\n        forgetPassHandler={forgetPassHandler}\r\n    />;\r\n\r\n}\r\nexport default ForgotPassController;","import React from 'react';\r\nimport ForgotPassController from './forgotPass.controller';\r\n\r\nconst ForgotPass = props => {\r\n\r\n    return <ForgotPassController {...props}/>;\r\n\r\n}\r\nexport default ForgotPass;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport RouterLink from 'react-router-dom/Link';\r\nimport ForgotPass from './forgotpass';\r\nimport text from './idioma.json'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  link: {\r\n    cursor: 'pointer'\r\n  }\r\n}));\r\n\r\nexport default function SignIn({idioma, emailRef, passRef, onSignIn, rememberChecked, onRememberChange, \r\n  forgetPassHandler, forgotWinState}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {text.signin[idioma]}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label={text.email[idioma]}\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            inputRef={emailRef}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label={text.password[idioma]}\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            inputRef={passRef}\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" checked={rememberChecked} onChange={onRememberChange}/>}\r\n            label={text.rememberme[idioma]}\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={onSignIn}            \r\n          >\r\n            {text.signin[idioma]}\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Link className={classes.link} onClick={forgetPassHandler}>\r\n                {text.forgotpassword[idioma]}\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <RouterLink to=\"/signup\">\r\n                {text.gosignup[idioma]}\r\n              </RouterLink>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <ForgotPass idioma={idioma} forgotWinState={forgotWinState} forgetPassHandler={forgetPassHandler}/>\r\n\r\n    </Container>\r\n  );\r\n}","import openSocket from 'socket.io-client'; \r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nlet socket;\r\n\r\nconst socketClient = \r\n {   \r\n    getSocket: () => {\r\n        if(!socket){\r\n            socket = openSocket(DEFAULT_CONFIG.server);\r\n            return socket;    \r\n        }\r\n        return socket;\r\n    },\r\n    close: () => {\r\n        socket.close();\r\n    }\r\n};\r\n\r\nexport default socketClient;","const AuthMiddleware = async (nextOptimisticAction) => {\r\n    // Revisar si el token esta en timepo\r\n    const token = localStorage.getItem('token');\r\n    const token_expires = localStorage.getItem('token_expires');\r\n\r\n    if (token && token_expires && new Date(token_expires).getTime() > new Date().getTime()) {\r\n      const dataOptimistic = await nextOptimisticAction(token);\r\n      return dataOptimistic;\r\n    } \r\n  }\r\n\r\n  \r\n  export default AuthMiddleware;","import React, {useRef, useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useSetRecoilState, useRecoilState} from 'recoil';\r\nimport {idiomaState, /*authTokenState,*/ userAvatarState, loginData, tokenTimeoutAtom} from '../../components/recoil/atoms';\r\nimport Signin from \"./signin.view\";\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport NotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport text from './idioma.json';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\nconst SigninController = props => {\r\n\r\n    const [idioma, setIdiomaState] = useRecoilState(idiomaState);\r\n    //const setAuthTokenState = useSetRecoilState(authTokenState);\r\n    const setUserAvatarState = useSetRecoilState(userAvatarState);\r\n    const setTokenTimeOut = useSetRecoilState(tokenTimeoutAtom);\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const [redirectState, setRedirect] = useState(null);\r\n    const {openErrorNotification} = NotificationHook();\r\n    const emailRef = useRef('');\r\n    \r\n    const passRef = useRef('');\r\n    const [remember, setRemember] = useState(false);\r\n    const [forgotWinState, setforgotWinState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        \r\n        const optimisticAction = token => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/loginWithToken`,{\r\n                token: token\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    const {\r\n                        token, token_expires, _id, nickname, firstName,\r\n                        lastname, email, gender, language, avatarUrl\r\n                    } = resp.data;\r\n    \r\n                    \r\n                    localStorage.setItem('token', token);\r\n                    localStorage.setItem('token_expires', token_expires);\r\n                    setTokenTimeOut({\r\n                        timeleft: token_expires\r\n                    });\r\n    \r\n                    setLoginData({\r\n                        userId: _id, \r\n                        nickname: nickname,\r\n                        firstName: firstName,\r\n                        lastName: lastname,\r\n                        email: email,\r\n                        gender: gender\r\n                    });\r\n                    setIdiomaState(language);\r\n                    setUserAvatarState(`${DEFAULT_CONFIG.server}${avatarUrl}`);\r\n\r\n                    setRedirect(true);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log('Error al cargar los datos del usuario usando el token');\r\n            })\r\n        }\r\n        \r\n        authMiddleware(optimisticAction);\r\n\r\n\r\n\r\n        if(localStorage.email && localStorage.password && localStorage.rememberme){\r\n            emailRef.current.value = localStorage.email;\r\n            passRef.current.value = localStorage.password;\r\n            setRemember(true);\r\n        }\r\n    },[])\r\n\r\n    const forgetPassHandler = () => {\r\n        setforgotWinState(!forgotWinState);\r\n    }\r\n\r\n    \r\n\r\n    const onSignIn = (event) => {\r\n        event.preventDefault();\r\n        \r\n        if(remember === true){\r\n            localStorage.setItem('email', emailRef.current.value);\r\n            localStorage.setItem('password', passRef.current.value);\r\n            localStorage.setItem('rememberme', true);\r\n        }else{\r\n            localStorage.removeItem('email');\r\n            localStorage.removeItem('password');\r\n            localStorage.removeItem('rememberme');\r\n        }\r\n\r\n        axios.post(`${DEFAULT_CONFIG.server}/users/login`, {\r\n            email: emailRef.current.value,\r\n            password: passRef.current.value\r\n        })\r\n        .then(resp => {\r\n            if(resp.status === 200){\r\n                \r\n                const {\r\n                    token, token_expires, _id, nickname, firstName,\r\n                    lastname, email, gender, language, avatarUrl,\r\n                    refresh_token, refresh_token_expires\r\n                } = resp.data;\r\n\r\n                \r\n                localStorage.setItem('token', token);\r\n                localStorage.setItem('refresh_token', refresh_token);\r\n                localStorage.setItem('token_expires', token_expires);\r\n                localStorage.setItem('refresh_token_expires', refresh_token_expires);\r\n                setTokenTimeOut({\r\n                    timeleft: token_expires\r\n                });\r\n\r\n                setLoginData({\r\n                    userId: _id, \r\n                    nickname: nickname,\r\n                    firstName: firstName,\r\n                    lastName: lastname,\r\n                    email: email,\r\n                    gender: gender\r\n                });\r\n                setIdiomaState(language);\r\n                setUserAvatarState(`${DEFAULT_CONFIG.server}${avatarUrl}`);\r\n\r\n                setRedirect(true);\r\n\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if(err.response.status === 403){\r\n                openErrorNotification(text.notAuthorized[idioma]);\r\n            }else{\r\n                openErrorNotification(text.internalError[idioma]);\r\n            }\r\n        });\r\n    }\r\n\r\n    if(redirectState){\r\n        return <Redirect to=\"/contacts\" />\r\n    }\r\n    \r\n    return <Signin idioma={idioma} \r\n        emailRef={emailRef}\r\n        passRef={passRef}\r\n        rememberChecked={remember}\r\n        onRememberChange={event => setRemember(event.target.checked)}\r\n        onSignIn={onSignIn}\r\n        forgotWinState={forgotWinState}\r\n        forgetPassHandler={forgetPassHandler}\r\n    />;\r\n\r\n}\r\n\r\nexport default SigninController;\r\n","import React from 'react';\r\nimport SigninController from './signin.controller';\r\nconst Signin = props => {\r\n\r\n    return <SigninController />;\r\n\r\n}\r\nexport default Signin;","import {selector} from 'recoil';\r\n\r\nimport {friendsAtom, idiomaState, messagesAtom, getConversationWithContact} from './atoms';\r\n\r\nconst friendSelector = selector({\r\n    key: 'friendSelector',\r\n    get: ({get}) => {\r\n        if(get(friendsAtom).length > 0){\r\n            const friends = [...get(friendsAtom)];\r\n\r\n            return friends.sort(\r\n                (f1,f2) => {\r\n                    \r\n                    if(f1.friendShipStatus === 1 && f2.friendShipStatus === 1){\r\n                        if(f1.socketId && !f2.socketId) return -1;\r\n                        if(!f1.socketId && f2.socketId) return 1;    \r\n                    }\r\n                    if(f1.friendShipStatus < f2.friendShipStatus) return -1; \r\n                    if(f1.friendShipStatus > f2.friendShipStatus) return 1;\r\n                    if(f1.email < f2.email) return -1; \r\n                    if(f1.email > f2.email) return 1; \r\n                }\r\n            );\r\n        }else{\r\n            return [];\r\n        }\r\n        \r\n    },\r\n    set: async ({set, get}, {action, payload}) => {\r\n\r\n        switch(action){\r\n            case 'initialize': \r\n                set(friendsAtom, oldFriends => {\r\n                    if(oldFriends.length === 0){\r\n                        return payload.friends;\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                break;\r\n            case 'add':\r\n                set(friendsAtom, oldFriends => {\r\n                    const friends = [...oldFriends];\r\n                    friends.push(payload.friend);\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'update':\r\n                set(friendsAtom, oldFriends => {\r\n                    const fIndex = oldFriends.findIndex(f => f.contactId === payload.friend.contactId);\r\n                    const friends = oldFriends.slice(0, fIndex)\r\n                                            .concat([payload.friend])\r\n                                            .concat(oldFriends.slice(fIndex+1));\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'reset_cant_no_leidos':\r\n                set(friendsAtom, oldFriends => {\r\n                    const index = oldFriends.findIndex(friend => friend.contactId === payload.contactId);\r\n                    return oldFriends.slice(0, index).concat([{...oldFriends[index], unread: 0}]).concat(oldFriends.slice(index+1));\r\n                });\r\n                break;\r\n            case 'set_message_info': // Para poner la cantidad de mensajes sin leer, el ultimo mensaje y la fecha del ultimo mensaje\r\n                set(friendsAtom, oldFriends => {\r\n                    const data = payload.dataObj;\r\n                    const newFriends = oldFriends.map(friend => {\r\n                        if(data[friend.contactId]){\r\n                            let cantidad = 0;\r\n                            if(friend.unread){\r\n                                cantidad = friend.unread;\r\n                            }\r\n                            if(data[friend.contactId].cantidad){\r\n                                cantidad += data[friend.contactId].cantidad; \r\n                            }\r\n                            return {...friend, \r\n                                unread:  cantidad,\r\n                                lastMsg: data[friend.contactId].lastMessage,\r\n                                datetime: data[friend.contactId].datetime\r\n                            }\r\n                        }\r\n                        return friend;\r\n                    });\r\n                    return newFriends;\r\n                });\r\n            break;\r\n            case 'delete':\r\n                set(friendsAtom, oldFriends => {\r\n                    return oldFriends.filter(f => f.contactId !== payload.friendId);\r\n                });\r\n                break;\r\n            case 'connect':                \r\n                if(Array.isArray(payload.data)){\r\n                    console.log(payload.data);\r\n                    \r\n\r\n                    \r\n                    set(friendsAtom, oldFriends => {\r\n        console.log(oldFriends);\r\n                        return oldFriends.map(friend => {\r\n                            const idx = payload.data.findIndex(dat => dat.userId === friend.contactId);\r\n                            if(idx >= 0){\r\n                                return {...friend, socketId: payload.data[idx].socketId};     \r\n                            }\r\n                            \r\n                            return {...friend};\r\n                        });\r\n                    }); \r\n                }else{\r\n\r\n                    const {userId, socketId} = payload.data;\r\n                    let conectedFriendName = null;\r\n                    let friendShipStatus = 0;\r\n                    \r\n                    set(friendsAtom, oldFriends => {\r\n                        const fIndex = oldFriends.findIndex(f => f.contactId === userId);\r\n                        if(fIndex >= 0){\r\n                            conectedFriendName = oldFriends[fIndex].nickname;\r\n                            friendShipStatus = oldFriends[fIndex].friendShipStatus;\r\n                            const updatedFriend = {...oldFriends[fIndex], socketId: socketId };\r\n                        \r\n                            const friends = oldFriends.slice(0, fIndex)\r\n                                                    .concat([updatedFriend])\r\n                                                    .concat(oldFriends.slice(fIndex+1));\r\n                            return friends;\r\n                        }\r\n                        return oldFriends;\r\n                    });\r\n                    if(conectedFriendName && friendShipStatus === 1)\r\n                        payload.notification(`${conectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'info'});\r\n                }                \r\n                break;\r\n            case 'disconnect':\r\n                let disconectedFriendName = null;\r\n                let friendShipStatus = 0;\r\n                \r\n                set(friendsAtom, oldFriends => {\r\n                    \r\n                    const index = oldFriends.findIndex(friend => friend.socketId === payload.socketId);\r\n                    if(index >= 0){\r\n                        disconectedFriendName = oldFriends[index].nickname;\r\n                        friendShipStatus = oldFriends[index].friendShipStatus;\r\n                        return [...oldFriends].slice(0, index).concat([{...oldFriends[index], socketId: null}]).concat(oldFriends.slice(index+1));\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                if(disconectedFriendName && friendShipStatus === 1)\r\n                    payload.notification(`${disconectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'warning'});\r\n                break;\r\n            \r\n                default: break;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst messageStates = {\r\n    'NINGUNO': 0, // Cuando no es enviado por el propio usuario, sino que se lo enviaron a el, por lo que los estados no tienen sentido para este tipo de mensajes\r\n    'ENVIADO': 1,\r\n    'GUARDADO': 2,\r\n    'LEIDO': 3\r\n};\r\n\r\nconst initConversationSelector = selector({\r\n    key:'conversationSelector',\r\n    set: ({set}, {contactId, conversation}) => {\r\n\r\n        const getMessageState = (userOriginId, UserDestinyId, contactId, readed) => {\r\n\r\n            if(userOriginId === contactId){\r\n                return 0;\r\n            }else if(UserDestinyId === contactId){\r\n                return readed ? 3 : 2;\r\n            }\r\n        }\r\n\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return conversation.map(message => {\r\n                return {\r\n                    _id: message._id,\r\n                    content: message.content,\r\n                    datetime: message.datetime,\r\n                    state: getMessageState(message.userOrigin, message.userDestiny, contactId, message.readed)\r\n                };\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nconst addMsgToConversationSelector = selector({\r\n    key: 'addMessageToConversation',\r\n    set: ({set}, {contactId, messageId, content, datetime, state}) => {\r\n        const newMessageObj = {\r\n            _id: messageId,\r\n            content: content,\r\n            datetime: datetime,\r\n            state: state\r\n        };        \r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation.concat([newMessageObj]);\r\n        });\r\n\r\n    }\r\n});\r\n\r\n\r\nconst editMsgToStateSavedSelector = selector({\r\n    key: 'editMsgToStateSavedSelector',\r\n    set: ({set}, {contactId, messageId, datetime, consecutive}) => {\r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            \r\n            const index = oldConversation.findIndex(message => message._id === consecutive && message.state === 1);\r\n            if(index >= 0){\r\n                const modMessage = {...oldConversation[index], state: 2, _id: messageId, datetime: datetime};\r\n                return oldConversation.slice(0, index).concat([modMessage]).concat(oldConversation.slice(index+1));\r\n            }\r\n            return oldConversation;\r\n        });\r\n    }\r\n});\r\n\r\nconst editAllMsgToReadedSelector = selector({\r\n    key: 'editAllMsgToSavedSelector',\r\n    set: ({set}, {contactId}) => {\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation\r\n                .map(message => {\r\n                    if(message.state !== 0)\r\n                        return {...message, state: 3}\r\n                    else\r\n                        return message;\r\n                });\r\n        });\r\n    }\r\n});\r\n\r\nexport {friendSelector, initConversationSelector, addMsgToConversationSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector}","import React from 'react';\r\nimport axios from 'axios';\r\nimport {useSetRecoilState} from 'recoil';\r\nimport authMidleware from '../authMiddleware';\r\nimport useNotificationHook from '../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\n\r\nconst useAxiosHook = () => {\r\n\r\n    const {openErrorNotification, openSuccessNotification} = useNotificationHook();\r\n\r\n    const postRequest = ({url, bodyParams= {}, doFnAfterSuccess=null, doFnAfterError = null, messageOnSuccess=null, messageOnError=null}) => {\r\n        \r\n        const optimisticAction = token => {\r\n            axios.post(`${DEFAULT_CONFIG.server}${url}`, \r\n                bodyParams, \r\n                {\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(messageOnSuccess) openSuccessNotification(messageOnSuccess);\r\n                    if(doFnAfterSuccess) doFnAfterSuccess(resp, token);\r\n                })\r\n                .catch(err => {\r\n                    if(messageOnError) openErrorNotification(messageOnError);\r\n                    if(doFnAfterError) doFnAfterError(err);\r\n                })\r\n        }\r\n        /*const pesimisticAction = () => {            \r\n            clearUserData();\r\n        }*/\r\n        \r\n        authMidleware(optimisticAction/*, pesimisticAction*/);\r\n    };   \r\n\r\n\r\n    return {postRequest};\r\n\r\n}\r\nexport default useAxiosHook;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport HowToRegIcon from '@material-ui/icons/HowToReg';\r\n\r\nimport text from './idioma.json';\r\n\r\nconst AcceptInvActionView = ({idioma, onClick}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <HowToRegIcon fontSize=\"small\" color=\"primary\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.acceptInv[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default AcceptInvActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport {idiomaState, loginData/*, updateFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../../components/recoil/selectors';\r\nimport { DEFAULT_CONFIG } from '../../../../conf/configuration';\r\nimport useNotificationHook from '../../../../components/uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../../../authMiddleware';\r\nimport AcceptInvActionView from './acceptinv.view';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../../utils/socket';\r\n\r\nconst AcceptInvActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const {openErrorNotification} = useNotificationHook();\r\n    //const switchContact = useSetRecoilState(updateFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n    const onClick = () => {\r\n        preAction();\r\n        const optimisticAction = token => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/acceptFriendRequest`, {\r\n                acceptedUserId: contact.contactId\r\n            }, {\r\n                headers: {\r\n                    \"Authorization\": token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    //switchContact(resp.data.friend);\r\n                    friendDispatcher({action: 'update', payload: {friend: {...resp.data.friend, socketId: contact.socketId}}});\r\n                    const client = socketClient.getSocket();\r\n                    \r\n                    client.emit('accept friendship', {\r\n                        accepterId: userData.userId,\r\n                        socketIdRequester: contact.socketId,\r\n                        token: token\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.errorAccepting[idioma]);\r\n            });\r\n        }\r\n\r\n        authMiddleware(optimisticAction);\r\n        \r\n    }\r\n\r\n    return <AcceptInvActionView \r\n        idioma={idioma}\r\n        onClick={onClick}\r\n    />;\r\n\r\n}\r\nexport default AcceptInvActionController;","import React from 'react';\r\nimport AcceptInvController from './acceptInv.controller';\r\nconst AcceptInv = props => {\r\n\r\n    return <AcceptInvController {...props}/>;\r\n\r\n}\r\nexport default AcceptInv;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\n\r\nconst DeclineInvActionView = ({idioma, text, onClick}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <ThumbDownAltIcon fontSize=\"small\" color=\"error\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.decline[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default DeclineInvActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport {idiomaState, loginData/*, deleteFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport { friendSelector } from '../../../../components/recoil/selectors';\r\nimport authMiddleware from '../../../../authMiddleware';\r\nimport useNotificationHook from '../../../../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../../../../conf/configuration';\r\nimport socketClient from '../../../../utils/socket';\r\n\r\nimport text from './idioma.json'\r\n\r\nimport DeclineInvActionView from './declineinv.view';\r\n\r\n\r\nconst DeclineInvActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotificationHook();\r\n    //const eliminarContacto = useSetRecoilState(deleteFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n\r\n    const onClick = () => {\r\n        preAction();\r\n        const optimisticAction = token => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/declineFriendRequest`, {\r\n                declinedUserId: contact.contactId\r\n            }, {\r\n                headers: {\r\n                    'Authorization': token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    friendDispatcher({action: 'delete', payload: {friendId: contact.contactId}});\r\n                }\r\n            })\r\n            .then(() => {\r\n                const socket = socketClient.getSocket();\r\n                socket.emit('decline friendship', {\r\n                    declinerId: userData.userId,\r\n                    declinedId: contact.contactId,\r\n                    socketIdDeclined: contact.socketId,\r\n                    token: token\r\n                });\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.errorDeclining[idioma]);\r\n            })\r\n        }\r\n\r\n        authMiddleware(optimisticAction);\r\n        \r\n    }\r\n\r\n    return <DeclineInvActionView \r\n        idioma={idioma}\r\n        onClick={onClick}\r\n        text={text}\r\n    />;\r\n\r\n}\r\nexport default DeclineInvActionController;","import React from 'react';\r\nimport DeclineInvController from './declineInv.controller';\r\nconst DeclineInv = props => {\r\n\r\n    return <DeclineInvController {...props}/>;\r\n\r\n}\r\nexport default DeclineInv;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst DeleteActionView = ({idioma, onClick, text}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <DeleteIcon fontSize=\"small\" color=\"error\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.delete[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default DeleteActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, loginData/*, deleteFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../../components/recoil/selectors';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport DeleteActionView from './delete.view';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../../utils/socket';\r\n\r\nconst DeleteActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    //const deleteFriend = useSetRecoilState(deleteFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n\r\n    const onClick = () => {\r\n\r\n        preAction();\r\n        postRequest({\r\n            url: '/users/deleteContact',\r\n            bodyParams: {deletedUserId: contact.contactId},\r\n            messageOnError: text.onDeleteError[idioma],\r\n            doFnAfterSuccess: (resp, token) => {\r\n                if(resp.status === 200){\r\n                    friendDispatcher({action: 'delete', payload: {friendId: contact.contactId}});\r\n\r\n                    if(contact.friendShipStatus === 1){\r\n                        const client = socketClient.getSocket();\r\n                        client.emit('delete contact', {\r\n                            deleterId: userData.userId,\r\n                            socketIdDeleted: contact.socketId,\r\n                            token: token\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return <DeleteActionView \r\n        idioma={idioma}\r\n        text={text}\r\n        onClick={onClick}\r\n    />;\r\n\r\n}\r\nexport default DeleteActionController;","import React from 'react';\r\nimport DeleteController from './delete.controller';\r\nconst DeleteAction = props => {\r\n\r\n    return <DeleteController {...props} />;\r\n\r\n}\r\nexport default DeleteAction;","import React from 'react';\r\n//import { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, ListItemIcon, IconButton, Badge, Divider, Menu, MenuItem } from '@material-ui/core';\r\nimport  MenuItem from '@material-ui/core/MenuItem';\r\nimport  ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport  ListItemText from '@material-ui/core/ListItemText';\r\nimport VoiceOverOffIcon from '@material-ui/icons/VoiceOverOff';\r\n\r\nimport text from './idioma.json';\r\n\r\nconst BlockActionView = ({idioma, onClick}) => {\r\n\r\n    return ( \r\n        <MenuItem onClick={onClick}>\r\n            <ListItemIcon>\r\n                <VoiceOverOffIcon fontSize=\"small\" color=\"error\"/>\r\n            </ListItemIcon>\r\n            <ListItemText primary={text.block[idioma]} />\r\n        </MenuItem>\r\n    );\r\n\r\n}\r\nexport default BlockActionView;","import React from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, loginData/*, deleteFriendSelector*/} from '../../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../../components/recoil/selectors';\r\nimport useAxiosHook from '../../../../utils/axiosHook';\r\nimport BlockActionView from './block.view';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../../utils/socket';\r\n\r\nconst BlockActionController = ({preAction, contact}) => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n    //const deleteContact = useSetRecoilState(deleteFriendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n\r\n    const onClick = () => {\r\n        preAction();\r\n        \r\n        postRequest({\r\n            url: '/users/blockUser',\r\n            bodyParams: {blokedUserId: contact.contactId},\r\n            messageOnError: text.onBlockError[idioma],\r\n            doFnAfterSuccess: (resp, token) => {\r\n                if(resp.status === 200){\r\n                    //deleteContact(contact.contactId);\r\n                    friendDispatcher({action: 'delete', payload: {friendId: contact.contactId}});\r\n                    const client = socketClient.getSocket();\r\n                    client.emit('block contact', {\r\n                        blokerId: userData.userId, \r\n                        socketIdBloked: contact.socketId,\r\n                        token: token\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return <BlockActionView \r\n        idioma={idioma}\r\n        onClick={onClick}\r\n    />;\r\n\r\n}\r\nexport default BlockActionController;","import React from 'react';\r\nimport BlockController from './block.controller';\r\nconst BlockAction = props => {\r\n\r\n    return <BlockController {...props}/>;\r\n\r\n}\r\nexport default BlockAction;","import React from 'react';\r\n\r\nimport AcceptInv from './acceptInvAction';\r\nimport DeclineInv from './declineInvAction';\r\nimport DeleteFriend from './deleteAction';\r\nimport BlockContact from './blockAction';\r\n/*\r\n    1- ACEPTED -> Eliminar, Bloquear\r\n    2- REQUESTED -> Cancelar, Bloquear\r\n    3- ASKED -> Aceptar, Cancelar, bloquear\r\n    4- DECLINED -> Cancelar, Bloquear\r\n    5- Blocked -> Eliminar\r\n    6- Deleted -> Eliminar\r\n*/\r\n\r\nconst ContactActionProxy = ({handleClose, contact}) => {\r\n    \r\n\r\n    const preAction = () => {\r\n        handleClose()\r\n    }\r\n\r\n    \r\n    \r\n    switch(contact.friendShipStatus){\r\n        case 1: return (\r\n            <>\r\n                <DeleteFriend  preAction={preAction} contact={contact}/>\r\n                <BlockContact  preAction={preAction} contact={contact}/>\r\n            </>\r\n            );\r\n        case 2: return (\r\n            <>\r\n                <DeclineInv preAction={preAction} contact={contact}/>\r\n                <BlockContact preAction={preAction} contact={contact}/>\r\n            </>\r\n        ); \r\n        case 3: return (\r\n            <>\r\n                <AcceptInv  preAction={preAction} contact={contact}/>\r\n                <DeclineInv  preAction={preAction} contact={contact}/>\r\n                <BlockContact  preAction={preAction} contact={contact}/>\r\n            </>\r\n        );\r\n        case 4: return (\r\n            <>\r\n                <DeleteFriend  preAction={preAction} contact={contact}/>\r\n                <BlockContact  preAction={preAction} contact={contact}/>\r\n            </>\r\n        );\r\n        case 5: return <DeleteFriend  preAction={preAction} contact={contact}/>;\r\n        case 6: return <DeleteFriend  preAction={preAction} contact={contact}/>;\r\n        default: return null;\r\n    }\r\n}\r\n\r\nexport default ContactActionProxy;","import React from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport { ListItem, ListItemAvatar, Avatar, ListItemText, ListItemSecondaryAction, IconButton, Badge, Divider, Menu, Tooltip } from '@material-ui/core';\r\nimport { red, green } from '@material-ui/core/colors';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nimport {DEFAULT_CONFIG} from '../../../conf/configuration';\r\n\r\nimport text from './idioma.json';\r\n\r\nimport ActionProxy from './contactAction.proxy';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    infoIcon: {\r\n        marginRight: '-12px',\r\n        overflow: 'visible',\r\n        textAlign: 'center',\r\n        flex: '0 0 auto',\r\n        \r\n        color: 'rgba(0, 0, 0, 0.54)',\r\n        padding: '12px',\r\n        fontSize: '1.5rem',\r\n        transition: 'background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\r\n        borderRadius: '50%',\r\n\r\n        \r\n        border: 0,\r\n        cursor: 'pointer',\r\n        margin: 0,\r\n        display: 'inline-flex',\r\n        outline: 0,\r\n        \r\n        position: 'relative',\r\n        alignItems: 'center',\r\n        userSelect: 'none',\r\n        \r\n        verticalAlign: 'middle',\r\n        \r\n        justifyContent: 'center',\r\n        textDecoration: 'none'\r\n    },\r\n    listItemText: {\r\n        paddingRight: theme.spacing(10)\r\n    }\r\n}));\r\n\r\nconst OnlineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: '$ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OfflineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: theme.palette.grey[500],\r\n        color: theme.palette.grey[500],\r\n        \r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OnlineBadge = props => {\r\n    \r\n    if(props.contact.socketId && props.contact.friendShipStatus === 1){\r\n        return (<OnlineStyledBadge\r\n                overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    variant=\"dot\"\r\n                >\r\n                    {props.children}\r\n                </OnlineStyledBadge>)\r\n            ;\r\n    }\r\n    else {\r\n        return (<OfflineStyledBadge\r\n            overlap=\"circle\"\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                variant=\"dot\"\r\n            >\r\n                {props.children}\r\n            </OfflineStyledBadge>)\r\n        ;\r\n    }\r\n}\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n      border: '1px solid #d3d4d5',\r\n    },\r\n  })((props) => (\r\n    <Menu\r\n      elevation={0}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n      }}\r\n      {...props}\r\n    />\r\n  ));\r\n\r\nconst useCustomTooltipGreenStyle = makeStyles((theme) => ({\r\n    arrow: {\r\n      color: green[500]\r\n    },\r\n    tooltip: {\r\n      backgroundColor: green[500]\r\n    },\r\n  }));\r\n  const useCustomTooltipRedStyle = makeStyles((theme) => ({\r\n    arrow: {\r\n      color: red[500]\r\n    },\r\n    tooltip: {\r\n      backgroundColor: red[500]\r\n    },\r\n  }));\r\nconst CustomTooltip = props => {\r\n    const classesRed = useCustomTooltipRedStyle();\r\n    const classesGreen = useCustomTooltipGreenStyle();\r\n\r\n    return <Tooltip arrow classes={props.color === 'red' ? classesRed : classesGreen} {...props} />;\r\n}\r\n\r\n\r\nconst ContactView = React.memo(\r\n    ({idioma, contact, handleMenu,\r\n    handleClose, anchorEl, openChat}) => {\r\n    const lastMsg = contact.lastMsg ? contact.lastMsg : '' ;\r\n    \r\n    const classes = useStyle();\r\n\r\n    const labelId = `checkbox-list-secondary-label-${contact.email}`;\r\n    return (<React.Fragment key={contact.email}>\r\n        <ListItem button onClick={openChat}>\r\n            <ListItemAvatar>\r\n                {\r\n                <OnlineBadge contact={contact}>\r\n                    {contact.unread && contact.unread > 0 \r\n                    ? <Badge color=\"secondary\" badgeContent={contact.unread}>\r\n                        <Avatar\r\n                            alt={`Avatar n°${contact.nickname}`}\r\n                            src={`${DEFAULT_CONFIG.server}${contact.avatarUrl}`}\r\n                        />\r\n                    </Badge>\r\n                    : <Avatar\r\n                            alt={`Avatar n°${contact.nickname}`}\r\n                            src={`${DEFAULT_CONFIG.server}${contact.avatarUrl}`}\r\n                        />\r\n                    }\r\n                </OnlineBadge>\r\n                }\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                id={labelId}\r\n                primary={contact.nickname}\r\n                secondary={contact.friendShipStatus > 1 ? text[contact.friendShipStatusCode][idioma] : `${lastMsg.slice(0, 55)}...`}\r\n                secondaryTypographyProps={contact.friendShipStatus > 3 \r\n                    ? {\r\n                        style: {color: `${red[500]}`}\r\n\r\n                    } \r\n                    : contact.friendShipStatus < 4 && contact.friendShipStatus > 1 ? {\r\n                        style: {color: `${green[500]}`}\r\n                    } : {}\r\n                }\r\n                className={classes.listItemText}\r\n            />\r\n            \r\n            <ListItemSecondaryAction>\r\n                {contact.friendShipStatus > 1 ?\r\n                    <CustomTooltip title={text[`desc${contact.friendShipStatusCode}`][idioma]} color={contact.friendShipStatus > 3 ? 'red' : 'geen'}>\r\n                        <div className={classes.infoIcon}>\r\n                            <InfoIcon fontSize=\"small\" style={{color: contact.friendShipStatus > 3 ? red[500] : green[500]}}/>\r\n                        </div>\r\n                    </CustomTooltip>\r\n                : null }\r\n                \r\n                <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleMenu}>\r\n                    <MoreVertIcon fontSize=\"default\"/>\r\n                </IconButton>\r\n                <StyledMenu\r\n                    id=\"customized-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}\r\n                >   \r\n                    <ActionProxy handleClose={handleClose} contact={contact}/>\r\n                </StyledMenu>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n        <Divider variant=\"inset\" component=\"li\" />\r\n        </React.Fragment>\r\n    );\r\n})\r\n\r\n\r\nexport default ContactView;","import React, {useState, useCallback} from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, activeChatWith, loginData} from '../../../components/recoil/atoms';\r\nimport {friendSelector} from '../../../components/recoil/selectors';\r\nimport ContactView from './contact.view';\r\nimport socketClient from '../../../utils/socket';\r\n\r\nconst ContactContrller = ({contact}) => {\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const setActiveChat = useSetRecoilState(activeChatWith);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    \r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    \r\n    const handleClose = useCallback(() => {\r\n        setAnchorEl(null);\r\n    },[]);\r\n\r\n    const openChat = () => {        \r\n        setActiveChat(contact.contactId);\r\n\r\n        // Poner el estado en leidos\r\n        friendDispatcher({\r\n            action: 'reset_cant_no_leidos',\r\n            payload: {\r\n                contactId: contact.contactId,\r\n            }\r\n        });\r\n        // Emit como leidos\r\n        const client = socketClient.getSocket();\r\n        client.emit('read messages', {\r\n            userId: userData.userId,\r\n            contactId: contact.contactId,\r\n            notifyTo: contact.socketId,\r\n            token: localStorage.getItem('token')\r\n        });\r\n    }\r\n\r\n    return <ContactView \r\n        handleMenu={handleMenu}\r\n        handleClose={handleClose}\r\n        contact={contact}\r\n        anchorEl={anchorEl}\r\n        idioma={idioma}\r\n        openChat={openChat}\r\n    />;\r\n\r\n}\r\nexport default ContactContrller;","import React from 'react';\r\n\r\nimport ContactController from './contact.controller';\r\nconst Contact = props => {\r\n\r\n    return <ContactController \r\n        {...props}\r\n    />;\r\n\r\n}\r\nexport default Contact;","import React from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Contact from './contact';\r\n\r\nconst ContactsView = ({idioma, text, contacts}) => {\r\n\r\n    return (\r\n        <List>\r\n            {contacts.length > 0 \r\n                ? contacts.map((contact) => <Contact contact={contact}/>)\r\n                : <>\r\n                <Divider/>\r\n                    <Typography variant=\"h5\" align='justify'>{text.goMakeFriends[idioma]}</Typography>\r\n                    <Divider/>\r\n                    <Typography variant=\"subtitle1\" align='justify' >{text.beta[idioma]}</Typography>\r\n                </>\r\n            }\r\n        </List>\r\n    );\r\n\r\n}\r\nexport default ContactsView;","import React, { useEffect} from 'react';\r\nimport text from './idioma.json';\r\nimport {useRecoilValue, useRecoilState, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, subscribeToEventsState/*friendSelector*/ /*, friendsAtom*/} from '../../components/recoil/atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\n\r\nimport ContactsView from './contacs.view';\r\n\r\n\r\n\r\nconst ContactsController = props => {\r\n\r\n    const setSubscribeToEvents = useSetRecoilState(subscribeToEventsState);\r\n    //const setContacts = useSetRecoilState(friendsAtom);\r\n    const {postRequest} = useAxiosHook();\r\n    \r\n    //const [contacts, addContact] = useRecoilState(friendSelector);\r\n    const [contacts, friendDispatcher] = useRecoilState(friendSelector);\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const getFriendData = () => {\r\n        postRequest({\r\n            url: '/users/getContactData',\r\n            messageOnError: text.errorLoadingFriendsData[idioma],\r\n            doFnAfterSuccess: resp => {\r\n                if(resp.status === 200){\r\n                    friendDispatcher({\r\n                        action: 'set_message_info',\r\n                        payload: {\r\n                            dataObj: resp.data.contactsData\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    const searchFriends = () => {\r\n        console.log('search friendssss');\r\n        \r\n        if(contacts.length === 0){\r\n            console.log('manda a buscar los friends');\r\n            \r\n            postRequest({\r\n                url: '/users/searchFirends',\r\n                messageOnError: text.errorLoadingFriends[idioma],\r\n                doFnAfterSuccess: resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'initialize', \r\n                            payload: {\r\n                                friends: resp.data.friends\r\n                            }});\r\n                        setSubscribeToEvents(true);\r\n                        if(resp.data.friends.length > 0){\r\n                            getFriendData();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }else{\r\n            console.log('NO LOS MANDA A BUSCAR');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        searchFriends();\r\n    }, []);\r\n\r\n    return <ContactsView \r\n        idioma={idioma}\r\n        contacts={contacts}\r\n        text={text}\r\n\r\n    />;\r\n\r\n}\r\n\r\nexport default ContactsController;","import React from 'react';\r\nimport ContactsController from './contacts.controller';\r\nconst Contacts = props => {\r\n\r\n    return <ContactsController />;\r\n\r\n}\r\nexport default Contacts;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\r\nimport text from './idioma.json'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    speedDial: {\r\n      position: 'absolute',\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\nconst MainButtonView = ({idioma, handleOpen, handleClose, open, openAddContactView}) => {\r\n\r\n  const classes = useStyles();\r\n  \r\n\r\n    return (\r\n      <>\r\n        <SpeedDial\r\n            ariaLabel=\"SpeedDial tooltip example\"\r\n            className={classes.speedDial}            \r\n            icon={<SpeedDialIcon />}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            open={open}\r\n        >\r\n          <SpeedDialAction\r\n            key='add'\r\n            icon={<PersonAddIcon color=\"error\"/>}\r\n            tooltipTitle={text.addContact[idioma]}\r\n            tooltipOpen\r\n            onClick={openAddContactView}\r\n          />\r\n          <SpeedDialAction\r\n            key='addgroup'\r\n            icon={<CallSplitIcon color=\"error\"/>}\r\n            tooltipTitle={text.sendAll[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje de difusion');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          {/*<SpeedDialAction\r\n            key='addgroup'\r\n            icon={<GroupAddIcon color=\"error\"/>}\r\n            tooltipTitle={text.addGroup[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Crear un grupo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='send'\r\n            icon={<MessageIcon color=\"error\"/>}\r\n            tooltipTitle={text.sendMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje a un contacto que no esta en tu lista de contacto');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='share'\r\n            icon={<ShareIcon color=\"error\"/>}\r\n            tooltipTitle={text.shareMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Compartir la aplicacion por correo electronivo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />*/}\r\n        </SpeedDial>\r\n      </>\r\n    );\r\n\r\n}\r\nexport default MainButtonView;","import React from 'react';\r\n\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport { blue, red, grey } from '@material-ui/core/colors';\r\n\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport text from './idioma.json';\r\nimport { ListItemSecondaryAction } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n      backgroundColor: blue[100],\r\n      color: blue[600],\r\n    },\r\n    dialogContent: {\r\n      padding: 0\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n          backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },*/\r\n      },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      inputRoot: {\r\n        color: 'inherit',\r\n      },\r\n      inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n          width: '12ch',\r\n          '&:focus': {\r\n            width: '20ch',\r\n          },\r\n        },*/\r\n      },\r\n\r\n  }));\r\n\r\nconst AddContactView = ({idioma, closeAddContactWin, open,\r\n    buscarUsuarios, users,\r\n    inputSearchRef,\r\n    sendFriendRequest\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Dialog\r\n            maxWidth=\"xs\"\r\n            onEntering={() => {}}\r\n            aria-labelledby=\"confirmation-dialog-title\"\r\n            open={open}\r\n            onClose={closeAddContactWin}\r\n        >\r\n            <DialogTitle id=\"confirmation-dialog-title\" className={classes.dialogTitle}>{text.title[idioma]} </DialogTitle>\r\n            <Divider />\r\n            <InputSearch idioma={idioma} buscarUsuarios={buscarUsuarios} inputSearchRef={inputSearchRef}/>\r\n            <DialogContent dividers className={classes.dialogContent}>\r\n                <List style={{minHeight:'200px'}}>\r\n                    {\r\n                        users.map(user => {\r\n                            return (\r\n                                <UserItem user={user} sendFriendRequest={sendFriendRequest}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={closeAddContactWin} color=\"primary\">\r\n                    {text.close[idioma]}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n\r\n}\r\n\r\nconst UserItem = ({user, sendFriendRequest}) => {\r\n\r\n    const classes = useStyles();\r\n    //const [iconButtonDisabledState, setIconButtonDisabledState] = React.useState(false)\r\n\r\n    const disableItem = () => {\r\n        //setIconButtonDisabledState(true);\r\n        sendFriendRequest(user.userId);\r\n\r\n    }\r\n\r\n    return (\r\n        <ListItem key={user.email} >\r\n            <ListItemAvatar>\r\n                <Avatar className={classes.avatar} src={DEFAULT_CONFIG.server + user.avatarUrl}></Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={user.nickname}\r\n                secondary={user.email}\r\n            />\r\n            \r\n                <ListItemSecondaryAction>\r\n                    <IconButton color={user.blockinguser ? grey[100] : blue[300]} onClick={disableItem} disabled={user.blockinguser}>\r\n                        <AddIcon color={user.blockinguser ? 'disabled' : \"primary\"}/>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            \r\n        </ListItem>\r\n    )\r\n\r\n}\r\n\r\nconst InputSearch = ({idioma, buscarUsuarios, inputSearchRef}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [searchState, setSearchState] = React.useState('');\r\n\r\n    const onChangeSearch = ({target: {value}}) => {\r\n        setSearchState(value);\r\n    }\r\n    const clearSearch = () => {\r\n        setSearchState('');\r\n    }\r\n    const keyPressHandler = (event) => {\r\n        if(event.charCode === 13){\r\n            buscarUsuarios();\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className={classes.search}>\r\n                <div className={classes.searchIcon}>\r\n                    <SearchIcon />\r\n                </div>\r\n                <InputBase\r\n                    onKeyPress={keyPressHandler}\r\n                    placeholder={text.search[idioma]}\r\n                    classes={{\r\n                        root: classes.inputRoot,\r\n                        input: classes.inputInput,\r\n                    }}\r\n                    inputProps={{ 'aria-label': 'search' }}\r\n                    value={searchState}\r\n                    onChange={onChangeSearch}\r\n                    inputRef={inputSearchRef}\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            {searchState !== '' ?\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={clearSearch}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            : null}\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={buscarUsuarios}\r\n                            >\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                        </InputAdornment> \r\n                        \r\n                    }\r\n                />\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default AddContactView;","import React, {useState, useEffect, useRef} from 'react';\r\nimport {useRecoilValue, useRecoilState, useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport useNotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport AddContactView from './addContact.view';\r\nimport authMiddleware from '../../authMiddleware';\r\nimport text from './idioma.json';\r\nimport {addContactViewOpenState, loginData/*, friendSelector*/} from '../../components/recoil/atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\n\r\nimport {idiomaState} from '../../components/recoil/atoms'\r\nimport socketClient from '../../utils/socket';\r\n\r\nconst AddContactController = props => {\r\n    const idioma = useRecoilValue(idiomaState); \r\n    const [addContactState, setAddContactState] = useRecoilState(addContactViewOpenState);\r\n    const [users, setUsers] = useState([]);\r\n    const {openErrorNotification} = useNotificationHook();\r\n    const inputSearchRef = useRef({value: ''});\r\n    const userData = useRecoilValue(loginData);\r\n\r\n    //const addContact = useSetRecoilState(friendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    \r\n\r\n    const buscarUsuarios = () => {\r\n        \r\n        const optimisticAction = (token) => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/searchContact`, {\r\n                stringPattern: inputSearchRef.current.value,\r\n                start: 0,\r\n                limit: 20\r\n            }, {\r\n                headers: {\r\n                    \"Authorization\": token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    setUsers(resp.data.users);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.lbErrorLoadingUsers[idioma]);\r\n            });\r\n        }\r\n        authMiddleware(optimisticAction);\r\n    }\r\n\r\n    useEffect(() => {\r\n        buscarUsuarios();\r\n    }, [])\r\n\r\n    const sendFriendRequest = (userId) => {\r\n        \r\n        const optimisticAction = (token) => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/sendFriendRequest`, {\r\n                userId: userId\r\n            }, {\r\n                headers: {\r\n                    \"Authorization\": token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    setUsers(users => {\r\n                        return users.filter(user => user.userId !== userId);\r\n                    });\r\n\r\n                    //addContact(resp.data.friend);\r\n                    friendDispatcher({action: 'add', payload: {friend: resp.data.friend}});\r\n                    \r\n                }\r\n            })\r\n            .then(() => {\r\n                const client = socketClient.getSocket();\r\n                client.emit('request friendship', {\r\n                    userIdRequester: userData.userId,\r\n                    userIdRequested: userId,\r\n                    token: token\r\n                });\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.lbErrorSendigFriendRequest[idioma]);\r\n            });\r\n        }\r\n        authMiddleware(optimisticAction);\r\n    }\r\n\r\n    const closeAddContactWin = () => {\r\n        setAddContactState(false);\r\n    }\r\n\r\n    return <AddContactView \r\n        idioma={idioma}\r\n        closeAddContactWin={closeAddContactWin}\r\n        open={addContactState}\r\n\r\n        users={users}\r\n        buscarUsuarios={buscarUsuarios}\r\n\r\n        inputSearchRef={inputSearchRef} \r\n        sendFriendRequest={sendFriendRequest}\r\n    />;\r\n\r\n}\r\nexport default AddContactController;","import React from 'react';\r\nimport AddContactController from './addContact.controller';\r\n\r\nconst AddContact = props => {\r\n\r\n    return <AddContactController />;\r\n\r\n}\r\n\r\nexport default AddContact;","import React, {useState} from 'react';\r\nimport {useRecoilState, useRecoilValue} from 'recoil';\r\nimport MainButtonView from './mainButton.view';\r\nimport AddContact from '../addContact';\r\n\r\n\r\nimport {idiomaState, addContactViewOpenState} from '../../components/recoil/atoms';\r\n\r\nconst MainButtonController = props => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [addContactViewState,setAddContactViewState] = useRecoilState(addContactViewOpenState);\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    \r\n    const openAddContactView = () => {\r\n        setAddContactViewState(true);\r\n    }\r\n\r\n    return <>\r\n        <MainButtonView \r\n            open={open}\r\n            handleOpen={handleOpen}\r\n            handleClose={handleClose}\r\n            idioma={idioma}\r\n            openAddContactView={openAddContactView}\r\n        />\r\n        {addContactViewState ? <AddContact /> : null}\r\n        \r\n    </>;\r\n\r\n}\r\nexport default MainButtonController;","import React from 'react';\r\nimport MainButtonController from './mainButton.controller';\r\nconst MainButton = props => {\r\n\r\n    return <MainButtonController />;\r\n\r\n}\r\nexport default MainButton;","import React from 'react';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n      padding: 0,\r\n      position: 'relative',\r\n      height: '100vh',\r\n      overflowY: 'hidden'\r\n    }\r\n  }));\r\n\r\nconst MainView = props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" className={classes.container} component=\"main\">\r\n            <CssBaseline />\r\n            {props.children}\r\n        </Container>\r\n    );\r\n\r\n}\r\nexport default MainView;","import React from 'react';\r\nimport ContainerView from './main.view';\r\nconst MainContainer = props => {\r\n\r\n    return <ContainerView {...props}/>;\r\n\r\n}\r\nexport default MainContainer;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CardHeader, Avatar, Badge, IconButton, Divider, List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PhotoCameraOutlinedIcon from '@material-ui/icons/PhotoCameraOutlined';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport BugReportIcon from '@material-ui/icons/BugReport';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport StarIcon from '@material-ui/icons/Star';\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7)\r\n  },\r\n  cardHeaderAction: {\r\n    alignSelf: 'flex-end'\r\n  }\r\n}));\r\n\r\nconst ProfileView = ({text, idioma, avatarUrl, userData, logout}) => {\r\n    console.log(avatarUrl);\r\n    \r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n        <CardHeader\r\n            classes={{\r\n                action: classes.cardHeaderAction\r\n            }}\r\n            avatar={\r\n                <Badge\r\n                    overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right'\r\n                    }}\r\n                    badgeContent={<SmallPhotoCameraButton />}\r\n                >   \r\n                        <Avatar \r\n                            aria-label=\"recipe\" \r\n                            className={classes.avatar} \r\n                            src={avatarUrl}                            \r\n                        />\r\n                    \r\n                </Badge>\r\n            }\r\n            action={\r\n                <Button variant=\"outlined\" onClick={logout}>{text.logout[idioma]}</Button>\r\n            }\r\n            title={userData.nickname}\r\n            subheader={userData.email}\r\n        />\r\n        <Divider />\r\n        \r\n            <List>\r\n                <ListItem \r\n                    button\r\n                    onClick={() => alert('Not implemented')}\r\n                >\r\n                    <ListItemIcon>\r\n                        <EditIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText \r\n                        primary={text.edit[idioma]}\r\n                        primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        //secondary={text.editDesc[idioma]}\r\n                        //secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                    />\r\n                </ListItem>\r\n                <ListItem \r\n                    button\r\n                    onClick={() => alert('Not implemented')}\r\n                >\r\n                    <ListItemIcon>\r\n                        <VpnKeyIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText \r\n                        primary={text.editpass[idioma]}\r\n                        primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        //secondary={text.editpassDesc[idioma]}\r\n                        //secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                    />\r\n                </ListItem>\r\n                <Divider />\r\n                <ListItem \r\n                    button\r\n                    onClick={() => alert('Not implemented')}\r\n                >\r\n                    <ListItemIcon>\r\n                        <ShareIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText \r\n                        primary={text.share[idioma]}\r\n                        primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        secondary={text.shareDesc[idioma]}\r\n                        secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                    />\r\n                </ListItem>\r\n                <ListItem \r\n                    button\r\n                    onClick={() => alert('Not implemented')}\r\n                >\r\n                    <ListItemIcon>\r\n                        <StarIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText \r\n                        primary={text.feedback[idioma]}\r\n                        primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        secondary={text.feedbackDesc[idioma]}\r\n                        secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                    />\r\n                </ListItem>\r\n                <ListItem \r\n                    button\r\n                    onClick={() => alert('Not implemented')}\r\n                >\r\n                    <ListItemIcon>\r\n                        <BugReportIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText \r\n                        primary={text.report[idioma]}\r\n                        primaryTypographyProps={{style: {fontSize: '0.9em'}}}\r\n                        secondary={text.reportDesc[idioma]}\r\n                        secondaryTypographyProps={{style: {fontSize: '0.8em'}}}\r\n                    />\r\n                </ListItem>\r\n            </List>\r\n\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst SmallPhotoCameraButton = () => {\r\n    return (\r\n        <IconButton size=\"small\" style={{backgroundColor:\"white\", boxShadow: '0 0 5px grey'}} onClick={() => alert('Cambiar foto de perfil')}>\r\n            <PhotoCameraOutlinedIcon fontSize=\"small\"/>\r\n        </IconButton>\r\n        \r\n    );\r\n}\r\n\r\nexport default ProfileView;","import {useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport {loginData, userAvatarState, subscribeToEventsState, contactListState, friendsAtom} from '../components/recoil/atoms';\r\nimport { useCallback } from 'react';\r\nimport socketClient from './socket';\r\n\r\nconst useLogout = () => {\r\n\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const setUserAvatar = useSetRecoilState(userAvatarState);\r\n    const setSubscribe = useSetRecoilState(subscribeToEventsState);\r\n    const setContactList = useSetRecoilState(contactListState);\r\n    const setFriends = useSetRecoilState(friendsAtom);\r\n    const client = socketClient.getSocket();\r\n\r\n    return useCallback(() => {\r\n        \r\n        setUserAvatar(null);\r\n        setContactList([]);\r\n        setFriends([]);\r\n        client.emit('logout', {});\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refresh_token');\r\n        localStorage.removeItem('refresh_token_expires');\r\n        localStorage.removeItem('token_expires');\r\n        setSubscribe(false);\r\n        setLoginData(null);\r\n        \r\n        \r\n    });\r\n}\r\nexport default useLogout;","import React from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {loginData, userAvatarState, idiomaState} from '../../../components/recoil/atoms';\r\nimport ProfileOptView from './profileOpt.view';\r\nimport useLogout from '../../../utils/useLogout';\r\nimport text from './idioma.json';\r\n\r\nconst ProfileOptController = props => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const userData = useRecoilValue(loginData);\r\n    const avatarUrl = useRecoilValue(userAvatarState);\r\n    const logout = useLogout();\r\n\r\n\r\n    return <ProfileOptView  \r\n        text={text}\r\n        idioma={idioma}\r\n        avatarUrl={avatarUrl}\r\n        userData={userData}\r\n        logout={logout}\r\n    />;\r\n\r\n}\r\nexport default ProfileOptController;","import React from 'react';\r\nimport ProfileOptController from './profileOpt.controller';\r\n\r\nconst ProfileOptions = props => {\r\n\r\n    return <ProfileOptController />;\r\n\r\n}\r\nexport default ProfileOptions;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ProfileOpt from './profileOptions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst ToolbarView = ({avatarSrc, userData}) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        \r\n        <Toolbar>\r\n          \r\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                <MenuIcon />\r\n            </IconButton>\r\n          \r\n            <Typography variant=\"h6\" className={classes.title}>\r\n                Shutapp\r\n            </Typography>          \r\n            <div>\r\n                <IconButton\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"menu-appbar\"\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleMenu}\r\n                    color=\"inherit\"\r\n                >\r\n                    <Avatar\r\n                        alt={userData.nickname}\r\n                        src={avatarSrc}\r\n                    >\r\n                        {userData.nickname.toUpperCase().split('')[0]}\r\n                    </Avatar>\r\n                </IconButton>\r\n                <Popover \r\n                    open={open}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                >\r\n                    <ProfileOpt />\r\n                </Popover>\r\n\r\n              \r\n            </div>          \r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToolbarView;","import React from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\n\r\nimport ToolbarView from './toolbar.view';\r\n\r\nimport {userAvatarState, loginData} from '../../components/recoil/atoms';\r\n\r\nconst ToolbarController = props => {\r\n\r\n    const avatarSrc = useRecoilValue(userAvatarState);\r\n    const userData = useRecoilValue(loginData);\r\n\r\n     \r\n    \r\n    \r\n    return <ToolbarView \r\n        avatarSrc={avatarSrc}\r\n        userData={userData}\r\n    />;\r\n\r\n}\r\nexport default ToolbarController;","import React from 'react';\r\nimport ToolbarController from './toolbar.controller';\r\n\r\nconst Toolbar = props => {\r\n\r\n    return <ToolbarController />;\r\n\r\n}\r\nexport default Toolbar;","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\n\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {DEFAULT_CONFIG} from '../../../conf/configuration'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(0.5),\r\n    },\r\n    title: {\r\n        display: 'block',\r\n        //display: 'none',\r\n        /*[theme.breakpoints.up('xs')]: {\r\n          display: 'block',\r\n        },*/\r\n\r\n        marginLeft: theme.spacing(1)\r\n        \r\n    },\r\n    customAppBar: {\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.breakpoints.values.sm,\r\n        },\r\n        right: 'auto'\r\n    }\r\n}));\r\n\r\n\r\nconst OnlineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: '#44b700',\r\n        color: '#44b700',\r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            animation: '$ripple 1.2s infinite ease-in-out',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OfflineStyledBadge = withStyles((theme) => ({\r\n    badge: {\r\n        backgroundColor: theme.palette.grey[500],\r\n        color: theme.palette.grey[500],\r\n        \r\n        boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n        '&::after': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            borderRadius: '50%',\r\n            border: '1px solid currentColor',\r\n            content: '\"\"',\r\n        },\r\n    },\r\n    '@keyframes ripple': {\r\n        '0%': {\r\n            transform: 'scale(.8)',\r\n            opacity: 1,\r\n        },\r\n        '100%': {\r\n            transform: 'scale(2.4)',\r\n            opacity: 0,\r\n        },\r\n    },\r\n}))(Badge);\r\n\r\nconst OnlineBadge = props => {\r\n    \r\n    if(props.contact.socketId && props.contact.friendShipStatus === 1){\r\n        return (<OnlineStyledBadge\r\n                overlap=\"circle\"\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    variant=\"dot\"\r\n                >\r\n                    {props.children}\r\n                </OnlineStyledBadge>)\r\n            ;\r\n    }\r\n    else {\r\n        return (<OfflineStyledBadge\r\n            overlap=\"circle\"\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                variant=\"dot\"\r\n            >\r\n                {props.children}\r\n            </OfflineStyledBadge>)\r\n        ;\r\n    }\r\n}\r\n\r\nconst ChatHeaderView = ({closeChat, contact}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar position=\"fixed\" className={classes.customAppBar}>\r\n            <ToolBar>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={closeChat}\r\n                >\r\n                    <ArrowBackIcon />\r\n                </IconButton>\r\n                    <OnlineBadge contact={contact}>\r\n                        <Avatar\r\n                            alt={contact.nickname}\r\n                            src={DEFAULT_CONFIG.server + contact.avatarUrl}\r\n                        />\r\n                    </OnlineBadge>\r\n                <Typography className={classes.title} variant=\"h5\" noWrap>\r\n                    {contact.nickname}\r\n                </Typography>\r\n                <div className={classes.grow} />\r\n                <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n            </ToolBar>\r\n        </AppBar>\r\n    );\r\n\r\n}\r\nexport default ChatHeaderView;","import React from 'react';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport { friendSelector } from '../../../components/recoil/selectors'; \r\nimport { activeChatWith } from '../../../components/recoil/atoms'; \r\nimport ChatHeaderView from './chatHeader.view';\r\n\r\nconst ChatHeaderController = () => {\r\n\r\n    const [idContact, setActiveChatWith] = useRecoilState(activeChatWith);\r\n    const friends = useRecoilValue(friendSelector);\r\n    const contact = friends.find(f => f.contactId === idContact);\r\n\r\n    const closeChat = () => {\r\n        setActiveChatWith(null);\r\n    }\r\n    \r\n    return <ChatHeaderView \r\n        closeChat={closeChat}\r\n        contact={contact}\r\n    />;\r\n\r\n}\r\nexport default ChatHeaderController;","import React from 'react';\r\nimport ChatHeaderController from './chatHeader.controller';\r\nconst ChatHeader = props => {\r\n\r\n    return <ChatHeaderController />;\r\n\r\n}\r\nexport default ChatHeader;","import React from 'react';\r\n\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { grey, lightGreen, green } from '@material-ui/core/colors';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport {DEFAULT_CONFIG} from '../../../conf/configuration';\r\nimport { formatRelative, subDays } from 'date-fns'\r\nimport { es } from 'date-fns/locale'\r\n\r\nconst useMessageStyle = makeStyles(theme => ({\r\n    message: {\r\n        padding: `${theme.spacing(1)}px ${theme.spacing(2)}px`,\r\n        maxWidth: '60%',\r\n        //margin: `${theme.spacing(2)}px ${theme.spacing(2)}px`,\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: 0,\r\n        marginLeft: `${theme.spacing(2)}px`,\r\n        marginRight: `${theme.spacing(2)}px`,        \r\n        borderRadius: '10px',\r\n        backgroundColor: theme.palette.info.light,\r\n        color: theme.palette.info.contrastText,\r\n        position: \"relative\"\r\n    },\r\n    timeMessage: {\r\n        paddingLeft: theme.spacing(2),\r\n        //paddingRight: theme.spacing(2),\r\n        maxWidth: '60%',\r\n        marginBottom: theme.spacing(1),\r\n        marginLeft: `${theme.spacing(2)}px`,\r\n        marginRight: `${theme.spacing(1)}px`,\r\n        color: theme.palette.text.disabled,\r\n        ...theme.typography.subtitle2\r\n    },\r\n    mymsg: {\r\n        textAlign: 'right',\r\n        alignSelf: 'flex-end',\r\n        borderRadius: '10px 0 10px 10px'\r\n    },\r\n    notmymsg: { \r\n        alignSelf: 'flex-start',\r\n        borderRadius: '0 10px 10px 10px'\r\n    },\r\n    msgAvatar: {\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        position: \"absolute\",\r\n        top: `-${theme.spacing(1.5)}px`,\r\n    },\r\n    myMsgAvatar : {\r\n        right: `-${theme.spacing(1.5)}px`,\r\n        \r\n    },\r\n    notMyMsgAvatar: {\r\n        left: `-${theme.spacing(1.5)}px`\r\n    },\r\n    doneIcon: {\r\n        marginRight: theme.spacing(1),\r\n        fontSize: theme.spacing(2.2)\r\n    }\r\n}));\r\n\r\nconst Message = React.memo(\r\n    ({state, content, datetime ,contact, avatarSrc, idioma}) => {\r\n\r\n    const classes = useMessageStyle();\r\n\r\n    const msgStyle = state > 0 ? classes.mymsg : classes.notmymsg;\r\n    const avatarStyle = state > 0 ? classes.myMsgAvatar : classes.notMyMsgAvatar;\r\n    const avatarUrl = state > 0 ? avatarSrc : DEFAULT_CONFIG.server + contact.avatarUrl;\r\n\r\n    const options = idioma === 'es' ? { locale: es } : {};\r\n    const date = formatRelative(new Date(datetime), new Date(), options)\r\n    \r\n    let stateIcon = null;\r\n    if(state === 1) stateIcon = <DoneIcon className={classes.doneIcon} style={{ color: grey[500] }}/>\r\n    if(state === 2) stateIcon = <DoneAllIcon className={classes.doneIcon} style={{ color: grey[500] }}/>\r\n    if(state === 3) stateIcon = <DoneAllIcon className={classes.doneIcon} style={{ color: lightGreen[500] }}/>\r\n    \r\n\r\n    return (<>\r\n        <div className={`${classes.message} ${msgStyle}`}>\r\n            <Avatar\r\n                alt={contact.nickname}\r\n                src={avatarUrl}\r\n                variant=\"circle\"\r\n                className={`${classes.msgAvatar} ${avatarStyle}`}\r\n                \r\n            />\r\n            {content}\r\n        </div>\r\n        <span className={` ${msgStyle}`}>\r\n            <span className={`${classes.timeMessage}`}>\r\n                {date}\r\n            </span>\r\n            {stateIcon}\r\n        </span>\r\n        \r\n    </>\r\n    );\r\n});\r\n\r\nconst useChatStyle = makeStyles(theme => ({\r\n    chatConversation: {\r\n        position: 'relative',\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        overflowY: 'auto',\r\n        height: '100%'\r\n        \r\n    },\r\n    offset: theme.mixins.toolbar,\r\n    offsetDown: {\r\n        ...theme.mixins.toolbar, \r\n        bottom: 0,\r\n        position: 'relative'\r\n    }\r\n}));\r\n\r\nconst ChatBodyView = ({contact, avatarSrc, messages, idioma}) => {\r\n\r\n    React.useEffect(() => {\r\n        var element = document.getElementById('chatConversation');\r\n        if(element)\r\n            element.scrollTop = element.scrollHeight;\r\n    });\r\n\r\n    const classes = useChatStyle();\r\n    return (\r\n        \r\n                <div id=\"chatConversation\" className={classes.chatConversation}>\r\n                    <div className={classes.offset} />\r\n                    {\r\n                        messages.map((elem, idx, arr) => {\r\n                            return <Message {...elem} key={idx} contact={contact} avatarSrc={avatarSrc} idioma={idioma}/>\r\n                        })\r\n                    }\r\n                    <div className={classes.offsetDown} />\r\n                </div>\r\n\r\n    );\r\n\r\n}\r\nexport default ChatBodyView;","import React, { useEffect } from 'react';\r\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\r\nimport { friendSelector, initConversationSelector } from '../../../components/recoil/selectors'; \r\nimport {userAvatarState, activeChatWith, idiomaState, loginData, getConversationWithContact} from '../../../components/recoil/atoms';\r\nimport ChatBodyView from './chatBody.view';\r\nimport useAxiosHook from '../../../utils/axiosHook';\r\nimport text from './idioma.json';\r\nimport socketClient from '../../../utils/socket';\r\n\r\nconst ChatBodyController = () => {\r\n    \r\n    const idContact = useRecoilValue(activeChatWith);\r\n    const initConversation = useSetRecoilState(initConversationSelector);\r\n    const messages = useRecoilValue(getConversationWithContact(idContact));\r\n    const avatarSrc = useRecoilValue(userAvatarState);\r\n    const userDate = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    const friends = useRecoilValue(friendSelector);\r\n    const {postRequest} = useAxiosHook();\r\n    const contact = friends.find(f => f.contactId === idContact);\r\n\r\n\r\n    const loadConversation = () => {\r\n        if(messages.length === 0){\r\n            postRequest({\r\n                url: '/messages/getMessagesByContact',\r\n                messageOnError: text.errorLoadConversation[idioma],\r\n                bodyParams: {contactId: contact.contactId},\r\n                doFnAfterSuccess: (resp, token) => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        initConversation({\r\n                            contactId: contact.contactId,\r\n                            conversation: resp.data.conversation\r\n                        });\r\n    \r\n    \r\n                        const client = socketClient.getSocket();\r\n                        client.emit('read messages', {\r\n                            readerId: userDate.userId,\r\n                            messengerId: contact.contactId,\r\n                            messengerSocketId: contact.socketId,\r\n                            token: token\r\n                        });\r\n                    }\r\n                },\r\n                //doFnAfterError: err => console.log(err)\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadConversation();\r\n    }, []);\r\n\r\n    if(messages ){\r\n        return <ChatBodyView \r\n                    contact={contact}\r\n                    avatarSrc={avatarSrc}\r\n                    messages={messages}\r\n                    idioma={idioma}\r\n                /> ;\r\n    }else{\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default ChatBodyController;","import React from 'react';\r\nimport ChatBodyController from './chatBody.controller';\r\nconst ChatBody = props => {\r\n\r\n    return <ChatBodyController />;\r\n\r\n}\r\nexport default ChatBody;","import React from 'react';\r\n\r\nimport {AppBar, Toolbar, IconButton, makeStyles, createStyles} from '@material-ui/core';\r\n\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport TelegramIcon from '@material-ui/icons/Telegram';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    appBar:{\r\n        top: 'auto',\r\n        bottom: 0,\r\n        position: \"fixed\",\r\n        width: '100%',        \r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.breakpoints.values.sm,\r\n        },\r\n        right: 'auto'\r\n    },\r\n    grow: {\r\n        flexGrow: 1\r\n    },\r\n    toolbar: {\r\n        padding: 0\r\n    },\r\n    icon: {\r\n        fontSize: theme.spacing(3.75)\r\n    },\r\n    textarea: {\r\n        border: '1px solid gray',\r\n        fontFamily: 'inherit',\r\n        fontSize: 'large',    \r\n        padding: '1px 6px',\r\n        backgroundColor: 'white',\r\n        color: 'rgba(0,0,0,0.7)',\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n        marginBottom:  theme.spacing(1),\r\n        maxHeight: theme.spacing(10),\r\n        minHeight: theme.spacing(4),\r\n        overflowY: 'auto',\r\n        borderRadius: theme.spacing(0.5),\r\n        marginLeft: theme.spacing(2),\r\n    }\r\n}));\r\n\r\n\r\nconst ChatEditorView = ({sendMessage, refAreaTexto, keyPress}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar color=\"primary\"  className={classes.appBar}>\r\n            <Toolbar variant=\"dense\" className={classes.toolbar}>\r\n                <div className={classes.textarea} role=\"textbox\" contentEditable ref={refAreaTexto} onKeyPress={keyPress}></div>\r\n                <div className={classes.grow} />\r\n                <IconButton color=\"inherit\" onClick={sendMessage}>\r\n                    <TelegramIcon className={classes.icon}/>\r\n                </IconButton>                \r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n\r\n}\r\nexport default ChatEditorView;","import React, {useRef, useEffect, useState} from 'react';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport {loginData, activeChatWith} from '../../../components/recoil/atoms';\r\nimport {friendSelector, addMsgToConversationSelector} from '../../../components/recoil/selectors';\r\nimport ChatEditorView from './chatEditor.view';\r\nimport socketClient from '../../../utils/socket';\r\n\r\nconst ChatEditorController = props => {\r\n\r\n    const userData = useRecoilValue(loginData);\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const idContact = useRecoilValue(activeChatWith);\r\n    const friends = useRecoilValue(friendSelector);\r\n    const contact = friends.find(f => f.contactId === idContact);\r\n    const refAreaTexto = useRef('');\r\n    const [consecutive, setConsecutive] = useState(0); \r\n\r\n    const sendMessage = () => {\r\n\r\n        const oldtext = refAreaTexto.current.innerText;\r\n        const text = oldtext.replace(/^(\\s*\\r*)(.)(\\s*\\r*)$/, '$2');\r\n        if(text !== ''){\r\n            addMsgToConversation({\r\n                contactId: contact.contactId,\r\n                messageId: consecutive,//messageId,\r\n                content: refAreaTexto.current.innerText,\r\n                datetime: new Date(),\r\n                state: 1\r\n            });\r\n            setConsecutive(prev => prev + 1);\r\n\r\n            const client = socketClient.getSocket();\r\n            client.emit('send message', {\r\n                content: refAreaTexto.current.innerText,\r\n                userOriginId: userData.userId,\r\n                userDestinyId: idContact,\r\n                toSocketId: contact.socketId,\r\n                token: localStorage.getItem('token'),\r\n                consecutive: consecutive\r\n            });\r\n\r\n            refAreaTexto.current.innerText = '';\r\n            refAreaTexto.current.focus();\r\n        }\r\n    }\r\n\r\n    const keyPress = (event) => {\r\n        \r\n        if(event.charCode === 13){\r\n            event.preventDefault();\r\n            sendMessage();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refAreaTexto.current.focus();\r\n    });\r\n\r\n    return <ChatEditorView \r\n        sendMessage={sendMessage}\r\n        keyPress={keyPress}\r\n        refAreaTexto={refAreaTexto}\r\n    />;\r\n\r\n}\r\nexport default ChatEditorController;","import React from 'react';\r\n\r\nimport ChatEditorController from './chatEditor.controller';\r\nconst ChatEditor = props => {\r\n\r\n    return <ChatEditorController />;\r\n\r\n}\r\nexport default ChatEditor;","import React from 'react';\r\n\r\n\r\n\r\nimport ChatHeader from './chatHeader';\r\nimport ChatBody from './chatBody';\r\nimport ChatEditor from './chatEditor';\r\n\r\nconst ChatView = () => {\r\n\r\n    return (\r\n        <>\r\n            <ChatHeader />\r\n            <ChatBody />\r\n            <ChatEditor />\r\n        </>\r\n    );\r\n\r\n}\r\nexport default ChatView;","import React from 'react';\r\nimport ChatView from './chat.view';\r\n\r\nconst Chat = props => {\r\n\r\n    return <ChatView />;\r\n}\r\nexport default Chat;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport RouterLink from 'react-router-dom/Link';\r\n\r\nimport text from './idioma.json';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function SignUp({idioma, onSignUp,emailState, onEmailChange, passState, onPassChange, nameState, onNameChange, lastNameRef}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {text.signup[idioma]}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label={text.firstName[idioma]}\r\n                autoFocus\r\n                value={nameState.value}\r\n                helperText={!nameState.valid ? text[nameState.msg][idioma] : ''}\r\n                error={!nameState.valid}\r\n                onChange={onNameChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label={text.lastName[idioma]}\r\n                name=\"lastName\"\r\n                autoComplete=\"lname\"\r\n                inputRef={lastNameRef}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label={text.email[idioma]}\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                value={emailState.value}\r\n                helperText={!emailState.valid ? text.invalidEmail[idioma] : ''}\r\n                error={!emailState.valid}\r\n                onChange={onEmailChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label={text.password[idioma]}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={passState.value}\r\n                helperText={!passState.valid ? text[passState.msg][idioma] : ''}\r\n                error={!passState.valid}\r\n                onChange={onPassChange}\r\n              />\r\n            </Grid>            \r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={onSignUp}\r\n          >\r\n            {text.signup[idioma]}\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <RouterLink to=\"/\">\r\n              {text.signin[idioma]}\r\n              </RouterLink>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import React, {useState, useRef} from 'react';\r\nimport axios from 'axios';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport Signup from './signup.view';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\nimport NotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport text from './idioma.json';\r\n\r\nconst SignupController = props => {\r\n    \r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openSuccessNotification, openErrorNotification} = NotificationHook();\r\n    const [emailState, setEmailState] = useState({value: \"\", valid: true});\r\n    const [passState, setPassState] = useState({value: \"\", valid: true});    \r\n    const [nameState, setNameState] = useState({value: \"\", valid: true});    \r\n    \r\n    const lastNameRef = useRef();\r\n\r\n    const onSignUp = (event) => {\r\n        event.preventDefault();\r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(emailState.value)){\r\n            setEmailState({...emailState, valid: false});\r\n        }else\r\n        if(passState.value.length < 8){\r\n            setPassState({...passState, valid: false, msg: 'passShort'});\r\n        }else\r\n\r\n        if(!/^[a-zA-Z\\']+$/.test(nameState.value)){\r\n            setNameState({...nameState, valid: false, msg: 'nameInvalid'});\r\n        }else\r\n        if(nameState.value.length < 2){\r\n            setNameState({...nameState, valid: false, msg: 'nameShort'});\r\n        }else\r\n        if(nameState.value.length >= 20){\r\n            setNameState({...nameState, valid: false, msg: 'nameLong'});\r\n        }else {\r\n            // All validations pass!\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/signup`, {\r\n                firstName: nameState.value,\r\n                lastName: lastNameRef.current.value,\r\n                email: emailState.value,\r\n                password: passState.value,\r\n                language: idioma,\r\n                hostname: window.location.host\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 201){\r\n                    // Send a notification\r\n                    openSuccessNotification(text.userCreated[idioma]);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                if(err.response.status === 409){\r\n                    openErrorNotification(text.duplicated[idioma]);\r\n                }else{\r\n                    openErrorNotification(text.error[idioma]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    const onNameChange = ({target: {value}}) => {\r\n        setNameState({...nameState, value: value, valid: true});\r\n    }\r\n    const onEmailChange = ({target:{value}}) => {\r\n        setEmailState({...emailState, value: value, valid: true});\r\n    }\r\n    const onPassChange = ({target: {value}}) => {\r\n        setPassState({...passState, value: value, valid: true});\r\n    }\r\n\r\n    return (\r\n        <Signup \r\n            idioma={idioma}\r\n           \r\n            \r\n            lastNameRef={lastNameRef}\r\n            nameState={nameState}\r\n            passState={passState}\r\n            emailState={emailState}\r\n            onSignUp={onSignUp}\r\n            onNameChange={onNameChange}\r\n            onEmailChange={onEmailChange}\r\n            onPassChange={onPassChange}\r\n        />\r\n    );\r\n\r\n}\r\nexport default SignupController;","import React from 'react';\r\nimport SignupController from './signup.controller';\r\n\r\nconst Signup = props => {\r\n\r\n    return <SignupController />;\r\n\r\n}\r\nexport default Signup;","import React from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {Snackbar } from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\n\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\n\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\nconst NotificationView = () => {\r\n    const [notificationState, setNotState] = useRecoilState(notificationAtom);\r\n    \r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        setNotState({...notificationState, open: false});\r\n    };\r\n\r\n    return <Snackbar \r\n        open={notificationState.open}\r\n        autoHideDuration={notificationState.autoHideDuration}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical:'top', horizontal:'center' }}\r\n    >\r\n        <Alert\r\n            onClose={handleClose}\r\n            severity={notificationState.severity}\r\n        >\r\n            {notificationState.msg}\r\n        </Alert>\r\n    </Snackbar>;\r\n\r\n}\r\nexport default NotificationView;","import React from 'react';\r\nimport NotificationView from './notification/notification.view';\r\n\r\nconst Notification = props => {\r\n\r\n    return (\r\n        <>\r\n            <NotificationView />\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport RouterLink from 'react-router-dom/Link';\r\nimport text from './idioma.json'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  }\r\n}));\r\n\r\nexport default function ChangePassView({idioma, passState, pass2State, onPassChange, onPass2Change, submitPass}) {\r\n  \r\n        const classes = useStyles();\r\n\r\n  return (  \r\n    <Container component=\"main\" maxWidth=\"xs\">  \r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {text.title[idioma]}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label={text.password[idioma]}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={passState.value}\r\n                onChange={onPassChange}\r\n                helperText={!passState.valid ? text.invalidPass[idioma] : ''}\r\n                error={!passState.valid}\r\n            />\r\n            <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label={text.repeatPassword[idioma]}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={pass2State.value}\r\n                onChange={onPass2Change}\r\n                helperText={!pass2State.valid ? text.passNotEqual[idioma] : ''}\r\n                error={!pass2State.valid}\r\n            />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={submitPass}            \r\n          >\r\n            {text.changePass[idioma]}\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <RouterLink to=\"/\">\r\n              {text.signin[idioma]}\r\n              </RouterLink>\r\n            </Grid>\r\n          </Grid>\r\n         </form>\r\n      </div>\r\n      </Container>\r\n  );\r\n}","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport NotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport axios from 'axios';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport ChangePassView from './changepass.view';\r\nimport {idiomaState} from './../../components/recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport text from './idioma.json';\r\n\r\nconst ChangePassController = props => {\r\n    \r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const {openErrorNotification, openSuccessNotification} = NotificationHook();\r\n    const [passState, setPassState] = useState({value: \"\", valid: true});\r\n    const [pass2State, setPass2State] = useState({value: \"\", valid: true});\r\n\r\n\r\n    const onPassChange = ({target: {value}}) => {\r\n        setPassState({...passState, value: value, valid: true});\r\n        setPass2State({...pass2State, valid: true});\r\n    }\r\n    const onPass2Change = ({target: {value}}) => {\r\n        setPass2State({...pass2State, value: value, valid: true});\r\n    }\r\n\r\n    const submitPass = (event) => {\r\n        event.preventDefault();\r\n        if(passState.value.length < 8){\r\n            setPassState({...passState, valid: false});\r\n        }else if(pass2State.value !== passState.value){\r\n            setPass2State({...pass2State, valid: false});\r\n        }else {\r\n            const token = props.match.params.token;\r\n            \r\n            axios.post(`${DEFAULT_CONFIG.server}/users/resetpassword`,{\r\n                token: token,\r\n                password: passState.value\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    openSuccessNotification(text.passChangeOk[idioma]);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.passChangeError[idioma]);\r\n            });\r\n        }\r\n    }\r\n    \r\n    return <ChangePassView idioma={idioma} \r\n            passState={passState}\r\n            pass2State={pass2State}\r\n\r\n            onPassChange={onPassChange}\r\n            onPass2Change={onPass2Change}\r\n            submitPass={submitPass}\r\n            />;\r\n\r\n}\r\n\r\nexport default withRouter(ChangePassController);\r\n","import React from 'react';\r\nimport ChangePassController from './changepass.controller';\r\nconst ChangePass = props => {\r\n\r\n    return <ChangePassController />;\r\n\r\n}\r\nexport default ChangePass;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { pink, blueGrey } from '@material-ui/core/colors';\r\n\r\n\r\n\r\nimport text from './idioma.json';\r\nimport { Container, Divider } from '@material-ui/core';\r\n\r\nimport AvatarEdit from 'react-avatar-edit';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        paddingTop: theme.spacing(2),\r\n        overflowY: 'auto'\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    actionsContainer: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    Stepper: {\r\n        backgroundColor: 'transparent',\r\n        \r\n    },\r\n    combo: {\r\n        minWidth: 120\r\n    },\r\n    avatarPink: {\r\n        color: theme.palette.getContrastText(pink[300]),\r\n        backgroundColor: pink[300],\r\n        marginLeft: theme.spacing(7),\r\n        width: theme.spacing(10),\r\n        height: theme.spacing(10),\r\n      },\r\n    avatarBlue: {\r\n        color: theme.palette.getContrastText(blueGrey[500]),\r\n        backgroundColor: blueGrey[500],\r\n        marginLeft: theme.spacing(7),\r\n        width: theme.spacing(10),\r\n        height: theme.spacing(10),\r\n    },\r\n    avatarButton: {\r\n        padding: 0, \r\n        borderRadius: '50%', \r\n        minWidth: 0\r\n    },\r\n    avatarEdit: {\r\n        margin: theme.spacing(2),\r\n        marginLeft: theme.spacing(3),\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: ''\r\n    },\r\n    \r\n    \r\n}));\r\n\r\nconst ActivateUserView = ({idioma, activeStep, handleFinish,\r\n    handleLanguageChange, \r\n    sexSelectHandler,sexState,\r\n    nicknameState, setNicknameHandler,\r\n    preview, setPreview,\r\n    goNextConf,goBackConf,\r\n    sendActivation, activationError,\r\n    avatarRef\r\n}) => {\r\n\r\n    const classes = useStyles();    \r\n\r\n    let orientation = 'vertical';\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Container>\r\n                <Typography variant=\"h6\">{`${text.hello[idioma]}${nicknameState}${text.hello1[idioma]}`}</Typography>\r\n                <Typography variant=\"body1\">{text.descriptionText[idioma]}</Typography>\r\n            </Container>\r\n            <Divider />\r\n            <Stepper activeStep={activeStep} orientation={orientation} className={classes.Stepper}>\r\n                <Step >\r\n                    <StepLabel >{text.labelIdioma[idioma]}</StepLabel>\r\n                    <StepContent>\r\n                        <FormControl variant=\"standard\" className={classes.combo}>\r\n                            <Select\r\n                                id=\"input-language\"\r\n                                value={idioma}\r\n                                onChange={handleLanguageChange}\r\n                            >\r\n                                <MenuItem value={'en'}>English</MenuItem>\r\n                                <MenuItem value={'es'}>Español</MenuItem>\r\n                            </Select>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={goNextConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.next[idioma]}\r\n                            </Button>\r\n                        </FormControl>                        \r\n                    </StepContent>\r\n                </Step>\r\n\r\n                <Step >\r\n                    <StepLabel >{text.labelSexo[idioma]}</StepLabel>\r\n                    <StepContent>\r\n                        <FormControl variant=\"standard\" className={classes.combo}>\r\n                            <Select\r\n                                id=\"input-language\"\r\n                                value={sexState}\r\n                                onChange={sexSelectHandler}\r\n                            >\r\n                                <MenuItem value={'M'}>Masculino</MenuItem>\r\n                                <MenuItem value={'F'}>Femenino</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <div className={classes.actionsContainer}>\r\n                            <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={goBackConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.back[idioma]}\r\n                            </Button>\r\n                            <Button\r\n                                disabled={sexState == null}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={goNextConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.next[idioma]}\r\n                            </Button>\r\n                            </div>\r\n                        </div>\r\n                    </StepContent>\r\n                </Step>\r\n\r\n                <Step >\r\n                    <StepLabel >{text.labelNickname[idioma]}</StepLabel>\r\n                    <StepContent>\r\n                        <FormControl variant=\"standard\" className={classes.combo}>\r\n                            <TextField \r\n                                id=\"standard-basic\"\r\n                                placeholder={text.labelNickname[idioma]}\r\n                                value={nicknameState}\r\n                                onChange={setNicknameHandler}   \r\n                            />\r\n                        </FormControl>\r\n                        <div className={classes.actionsContainer}>\r\n                            <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={goBackConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.back[idioma]}\r\n                            </Button>\r\n                            <Button\r\n                                disabled={nicknameState === ''}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={goNextConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.next[idioma]}\r\n                            </Button>\r\n                            </div>\r\n                        </div>\r\n                    </StepContent>\r\n                </Step>\r\n\r\n                <Step >\r\n                    <StepLabel >{text.labelAvatar[idioma]}</StepLabel>\r\n                    <StepContent>                    \r\n                        <div className={classes.avatarEdit}>\r\n                            <AvatarEdit\r\n                                width={120}\r\n                                height={100}\r\n                                onCrop={prev => {                                    \r\n                                    setPreview(prev)}\r\n                                }\r\n                                onClose={() => {setPreview(null)}}\r\n                                closeIconColor={pink[500]}\r\n                                label={text.choosefile[idioma]}        \r\n                                ref={avatarRef}                    \r\n                            />\r\n                                <Avatar                                    \r\n                                    alt={`${nicknameState}`}\r\n                                    src={preview}\r\n                                    variant=\"circle\"\r\n                                    className={sexState===\"F\" ? classes.avatarPink : classes.avatarBlue}\r\n                                />\r\n                        </div>\r\n                        <div className={classes.actionsContainer}>\r\n                            <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={goBackConf}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.back[idioma]}\r\n                            </Button>\r\n                            <Button\r\n                                disabled={nicknameState === ''}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={sendActivation}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.next[idioma]}\r\n                            </Button>\r\n                            </div>\r\n                        </div>\r\n                    </StepContent>\r\n                </Step>\r\n                \r\n                <Step >\r\n                    <StepLabel error={activationError}>{text.label1[idioma]}</StepLabel>\r\n                </Step>\r\n\r\n                <Step >\r\n                    <StepLabel >{text.label3[idioma]}</StepLabel>\r\n                    <StepContent>\r\n                        <Typography>{text.content3[idioma]}</Typography>\r\n                        <div className={classes.actionsContainer}>\r\n                            <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={handleFinish}\r\n                                className={classes.button}\r\n                            >\r\n                                {text.goLogin[idioma]}\r\n                            </Button>\r\n                            </div>\r\n                        </div>\r\n                    </StepContent>\r\n                </Step>\r\n\r\n            </Stepper>\r\n            <Divider />\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default ActivateUserView;","import React, {useState, useRef} from 'react';\r\nimport {withRouter, Redirect} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport {useRecoilState} from 'recoil';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\n\r\nimport ActivateUserView from './activateuser.view';\r\n\r\nconst ActivateUserController = props => {\r\n\r\n    const [idioma, setIdioma] = useRecoilState(idiomaState);\r\n\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [activationError, setActivationError] = useState(false);\r\n    const [redirectState, setRedirect] = useState(null);\r\n    const [sexState, setSexState] = useState(null);\r\n    const [nicknameState, setNickname] = useState(props.match.params.nickname);\r\n    const [previewAvatar, setPreviewAvatar] = useState(null);\r\n    const avatarRef = useRef(null);\r\n\r\n    const handleLanguageChange = ({target: {value}}) => {\r\n        setIdioma(value);\r\n    }\r\n\r\n    const handleFinish = () => {\r\n        setRedirect(true);\r\n    };\r\n    const goNextConf = () => {\r\n        setActiveStep(state => state+1);\r\n    }\r\n    const goBackConf = () => {\r\n        setActiveStep(state => state-1);\r\n    }\r\n    const sexSelectHandler = ({target: {value}}) => {\r\n        setSexState(value);\r\n    }\r\n    const setNicknameHandler = ({target: {value}}) => {\r\n        setNickname(value);\r\n    }\r\n\r\n\r\n    const sendActivation = () => {\r\n        \r\n        goNextConf();\r\n\r\n        axios.post(`${DEFAULT_CONFIG.server}/users/activate`, \r\n            {\r\n                token: props.match.params.token,\r\n                language: idioma,\r\n                gender: sexState,\r\n                nickname: nicknameState,\r\n                avatar: previewAvatar\r\n            })\r\n        .then(resp => {\r\n            if(resp.status === 200){\r\n                goNextConf();\r\n            }\r\n            \r\n        })\r\n        .catch(err => {\r\n            setActivationError(true);\r\n        });\r\n    }\r\n\r\n    if(redirectState){\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return <ActivateUserView \r\n        idioma={idioma}\r\n        activeStep={activeStep}\r\n        handleFinish={handleFinish}\r\n        handleLanguageChange={handleLanguageChange}\r\n        sexSelectHandler={sexSelectHandler}\r\n        sexState={sexState}\r\n        nicknameState={nicknameState}\r\n        setNicknameHandler={setNicknameHandler}\r\n        preview={previewAvatar}\r\n        setPreview={setPreviewAvatar}\r\n        \r\n        goNextConf={goNextConf}\r\n        goBackConf={goBackConf}\r\n\r\n        sendActivation={sendActivation}\r\n        activationError={activationError}\r\n        avatarRef={avatarRef}\r\n\r\n    />;\r\n\r\n}\r\nexport default withRouter(ActivateUserController);","import React from 'react';\r\nimport ActivateUserController from './activateuser.controller';\r\n\r\nconst ActivateUser = props => {\r\n\r\n    return <ActivateUserController />;\r\n\r\n}\r\nexport default ActivateUser;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket'\r\nimport {loginData} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\n\r\nconst UserSubscriber = props => {   \r\n    const client = socket.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n\r\n        client.on('new user', data => {\r\n            console.log('new user');\r\n            \r\n            friendDispatcher({\r\n                action: 'connect', \r\n                payload: {\r\n                    data:data,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.connected\r\n                }\r\n            });\r\n        });\r\n        \r\n        if(userData)\r\n            client.emit('new user', {userId: userData.userId});\r\n\r\n        return () => client.off('new user');\r\n    }, [friendDispatcher, client, userData]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst UserSubscriber = props => {\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const client = socket.getSocket();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('user disconnect', data => {\r\n            friendDispatcher({\r\n                action: 'disconnect', \r\n                payload: {\r\n                    socketId: data.socketId,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.disconnected\r\n                }\r\n            })\r\n        });\r\n\r\n        return () => client.off('user disconnect');\r\n    }, []);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {chatConversation} from '../recoil/atoms';\r\nimport socket from '../../utils/socket'\r\nconst IncomingMsgSubscriber = props => {\r\n\r\n    const [conversation, setConvertation] = useRecoilState(chatConversation);\r\n    const client = socket.getSocket();\r\n    \r\n    useEffect(() => {\r\n\r\n        client.on('message', data => {\r\n            const newStateObj = {...conversation};\r\n            if(conversation[data.socketId]){\r\n                newStateObj[data.socketId] = {...conversation[data.socketId]};\r\n                if(conversation[data.socketId].text){\r\n                    newStateObj[data.socketId].text = [...conversation[data.socketId].text, {myMsg: false, msg: data.msg}];\r\n                    \r\n                    \r\n\r\n                    if(data.socketId !== newStateObj.active){\r\n                        newStateObj[data.socketId].novistos = newStateObj[data.socketId].novistos + 1; \r\n                    }\r\n                }else{\r\n                    newStateObj[data.socketId].text = [];\r\n                }\r\n                \r\n            }else{\r\n                newStateObj[data.socketId] = {\r\n                    text: [{myMsg: false, msg: data.msg}],\r\n                    nickname: null,\r\n                    socketId: null,\r\n                    novistos: 1\r\n                }\r\n            }\r\n            setConvertation(newStateObj);\r\n        });\r\n\r\n        return () => client.off('message');\r\n    }, [conversation]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default IncomingMsgSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst DeclinedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('declined friendship', ({declinerId, declinedId, socketIdDecliner, socketIdDeclined}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: declinerId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDecliner}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.declinedInv[idioma]}`, {variant: \"warning\"});\r\n                })\r\n                .catch(err => {\r\n                    if(err.response.status === 404){\r\n                        friendDispatcher({\r\n                            action: 'delete', \r\n                            payload: {\r\n                                friendId: declinerId\r\n                            }});\r\n                    }\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('declined friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeclinedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst RequestFriendSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('requested friendship', ({userIdRequester, userIdRequested, socketIdRequester}) => {\r\n            if(userIdRequested === userData.userId){\r\n                \r\n                \r\n                const optimisticAction = token => {\r\n                    axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                        friendId: userIdRequester\r\n                    },{\r\n                        headers: {\r\n                            'Authorization': token\r\n                        }\r\n                    })\r\n                    .then(resp => {\r\n                        if(resp.status === 200){\r\n                            \r\n                            friendDispatcher({\r\n                                action: 'add', \r\n                                payload: {\r\n                                    friend: {...resp.data.friend, socketId: socketIdRequester}\r\n                                }});\r\n                            return resp.data.friend;\r\n                        }\r\n                    })\r\n                    .then(friend => {\r\n                        enqueueSnackbar(`${friend.nickname} ${text.requestedInv[idioma]}`, {variant: \"success\"});\r\n                    })\r\n                    .catch(err => {\r\n                        openErrorNotification(text.errorLoadingFriends[idioma])\r\n                    });\r\n                }\r\n                authMiddleware(optimisticAction);\r\n                \r\n            }\r\n        });\r\n\r\n        return () => client.off('requested friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RequestFriendSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst AcceptedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('accepted friendship', ({accepterId, socketIdAccepter}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: accepterId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdAccepter}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.accept[idioma]}`, {variant: \"success\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('accepted friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default AcceptedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst DeletedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('deleted contact', ({deleterId, socketIdDeleter}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: deleterId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDeleter}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.delete[idioma]}`, {variant: \"error\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('deleted contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeletedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst BlokedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('blocked contact', ({blokerId, socketIdBloked}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: blokerId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdBloked}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.block[idioma]}`, {variant: \"error\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n        });\r\n\r\n        return () => client.off('bloked contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default BlokedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue, useRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport {addMsgToConversationSelector, friendSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector} from '../recoil/selectors';\r\nimport {loginData, activeChatWith, idiomaState} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst RecibedMessageSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const editMsgToStateSaved = useSetRecoilState(editMsgToStateSavedSelector);\r\n    const editAllMsgToReaded = useSetRecoilState(editAllMsgToReadedSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const activeChatContactId = useRecoilValue(activeChatWith);\r\n    const {enqueueSnackbar} = useSnackbar();\r\n    const [friends, friendDispatcher] = useRecoilState(friendSelector);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n        client.on('recived message', ({content, userOriginId, socketIdSender, messageId, datetime, consecutive}) => {\r\n            \r\n            const contact = friends.find(f => f.contactId === userOriginId);\r\n            if(activeChatContactId !== userOriginId){                \r\n                enqueueSnackbar(`${contact.nickname} ${text.writingYou[idioma]}`, {variant: 'info'});\r\n\r\n                let dataObj = {};\r\n                dataObj[userOriginId] = {\r\n                    cantidad: 1,\r\n                    lastMessage: content,\r\n                    datetime: datetime\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n            }else{\r\n                const client = socketClient.getSocket();\r\n                client.emit('read messages', {\r\n                    userId: userData.userId,\r\n                    contactId: contact.contactId,\r\n                    notifyTo: contact.socketId,\r\n                    token: localStorage.getItem('token')\r\n                });\r\n            }\r\n            addMsgToConversation({\r\n                contactId: userOriginId,\r\n                messageId: messageId,\r\n                content: content,\r\n                datetime: datetime,\r\n                state: 0\r\n            });\r\n        });\r\n\r\n        client.on('saved message', ({contactId, messageId, datetime,consecutive,soketIdContact}) => {\r\n            editMsgToStateSaved({\r\n                contactId: contactId,\r\n                messageId: messageId,\r\n                datetime: datetime,\r\n                consecutive: consecutive\r\n            });\r\n        });\r\n\r\n        client.on('readed messages', ({contactId}) => {\r\n            editAllMsgToReaded({contactId})\r\n        });\r\n\r\n        return () => {\r\n            client.off('recived message');\r\n            client.off('saved message');\r\n            client.off('readed messages');\r\n        };\r\n    });\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RecibedMessageSubscriber;","//import React from 'react';\r\nimport {useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport {tokenTimeoutAtom} from '../components/recoil/atoms';\r\nimport useLogout from './useLogout';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration'\r\nimport { useCallback } from 'react';\r\n\r\nconst useRefreshToken = () => {\r\n\r\n    const setTokenTimeout = useSetRecoilState(tokenTimeoutAtom);\r\n    const logout = useLogout();\r\n    \r\n    const refreshToken = useCallback(() => {\r\n        const token = localStorage.getItem('token');\r\n        const refresh_token = localStorage.getItem('refresh_token');\r\n        const refresh_token_expires = localStorage.getItem('refresh_token_expires');\r\n        if (refresh_token && refresh_token_expires && new Date(refresh_token_expires).getTime() > new Date().getTime()) {\r\n            console.log('Antes de llamar al endpoint refreshtoken');\r\n            \r\n            return axios.post(`${DEFAULT_CONFIG.server}/users/refreshtoken`, {\r\n                token: token, refresh_token: refresh_token\r\n              })\r\n              .then(resp => {\r\n                if(resp.status === 200){\r\n                  const {new_token, new_refresh_token, new_token_expires, new_refresh_token_expires} = resp.data;\r\n                  localStorage.setItem('token', new_token);\r\n                  localStorage.setItem('refresh_token', new_refresh_token);\r\n                  localStorage.setItem('token_expires', new_token_expires);\r\n                  localStorage.setItem('refresh_token_expires', new_refresh_token_expires);\r\n                  setTokenTimeout({\r\n                        timeleft: new_token_expires\r\n                  })\r\n                }          \r\n              })\r\n              .catch(err => {\r\n                  logout();\r\n              });\r\n    \r\n        }else{\r\n            logout();\r\n        }\r\n    }, [logout, setTokenTimeout])\r\n    \r\n    return refreshToken;\r\n  }\r\n\r\n  export default useRefreshToken;","import React from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {subscribeToEventsState, loginData, activeChatWith} from './components/recoil/atoms';\r\n\r\n/*import Login from './components/login/login';\r\nimport Contacts from './components/contacts/contacts';\r\nimport Chat from './components/chat/chat';\r\n//import Chat from './components/chat/chat';\r\nimport Header from './components/header/header';\r\nimport './App.css';\r\nimport Backdrop from './components/backdrop/backdrop';*/\r\n\r\n// --------------------------- New Style --------------------- //\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Signin from './view/signin';\r\nimport ContactList from './view/contacts';\r\nimport MainButton from './view/mainButton';\r\nimport MainContainter from './view/main';\r\nimport Toolbar from './view/toolbar';\r\nimport ChatCmp from './view/chat';\r\nimport Signup from './view/signup';\r\nimport UiComponents from './components/uiComponents';\r\nimport ChangePass from './view/changepass';\r\nimport ActivateUser from './view/activateuser';\r\nimport NewUserSubscriber from './components/events/newUserSubscriber';\r\nimport UserDisconnectSubscriber from './components/events/userDisconnectSubscriber';\r\nimport IncomingMsgSubscriber from './components/events/incomingMsgSubscriber';\r\nimport DeclinedFriendshipSubscriber from './components/events/declinedFriendshipSubscriber';\r\nimport RequestFriendSubscriber from './components/events/requestFriendshipSubscriber';\r\nimport AcceptFriendshipSubscriber from './components/events/acceptedFriendshipSubscriber';\r\nimport DeletedContactSubscriber from './components/events/deletedContactSubscriber';\r\nimport BlokedContactSubscriber from './components/events/blokedContactSubscriber';\r\nimport RecibedMessageSubscriber from './components/events/recibedMessageSubscriber';\r\nimport {SnackbarProvider} from 'notistack';\r\n\r\n\r\nimport {tokenTimeoutAtom} from './components/recoil/atoms';\r\nimport useRefreshToken from './utils/useRefreshToken';\r\nconst TimerCmp = () => {\r\n\r\n    const refreshToken = useRefreshToken();\r\n    const timeoutData = useRecoilValue(tokenTimeoutAtom);\r\n    \r\n    React.useEffect(() => {\r\n        \r\n        let timeleft = new Date(timeoutData.timeleft).getTime() - new Date().getTime();\r\n        if(timeleft >= 10000){\r\n            setTimeout(()=> {\r\n                refreshToken();\r\n            }, timeleft - 10000);\r\n        }\r\n\r\n    }, [timeoutData]);\r\n\r\n    return <></>;\r\n}\r\n\r\nconst App = () => {\r\n\r\n    const subscribe = useRecoilValue(subscribeToEventsState);\r\n    const userData = useRecoilValue(loginData);\r\n    const chatWith = useRecoilValue(activeChatWith);\r\n    const notistackRef = React.createRef();\r\n    const onClickDismiss = key => () => { \r\n        notistackRef.current.closeSnackbar(key);\r\n    }\r\n  \r\n    const cmp  = userData !== null \r\n    ? <>\r\n            {\r\n                chatWith \r\n                ? <ChatCmp />                \r\n                : <Route path=\"/contacts\" exact render={ () => (\r\n                    <>\r\n                        <Toolbar />\r\n                        <MainButton />\r\n                        <ContactList />\r\n                    </>\r\n                )} />\r\n            }\r\n        </> \r\n    : null ;\r\n\r\n\r\n  return (\r\n    <MainContainter>\r\n        <CssBaseline />\r\n        <UiComponents />\r\n        <SnackbarProvider \r\n            maxSnack={3} \r\n            autoHideDuration={3000}\r\n            preventDuplicate\r\n            anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'left',\r\n            }}\r\n            ref={notistackRef}\r\n            action={(key) => (\r\n                <IconButton onClick={onClickDismiss(key)}>\r\n                    <CloseIcon fontSize=\"small\" style={{color: 'white'}} />\r\n                </IconButton>\r\n            )}\r\n        >\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Signin} />\r\n                <Route path=\"/signup\" exact component={Signup} />\r\n                {cmp}\r\n                <Route path=\"/changepass/:token\" exact component={ChangePass} />\r\n                <Route path=\"/activateuser/:token/:nickname\" exact component={ActivateUser} /> \r\n                <Redirect from='/' to='/' />       \r\n            </Switch>\r\n            \r\n            {subscribe ? <>\r\n                    <NewUserSubscriber />\r\n                    <UserDisconnectSubscriber />\r\n                    <IncomingMsgSubscriber />\r\n                    <RequestFriendSubscriber />\r\n                    <DeclinedFriendshipSubscriber />\r\n                    <AcceptFriendshipSubscriber />\r\n                    <DeletedContactSubscriber />\r\n                    <BlokedContactSubscriber />\r\n                    <RecibedMessageSubscriber />\r\n                </>: null\r\n            }\r\n            <TimerCmp />\r\n        </SnackbarProvider>\r\n        \r\n    </MainContainter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {RecoilRoot} from 'recoil';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n//import 'fontsource-roboto';\r\nimport \"fontsource-roboto/300.css\"\r\nimport \"fontsource-roboto/400.css\"\r\nimport \"fontsource-roboto/500.css\"\r\nimport \"fontsource-roboto/700.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>      \r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\nserviceWorker.register();\r\n"],"sourceRoot":""}