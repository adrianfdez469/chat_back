{"version":3,"sources":["view/mainButton/mainButton.view.js","view/addContact/addContact.view.js","view/addContact/addContact.controller.js","view/addContact/index.js","view/mainButton/mainButton.controller.js","view/mainButton/index.js"],"names":["useStyles","makeStyles","theme","speedDial","position","bottom","spacing","right","icon","color","palette","text","secondary","MainButtonView","idioma","handleOpen","handleClose","open","openAddContactView","classes","SpeedDial","ariaLabel","className","SpeedDialIcon","onClose","onOpen","SpeedDialAction","key","tooltipTitle","addContact","tooltipOpen","onClick","sendAll","console","log","alert","avatar","backgroundColor","blue","dialogContent","padding","search","borderRadius","shape","fade","common","white","marginLeft","width","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","UserItem","user","sendFriendRequest","ListItem","email","ListItemAvatar","Avatar","src","DEFAULT_CONFIG","server","avatarUrl","ListItemText","primary","nickname","ListItemSecondaryAction","IconButton","blockinguser","grey","userId","disabled","InputSearch","buscarUsuarios","inputSearchRef","React","useState","searchState","setSearchState","InputBase","onKeyPress","event","charCode","placeholder","root","input","inputProps","value","onChange","target","inputRef","endAdornment","InputAdornment","size","aria-label","AddContactView","closeAddContactWin","users","Dialog","maxWidth","onEntering","aria-labelledby","DialogTitle","id","dialogTitle","title","Divider","DialogContent","dividers","List","style","minHeight","map","DialogActions","Button","autoFocus","close","AddContactController","props","useRecoilValue","idiomaState","useRecoilState","addContactViewOpenState","addContactState","setAddContactState","setUsers","openErrorNotification","useNotificationHook","useRef","userData","loginData","friendDispatcher","useSetRecoilState","friendSelector","authMiddleware","token","axios","post","stringPattern","current","start","limit","headers","then","resp","status","data","catch","err","lbErrorLoadingUsers","useEffect","filter","action","payload","friend","socketClient","getSocket","emit","userIdRequester","userIdRequested","lbErrorSendigFriendRequest","AddContact","MainButtonController","setOpen","addContactViewState","setAddContactViewState","MainButton"],"mappings":"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","file":"static/js/12.284bdea7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\r\nimport text from './idioma.json'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    speedDial: {\r\n      position: 'absolute',\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n    icon: {\r\n        color: theme.palette.text.secondary\r\n    }\r\n  }));\r\n\r\nconst MainButtonView = ({idioma, handleOpen, handleClose, open, openAddContactView}) => {\r\n\r\n  const classes = useStyles();\r\n  \r\n\r\n    return (\r\n      <>\r\n        <SpeedDial\r\n            ariaLabel=\"SpeedDial tooltip example\"\r\n            className={classes.speedDial}            \r\n            icon={<SpeedDialIcon />}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            open={open}\r\n        >\r\n          <SpeedDialAction\r\n            key='add'\r\n            icon={<PersonAddIcon className={classes.icon}/>}\r\n            tooltipTitle={text.addContact[idioma]}\r\n            tooltipOpen\r\n            onClick={openAddContactView}\r\n          />\r\n          <SpeedDialAction\r\n            key='addgroup'\r\n            icon={<CallSplitIcon className={classes.icon}/>}\r\n            tooltipTitle={text.sendAll[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje de difusion');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          {/*<SpeedDialAction\r\n            key='addgroup'\r\n            icon={<GroupAddIcon className={classes.icon}/>}\r\n            tooltipTitle={text.addGroup[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Crear un grupo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='send'\r\n            icon={<MessageIcon className={classes.icon}/>}\r\n            tooltipTitle={text.sendMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje a un contacto que no esta en tu lista de contacto');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='share'\r\n            icon={<ShareIcon className={classes.icon}/>}\r\n            tooltipTitle={text.shareMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Compartir la aplicacion por correo electronivo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />*/}\r\n        </SpeedDial>\r\n      </>\r\n    );\r\n\r\n}\r\nexport default MainButtonView;","import React from 'react';\r\n\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport { blue, red, grey } from '@material-ui/core/colors';\r\n\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport text from './idioma.json';\r\nimport { ListItemSecondaryAction } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n      backgroundColor: blue[100],\r\n      color: blue[600],\r\n    },\r\n    dialogContent: {\r\n      padding: 0\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n          backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },*/\r\n      },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      inputRoot: {\r\n        color: 'inherit',\r\n      },\r\n      inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n          width: '12ch',\r\n          '&:focus': {\r\n            width: '20ch',\r\n          },\r\n        },*/\r\n      },\r\n\r\n  }));\r\n\r\nconst AddContactView = ({idioma, closeAddContactWin, open,\r\n    buscarUsuarios, users,\r\n    inputSearchRef,\r\n    sendFriendRequest\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Dialog\r\n            maxWidth=\"xs\"\r\n            onEntering={() => {}}\r\n            aria-labelledby=\"confirmation-dialog-title\"\r\n            open={open}\r\n            onClose={closeAddContactWin}\r\n        >\r\n            <DialogTitle id=\"confirmation-dialog-title\" className={classes.dialogTitle}>{text.title[idioma]} </DialogTitle>\r\n            <Divider />\r\n            <InputSearch idioma={idioma} buscarUsuarios={buscarUsuarios} inputSearchRef={inputSearchRef}/>\r\n            <DialogContent dividers className={classes.dialogContent}>\r\n                <List style={{minHeight:'200px'}}>\r\n                    {\r\n                        users.map(user => {\r\n                            return (\r\n                                <UserItem user={user} sendFriendRequest={sendFriendRequest}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={closeAddContactWin} color=\"primary\">\r\n                    {text.close[idioma]}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n\r\n}\r\n\r\nconst UserItem = ({user, sendFriendRequest}) => {\r\n\r\n    const classes = useStyles();\r\n    //const [iconButtonDisabledState, setIconButtonDisabledState] = React.useState(false)\r\n\r\n    const disableItem = () => {\r\n        //setIconButtonDisabledState(true);\r\n        sendFriendRequest(user.userId);\r\n\r\n    }\r\n\r\n    return (\r\n        <ListItem key={user.email} >\r\n            <ListItemAvatar>\r\n                <Avatar className={classes.avatar} src={DEFAULT_CONFIG.server + user.avatarUrl}></Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={user.nickname}\r\n                secondary={user.email}\r\n            />\r\n            \r\n                <ListItemSecondaryAction>\r\n                    <IconButton color={user.blockinguser ? grey[100] : blue[300]} onClick={disableItem} disabled={user.blockinguser}>\r\n                        <AddIcon color={user.blockinguser ? 'disabled' : \"primary\"}/>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            \r\n        </ListItem>\r\n    )\r\n\r\n}\r\n\r\nconst InputSearch = ({idioma, buscarUsuarios, inputSearchRef}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [searchState, setSearchState] = React.useState('');\r\n\r\n    const onChangeSearch = ({target: {value}}) => {\r\n        setSearchState(value);\r\n    }\r\n    const clearSearch = () => {\r\n        setSearchState('');\r\n    }\r\n    const keyPressHandler = (event) => {\r\n        if(event.charCode === 13){\r\n            buscarUsuarios();\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className={classes.search}>\r\n                <div className={classes.searchIcon}>\r\n                    <SearchIcon />\r\n                </div>\r\n                <InputBase\r\n                    onKeyPress={keyPressHandler}\r\n                    placeholder={text.search[idioma]}\r\n                    classes={{\r\n                        root: classes.inputRoot,\r\n                        input: classes.inputInput,\r\n                    }}\r\n                    inputProps={{ 'aria-label': 'search' }}\r\n                    value={searchState}\r\n                    onChange={onChangeSearch}\r\n                    inputRef={inputSearchRef}\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            {searchState !== '' ?\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={clearSearch}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            : null}\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={buscarUsuarios}\r\n                            >\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                        </InputAdornment> \r\n                        \r\n                    }\r\n                />\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default AddContactView;","import React, {useState, useEffect, useRef} from 'react';\r\nimport {useRecoilValue, useRecoilState, useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport useNotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport AddContactView from './addContact.view';\r\nimport authMiddleware from '../../authMiddleware';\r\nimport text from './idioma.json';\r\nimport {addContactViewOpenState, loginData/*, friendSelector*/} from '../../components/recoil/atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\n\r\nimport {idiomaState} from '../../components/recoil/atoms'\r\nimport socketClient from '../../utils/socket';\r\n\r\nconst AddContactController = props => {\r\n    const idioma = useRecoilValue(idiomaState); \r\n    const [addContactState, setAddContactState] = useRecoilState(addContactViewOpenState);\r\n    const [users, setUsers] = useState([]);\r\n    const {openErrorNotification} = useNotificationHook();\r\n    const inputSearchRef = useRef({value: ''});\r\n    const userData = useRecoilValue(loginData);\r\n\r\n    //const addContact = useSetRecoilState(friendSelector);\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    \r\n\r\n    const buscarUsuarios = () => {\r\n        \r\n        const optimisticAction = (token) => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/searchContact`, {\r\n                stringPattern: inputSearchRef.current.value,\r\n                start: 0,\r\n                limit: 20\r\n            }, {\r\n                headers: {\r\n                    \"Authorization\": token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    setUsers(resp.data.users);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.lbErrorLoadingUsers[idioma]);\r\n            });\r\n        }\r\n        authMiddleware(optimisticAction);\r\n    }\r\n\r\n    useEffect(() => {\r\n        buscarUsuarios();\r\n    }, [])\r\n\r\n    const sendFriendRequest = (userId) => {\r\n        \r\n        const optimisticAction = (token) => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/sendFriendRequest`, {\r\n                userId: userId\r\n            }, {\r\n                headers: {\r\n                    \"Authorization\": token\r\n                }\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    setUsers(users => {\r\n                        return users.filter(user => user.userId !== userId);\r\n                    });\r\n\r\n                    //addContact(resp.data.friend);\r\n                    friendDispatcher({action: 'add', payload: {friend: resp.data.friend}});\r\n                    \r\n                }\r\n            })\r\n            .then(() => {\r\n                const client = socketClient.getSocket();\r\n                client.emit('request friendship', {\r\n                    userIdRequester: userData.userId,\r\n                    userIdRequested: userId,\r\n                    token: token\r\n                });\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.lbErrorSendigFriendRequest[idioma]);\r\n            });\r\n        }\r\n        authMiddleware(optimisticAction);\r\n    }\r\n\r\n    const closeAddContactWin = () => {\r\n        setAddContactState(false);\r\n    }\r\n\r\n    return <AddContactView \r\n        idioma={idioma}\r\n        closeAddContactWin={closeAddContactWin}\r\n        open={addContactState}\r\n\r\n        users={users}\r\n        buscarUsuarios={buscarUsuarios}\r\n\r\n        inputSearchRef={inputSearchRef} \r\n        sendFriendRequest={sendFriendRequest}\r\n    />;\r\n\r\n}\r\nexport default AddContactController;","import React from 'react';\r\nimport AddContactController from './addContact.controller';\r\n\r\nconst AddContact = props => {\r\n\r\n    return <AddContactController />;\r\n\r\n}\r\n\r\nexport default AddContact;","import React, {useState} from 'react';\r\nimport {useRecoilState, useRecoilValue} from 'recoil';\r\nimport MainButtonView from './mainButton.view';\r\nimport AddContact from '../addContact';\r\n\r\n\r\nimport {idiomaState, addContactViewOpenState} from '../../components/recoil/atoms';\r\n\r\nconst MainButtonController = props => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [addContactViewState,setAddContactViewState] = useRecoilState(addContactViewOpenState);\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    \r\n    const openAddContactView = () => {\r\n        setAddContactViewState(true);\r\n    }\r\n\r\n    return <>\r\n        <MainButtonView \r\n            open={open}\r\n            handleOpen={handleOpen}\r\n            handleClose={handleClose}\r\n            idioma={idioma}\r\n            openAddContactView={openAddContactView}\r\n        />\r\n        {addContactViewState ? <AddContact /> : null}\r\n        \r\n    </>;\r\n\r\n}\r\nexport default MainButtonController;","import React from 'react';\r\nimport MainButtonController from './mainButton.controller';\r\nconst MainButton = props => {\r\n\r\n    return <MainButtonController />;\r\n\r\n}\r\nexport default MainButton;"],"sourceRoot":""}