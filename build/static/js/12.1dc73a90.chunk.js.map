{"version":3,"sources":["components/recoil/selectors.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/events/newUserSubscriber.js","components/events/userDisconnectSubscriber.js","components/events/incomingMsgSubscriber.js","components/events/declinedFriendshipSubscriber.js","components/events/requestFriendshipSubscriber.js","components/events/acceptedFriendshipSubscriber.js","components/events/deletedContactSubscriber.js","components/events/blokedContactSubscriber.js","components/events/recibedMessageSubscriber.js","components/events/index.js"],"names":["friendSelector","selector","key","get","friendsAtom","length","sort","f1","f2","friendShipStatus","socketId","email","set","a","action","payload","oldFriends","friends","push","friend","fIndex","findIndex","f","contactId","slice","concat","index","unread","data","dataObj","map","cantidad","lastMsg","lastMessage","datetime","filter","friendId","Array","isArray","idx","dat","userId","conectedFriendName","nickname","updatedFriend","notification","msg","idiomaState","variant","disconectedFriendName","initConversationSelector","conversation","getMessageState","userOriginId","UserDestinyId","readed","getConversationWithContact","oldConversation","message","_id","content","state","userOrigin","userDestiny","addMsgToConversationSelector","newMessageObj","messageId","editMsgToStateSavedSelector","consecutive","modMessage","editAllMsgToReadedSelector","_toConsumableArray","arr","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","UserSubscriber","props","client","socket","getSocket","friendDispatcher","useSetRecoilState","userData","useRecoilValue","loginData","enqueueSnackbar","useSnackbar","useEffect","on","console","log","text","connected","emit","off","disconnected","IncomingMsgSubscriber","useRecoilState","chatConversation","setConvertation","newStateObj","myMsg","active","novistos","DeclinedFriendshipSubscriber","socketClient","idioma","useNotifications","openErrorNotification","declinerId","socketIdDecliner","declinedId","socketIdDeclined","authMiddleware","token","axios","post","DEFAULT_CONFIG","server","headers","then","resp","status","declinedInv","catch","err","response","RequestFriendSubscriber","userIdRequester","userIdRequested","socketIdRequester","requestedInv","errorLoadingFriends","AcceptedFriendshipSubscriber","accepterId","socketIdAccepter","accept","DeletedContactSubscriber","deleterId","socketIdDeleter","delete","BlokedContactSubscriber","blokerId","socketIdBloked","block","RecibedMessageSubscriber","addMsgToConversation","editMsgToStateSaved","editAllMsgToReaded","activeChatContactId","activeChatWith","socketIdSender","contact","find","writingYou","notifyTo","localStorage","getItem","soketIdContact","Events"],"mappings":"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","file":"static/js/12.1dc73a90.chunk.js","sourcesContent":["import {selector} from 'recoil';\r\n\r\nimport {friendsAtom, idiomaState, messagesAtom, getConversationWithContact} from './atoms';\r\n\r\nconst friendSelector = selector({\r\n    key: 'friendSelector',\r\n    get: ({get}) => {\r\n        if(get(friendsAtom).length > 0){\r\n            const friends = [...get(friendsAtom)];\r\n\r\n            return friends.sort(\r\n                (f1,f2) => {\r\n                    \r\n                    if(f1.friendShipStatus === 1 && f2.friendShipStatus === 1){\r\n                        if(f1.socketId && !f2.socketId) return -1;\r\n                        if(!f1.socketId && f2.socketId) return 1;    \r\n                    }\r\n                    if(f1.friendShipStatus < f2.friendShipStatus) return -1; \r\n                    if(f1.friendShipStatus > f2.friendShipStatus) return 1;\r\n                    if(f1.email < f2.email) return -1; \r\n                    if(f1.email > f2.email) return 1; \r\n                }\r\n            );\r\n        }else{\r\n            return [];\r\n        }\r\n        \r\n    },\r\n    set: async ({set, get}, {action, payload}) => {\r\n\r\n        switch(action){\r\n            case 'initialize': \r\n                set(friendsAtom, oldFriends => {\r\n                    if(oldFriends.length === 0){\r\n                        return payload.friends;\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                break;\r\n            case 'add':\r\n                set(friendsAtom, oldFriends => {\r\n                    const friends = [...oldFriends];\r\n                    friends.push(payload.friend);\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'update':\r\n                set(friendsAtom, oldFriends => {\r\n                    const fIndex = oldFriends.findIndex(f => f.contactId === payload.friend.contactId);\r\n                    const friends = oldFriends.slice(0, fIndex)\r\n                                            .concat([payload.friend])\r\n                                            .concat(oldFriends.slice(fIndex+1));\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'reset_cant_no_leidos':\r\n                set(friendsAtom, oldFriends => {\r\n                    const index = oldFriends.findIndex(friend => friend.contactId === payload.contactId);\r\n                    return oldFriends.slice(0, index).concat([{...oldFriends[index], unread: 0}]).concat(oldFriends.slice(index+1));\r\n                });\r\n                break;\r\n            case 'set_message_info': // Para poner la cantidad de mensajes sin leer, el ultimo mensaje y la fecha del ultimo mensaje\r\n                set(friendsAtom, oldFriends => {\r\n                    const data = payload.dataObj;\r\n                    const newFriends = oldFriends.map(friend => {\r\n                        if(data[friend.contactId]){\r\n                            let cantidad = 0;\r\n                            if(friend.unread){\r\n                                cantidad = friend.unread;\r\n                            }\r\n                            if(data[friend.contactId].cantidad){\r\n                                cantidad += data[friend.contactId].cantidad; \r\n                            }\r\n                            return {...friend, \r\n                                unread:  cantidad,\r\n                                lastMsg: data[friend.contactId].lastMessage,\r\n                                datetime: data[friend.contactId].datetime\r\n                            }\r\n                        }\r\n                        return friend;\r\n                    });\r\n                    return newFriends;\r\n                });\r\n            break;\r\n            case 'delete':\r\n                set(friendsAtom, oldFriends => {\r\n                    return oldFriends.filter(f => f.contactId !== payload.friendId);\r\n                });\r\n                break;\r\n            case 'connect':                \r\n                if(Array.isArray(payload.data)){\r\n                    set(friendsAtom, oldFriends => {\r\n                        return oldFriends.map(friend => {\r\n                            const idx = payload.data.findIndex(dat => dat.userId === friend.contactId);\r\n                            if(idx >= 0){\r\n                                return {...friend, socketId: payload.data[idx].socketId};     \r\n                            }\r\n                            return {...friend};\r\n                        });\r\n                    }); \r\n                }else{\r\n\r\n                    const {userId, socketId} = payload.data;\r\n                    let conectedFriendName = null;\r\n                    let friendShipStatus = 0;\r\n                    \r\n                    set(friendsAtom, oldFriends => {\r\n                        const fIndex = oldFriends.findIndex(f => f.contactId === userId);\r\n                        if(fIndex >= 0){\r\n                            conectedFriendName = oldFriends[fIndex].nickname;\r\n                            friendShipStatus = oldFriends[fIndex].friendShipStatus;\r\n                            const updatedFriend = {...oldFriends[fIndex], socketId: socketId };\r\n                        \r\n                            const friends = oldFriends.slice(0, fIndex)\r\n                                                    .concat([updatedFriend])\r\n                                                    .concat(oldFriends.slice(fIndex+1));\r\n                            return friends;\r\n                        }\r\n                        return oldFriends;\r\n                    });\r\n                    if(conectedFriendName && friendShipStatus === 1)\r\n                        payload.notification(`${conectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'info'});\r\n                }                \r\n                break;\r\n            case 'disconnect':\r\n                let disconectedFriendName = null;\r\n                let friendShipStatus = 0;\r\n                \r\n                set(friendsAtom, oldFriends => {\r\n                    \r\n                    const index = oldFriends.findIndex(friend => friend.socketId === payload.socketId);\r\n                    if(index >= 0){\r\n                        disconectedFriendName = oldFriends[index].nickname;\r\n                        friendShipStatus = oldFriends[index].friendShipStatus;\r\n                        return [...oldFriends].slice(0, index).concat([{...oldFriends[index], socketId: null}]).concat(oldFriends.slice(index+1));\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                if(disconectedFriendName && friendShipStatus === 1)\r\n                    payload.notification(`${disconectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'warning'});\r\n                break;\r\n            \r\n                default: break;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst messageStates = {\r\n    'NINGUNO': 0, // Cuando no es enviado por el propio usuario, sino que se lo enviaron a el, por lo que los estados no tienen sentido para este tipo de mensajes\r\n    'ENVIADO': 1,\r\n    'GUARDADO': 2,\r\n    'LEIDO': 3\r\n};\r\n\r\nconst initConversationSelector = selector({\r\n    key:'conversationSelector',\r\n    set: ({set}, {contactId, conversation}) => {\r\n\r\n        const getMessageState = (userOriginId, UserDestinyId, contactId, readed) => {\r\n\r\n            if(userOriginId === contactId){\r\n                return 0;\r\n            }else if(UserDestinyId === contactId){\r\n                return readed ? 3 : 2;\r\n            }\r\n        }\r\n\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return conversation.map(message => {\r\n                return {\r\n                    _id: message._id,\r\n                    content: message.content,\r\n                    datetime: message.datetime,\r\n                    state: getMessageState(message.userOrigin, message.userDestiny, contactId, message.readed)\r\n                };\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nconst addMsgToConversationSelector = selector({\r\n    key: 'addMessageToConversation',\r\n    set: ({set}, {contactId, messageId, content, datetime, state}) => {\r\n        const newMessageObj = {\r\n            _id: messageId,\r\n            content: content,\r\n            datetime: datetime,\r\n            state: state\r\n        };        \r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation.concat([newMessageObj]);\r\n        });\r\n\r\n    }\r\n});\r\n\r\n\r\nconst editMsgToStateSavedSelector = selector({\r\n    key: 'editMsgToStateSavedSelector',\r\n    set: ({set}, {contactId, messageId, datetime, consecutive}) => {\r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            \r\n            const index = oldConversation.findIndex(message => message._id === consecutive && message.state === 1);\r\n            if(index >= 0){\r\n                const modMessage = {...oldConversation[index], state: 2, _id: messageId, datetime: datetime};\r\n                return oldConversation.slice(0, index).concat([modMessage]).concat(oldConversation.slice(index+1));\r\n            }\r\n            return oldConversation;\r\n        });\r\n    }\r\n});\r\n\r\nconst editAllMsgToReadedSelector = selector({\r\n    key: 'editAllMsgToSavedSelector',\r\n    set: ({set}, {contactId}) => {\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation\r\n                .map(message => {\r\n                    if(message.state !== 0)\r\n                        return {...message, state: 3}\r\n                    else\r\n                        return message;\r\n                });\r\n        });\r\n    }\r\n});\r\n\r\nexport {friendSelector, initConversationSelector, addMsgToConversationSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket'\r\nimport {loginData} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\n\r\nconst UserSubscriber = props => {   \r\n    const client = socket.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n\r\n        client.on('new user', data => {\r\n            console.log('new user');\r\n            \r\n            friendDispatcher({\r\n                action: 'connect', \r\n                payload: {\r\n                    data:data,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.connected\r\n                }\r\n            });\r\n        });\r\n        \r\n        if(userData)\r\n            client.emit('new user', {userId: userData.userId});\r\n\r\n        return () => client.off('new user');\r\n    }, [friendDispatcher, client, userData]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst UserSubscriber = props => {\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const client = socket.getSocket();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('user disconnect', data => {\r\n            friendDispatcher({\r\n                action: 'disconnect', \r\n                payload: {\r\n                    socketId: data.socketId,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.disconnected\r\n                }\r\n            })\r\n        });\r\n\r\n        return () => client.off('user disconnect');\r\n    }, []);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {chatConversation} from '../recoil/atoms';\r\nimport socket from '../../utils/socket'\r\nconst IncomingMsgSubscriber = props => {\r\n\r\n    const [conversation, setConvertation] = useRecoilState(chatConversation);\r\n    const client = socket.getSocket();\r\n    \r\n    useEffect(() => {\r\n\r\n        client.on('message', data => {\r\n            const newStateObj = {...conversation};\r\n            if(conversation[data.socketId]){\r\n                newStateObj[data.socketId] = {...conversation[data.socketId]};\r\n                if(conversation[data.socketId].text){\r\n                    newStateObj[data.socketId].text = [...conversation[data.socketId].text, {myMsg: false, msg: data.msg}];\r\n                    \r\n                    \r\n\r\n                    if(data.socketId !== newStateObj.active){\r\n                        newStateObj[data.socketId].novistos = newStateObj[data.socketId].novistos + 1; \r\n                    }\r\n                }else{\r\n                    newStateObj[data.socketId].text = [];\r\n                }\r\n                \r\n            }else{\r\n                newStateObj[data.socketId] = {\r\n                    text: [{myMsg: false, msg: data.msg}],\r\n                    nickname: null,\r\n                    socketId: null,\r\n                    novistos: 1\r\n                }\r\n            }\r\n            setConvertation(newStateObj);\r\n        });\r\n\r\n        return () => client.off('message');\r\n    }, [conversation]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default IncomingMsgSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst DeclinedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('declined friendship', ({declinerId, declinedId, socketIdDecliner, socketIdDeclined}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: declinerId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDecliner}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.declinedInv[idioma]}`, {variant: \"warning\"});\r\n                })\r\n                .catch(err => {\r\n                    if(err.response.status === 404){\r\n                        friendDispatcher({\r\n                            action: 'delete', \r\n                            payload: {\r\n                                friendId: declinerId\r\n                            }});\r\n                    }\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('declined friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeclinedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst RequestFriendSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('requested friendship', ({userIdRequester, userIdRequested, socketIdRequester}) => {\r\n            if(userIdRequested === userData.userId){\r\n                \r\n                \r\n                const optimisticAction = token => {\r\n                    axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                        friendId: userIdRequester\r\n                    },{\r\n                        headers: {\r\n                            'Authorization': token\r\n                        }\r\n                    })\r\n                    .then(resp => {\r\n                        if(resp.status === 200){\r\n                            \r\n                            friendDispatcher({\r\n                                action: 'add', \r\n                                payload: {\r\n                                    friend: {...resp.data.friend, socketId: socketIdRequester}\r\n                                }});\r\n                            return resp.data.friend;\r\n                        }\r\n                    })\r\n                    .then(friend => {\r\n                        enqueueSnackbar(`${friend.nickname} ${text.requestedInv[idioma]}`, {variant: \"success\"});\r\n                    })\r\n                    .catch(err => {\r\n                        openErrorNotification(text.errorLoadingFriends[idioma])\r\n                    });\r\n                }\r\n                authMiddleware(optimisticAction);\r\n                \r\n            }\r\n        });\r\n\r\n        return () => client.off('requested friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RequestFriendSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst AcceptedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('accepted friendship', ({accepterId, socketIdAccepter}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: accepterId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdAccepter}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.accept[idioma]}`, {variant: \"success\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('accepted friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default AcceptedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst DeletedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('deleted contact', ({deleterId, socketIdDeleter}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: deleterId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDeleter}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.delete[idioma]}`, {variant: \"error\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('deleted contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeletedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst BlokedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('blocked contact', ({blokerId, socketIdBloked}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: blokerId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdBloked}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.block[idioma]}`, {variant: \"error\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n        });\r\n\r\n        return () => client.off('bloked contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default BlokedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue, useRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport {addMsgToConversationSelector, friendSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector} from '../recoil/selectors';\r\nimport {loginData, activeChatWith, idiomaState} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst RecibedMessageSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const editMsgToStateSaved = useSetRecoilState(editMsgToStateSavedSelector);\r\n    const editAllMsgToReaded = useSetRecoilState(editAllMsgToReadedSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const activeChatContactId = useRecoilValue(activeChatWith);\r\n    const {enqueueSnackbar} = useSnackbar();\r\n    const [friends, friendDispatcher] = useRecoilState(friendSelector);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n        client.on('recived message', ({content, userOriginId, socketIdSender, messageId, datetime, consecutive}) => {\r\n            \r\n            const contact = friends.find(f => f.contactId === userOriginId);\r\n            if(activeChatContactId !== userOriginId){                \r\n                enqueueSnackbar(`${contact.nickname} ${text.writingYou[idioma]}`, {variant: 'info'});\r\n\r\n                const dataObj = {\r\n                    [userOriginId]: {\r\n                        cantidad: 1,\r\n                        lastMessage: content,\r\n                        datetime: datetime\r\n                    }\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n            }else{\r\n\r\n                const dataObj = {\r\n                    [userOriginId]: {\r\n                        cantidad: 0,\r\n                        lastMessage: content,\r\n                        datetime: datetime\r\n                    }\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n                const client = socketClient.getSocket();\r\n                client.emit('read messages', {\r\n                    userId: userData.userId,\r\n                    contactId: contact.contactId,\r\n                    notifyTo: contact.socketId,\r\n                    token: localStorage.getItem('token')\r\n                });\r\n            }\r\n            addMsgToConversation({\r\n                contactId: userOriginId,\r\n                messageId: messageId,\r\n                content: content,\r\n                datetime: datetime,\r\n                state: 0\r\n            });\r\n        });\r\n\r\n        client.on('saved message', ({contactId, messageId, datetime,consecutive,soketIdContact}) => {\r\n            editMsgToStateSaved({\r\n                contactId: contactId,\r\n                messageId: messageId,\r\n                datetime: datetime,\r\n                consecutive: consecutive\r\n            });\r\n        });\r\n\r\n        client.on('readed messages', ({contactId}) => {\r\n            editAllMsgToReaded({contactId})\r\n        });\r\n\r\n        return () => {\r\n            client.off('recived message');\r\n            client.off('saved message');\r\n            client.off('readed messages');\r\n        };\r\n    });\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RecibedMessageSubscriber;","import React from 'react';\r\n\r\n// Eventos\r\nimport NewUserSubscriber from './newUserSubscriber';\r\nimport UserDisconnectSubscriber from './userDisconnectSubscriber';\r\nimport IncomingMsgSubscriber from './incomingMsgSubscriber';\r\nimport DeclinedFriendshipSubscriber from './declinedFriendshipSubscriber';\r\nimport RequestFriendSubscriber from './requestFriendshipSubscriber';\r\nimport AcceptFriendshipSubscriber from './acceptedFriendshipSubscriber';\r\nimport DeletedContactSubscriber from './deletedContactSubscriber';\r\nimport BlokedContactSubscriber from './blokedContactSubscriber';\r\nimport RecibedMessageSubscriber from './recibedMessageSubscriber';\r\n\r\n\r\nconst Events = props => {\r\n\r\n    return <>\r\n    <NewUserSubscriber />\r\n    <UserDisconnectSubscriber />\r\n    <IncomingMsgSubscriber />\r\n    <RequestFriendSubscriber />\r\n    <DeclinedFriendshipSubscriber />\r\n    <AcceptFriendshipSubscriber />\r\n    <DeletedContactSubscriber />\r\n    <BlokedContactSubscriber />\r\n    <RecibedMessageSubscriber />\r\n</>;\r\n\r\n}\r\nexport default Events;"],"sourceRoot":""}