{"version":3,"sources":["components/socket.js","components/recoil/atoms.js","conf/configuration.js","components/login/login.js","components/contacts/avatar.js","components/contacts/contact.js","components/contacts/contacts.js","components/chat/message.js","components/chat/friendHeader/friendHeader.js","components/chat/chat.js","components/header/header.js","components/events/newUserSubscriber.js","components/events/userDisconnectSubscriber.js","components/events/incomingMsgSubscriber.js","components/backdrop/backdrop.js","App.js","serviceWorker.js","index.js"],"names":["socket","idiomaState","atom","key","default","loginData","chatConversation","contactListState","view","posibleViews","LOGIN","CONTACTS","CHAT","getAtom","backdropState","subscribeToEventsState","DEFAULT_CONFIG","server","socketClient","getSocket","openSocket","Login","props","idioma","useRecoilValue","setLoginData","useSetRecoilState","setView","useRecoilState","setSubscribeToEvents","setBackdrop","useState","nickname","valid","nick","setNick","setLogin","axios","post","then","resp","status","client","emit","_id","data","Error","socketId","id","catch","err","console","log","finally","className","text","welcome","type","placeholder","onChange","value","target","test","onKeyPress","event","charCode","onClick","txtBtn","VisualAvatar","size","novistos","styleOut","width","height","styleHead","styleBody","pos","toString","length","badgeStyle","top","right","style","Contact","conversation","setConversation","cantidad","lastMessage","msg","newConversation","active","activeOnline","Contacts","userData","contactList","setContactList","useEffect","get","map","user","filter","overflowY","contact","Message","myMsg","msgStyle","FriendHeader","backClick","online","Chat","loginDataUser","setConvertation","refAreaTexto","useRef","sendMsg","current","innerText","replace","newStateObj","from","toUserId","toSocketId","focus","element","document","getElementById","scrollTop","scrollHeight","elem","idx","arr","marginBottom","borderRadius","role","contentEditable","ref","disabled","btnSend","Header","setIdioma","UserSubscriber","setContactListState","on","off","IncomingMsgSubscriber","Backdrop","useBackdrop","class","App","viewState","subscribe","cmp","subscriptions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+JAEIA,E,gDCAEC,EAAcC,eAAK,CACrBC,IAAK,cACLC,QAAS,OAGPC,EAAYH,eAAK,CACnBC,IAAK,YACLC,QAAS,OAGPE,EAAmBJ,eAAK,CAC1BC,IAAK,mBACLC,QAAS,CACL,QAAU,KAIZG,EAAmBL,eAAK,CAC1BC,IAAK,mBACLC,QAAS,KAIPI,EAAO,CACTC,aAAc,CACVC,MAAO,QACPC,SAAU,WACVC,KAAM,QAEVC,QAASX,eAAK,CACVC,IAAK,OACLC,QAAS,WAIXU,EAAgBZ,eAAK,CACvBC,IAAK,gBACLC,SAAS,IAGPW,EAAyBb,eAAK,CAChCC,IAAK,yBACLC,SAAS,I,iDCrCAY,EAJA,CACTC,OAAQ,uCFWGC,EAVd,CACGC,UAAW,WACP,OAAInB,IACAA,EAASoB,IAAWJ,EAAeC,WGqEhCI,EApED,SAAAC,GACV,IAAMC,EAASC,yBAAevB,GACxBwB,EAAeC,4BAAkBrB,GACjCsB,EAAUD,4BAAkBlB,EAAKK,SAHpB,EAIwBe,yBAAerB,GAJvC,mBAKbsB,GALa,UAKUH,4BAAkBX,IACzCe,EAAcJ,4BAAkBZ,GANnB,EAOKiB,mBAAS,CAC7BC,SAAU,GAAIC,MAAO,OARN,mBAOZC,EAPY,KAONC,EAPM,KAmBbC,EAAW,SAACJ,GACdF,GAAY,GACZO,IACKC,KADL,UACatB,EAAeC,OAD5B,UAC4C,CAACe,SAAUA,IAClDO,MAAK,SAACC,GACH,GAAmB,MAAhBA,EAAKC,OAAe,CACnB,IAAMC,EAAS1C,EAAOmB,YAEtB,OADAuB,EAAOC,KAAK,WAAY,CAACX,SAAUA,EAAUY,IAAKJ,EAAKK,KAAKD,MACrD,CACHF,OAAQA,EACRV,SAAUA,EACVY,IAAIJ,EAAKK,KAAKD,KAGlB,MAAME,MAAO,oCAGpBP,MAAK,SAAAC,GACFf,EAAa,CAACO,SAAUQ,EAAKR,SAAUY,IAAKJ,EAAKI,IAAKG,SAAUP,EAAKE,OAAOM,QAE/ET,MAAK,WAAOV,GAAqB,MACjCU,MAAK,WAAOZ,EAAQnB,EAAKC,aAAaE,aACtCsC,OAAM,SAAAC,GAAQC,QAAQC,IAAIF,MAC1BG,SAAQ,WACLvB,GAAY,OAWxB,OACI,yBAAKwB,UAAU,SACX,4BAAKC,EAAKC,QAAQjC,IAClB,2BAAOkC,KAAK,OAAOC,YAAaH,EAAKG,YAAYnC,GAC7CoC,SA/CQ,SAAC,GAAuB,IAAbC,EAAY,EAArBC,OAASD,MACxB,8BAA8BE,KAAKF,GAClCzB,EAAQ,CAACH,SAAU4B,EAAO3B,OAAO,IAEjCE,EAAQ,CAACH,SAAU4B,EAAO3B,OAAO,KA4C7B8B,WAZK,SAACC,GACQ,KAAnBA,EAAMC,UACL7B,EAASF,EAAKF,WAWV4B,MAAO1B,EAAKF,SACZsB,UAAWpB,EAAKD,MAAQ,QAAU,YAErCC,EAAKD,MAAQ,4BAAQiC,QAAS,kBAAM9B,EAASF,EAAKF,YAAYuB,EAAKY,OAAO5C,IAAoB,O,cChC5F6C,EApCM,SAAC,GAA8B,IAAD,IAA5BC,YAA4B,MAArB,EAAqB,MAAlBC,gBAAkB,MAAP,EAAO,EAEzCC,EAAW,CACbC,MAAM,GAAD,OAAK,GAAGH,EAAR,MACLI,OAAO,GAAD,OAAK,GAAGJ,EAAR,OAGJK,EAAY,CACdF,MAAM,GAAD,OAAK,GAAGH,EAAR,MACLI,OAAO,GAAD,OAAK,GAAGJ,EAAR,OAGJM,EAAY,CACdH,MAAM,GAAD,OAAK,GAAGH,EAAR,MACLI,OAAO,GAAD,OAAK,GAAGJ,EAAR,OAEJO,EAAMN,EAASO,WAAWC,QAAU,EAAiC,EAA7BR,EAASO,WAAWC,OAAa,GACzEC,EAAa,CACfC,IAAI,IAAD,OAAMJ,EAAN,MACHK,MAAM,IAAD,OAAML,EAAN,OAGT,OACI,yBAAKtB,UAAU,UACX,yBAAKA,UAAU,YAAY4B,MAAOX,GAC9B,yBAAKjB,UAAU,aAAa4B,MAAOR,IACnC,yBAAKpB,UAAU,cAAc4B,MAAOP,KAEvCL,EAAW,EACN,0BAAMhB,UAAU,QAAQ4B,MAAOH,GAAaT,GAC5C,OCoBHa,EAjDC,SAAC,GAA+B,IAAD,EAMI,EANjCnD,EAA6B,EAA7BA,SAAUY,EAAmB,EAAnBA,IAAKG,EAAc,EAAdA,SAAc,EACHnB,yBAAetB,GADZ,mBACpC8E,EADoC,KACtBC,EADsB,KAErC1D,EAAUD,4BAAkBlB,EAAKK,SAEjCyE,GAAW,UAAAF,EAAaxC,UAAb,eAAmB0B,UAAWc,EAAaxC,GAAK0B,SAAW,EACxEiB,EAAc,GACfH,EAAaxC,IAAQwC,EAAaxC,GAAKW,OACtCgC,GAAc,UAAAH,EAAaxC,GAAKW,KAAK6B,EAAaxC,GAAKW,KAAKuB,OAAO,UAArD,eAAyDU,KAAMJ,EAAaxC,GAAKW,KAAK6B,EAAaxC,GAAKW,KAAKuB,OAAO,GAAGU,IAAM,IA0B/I,OACI,yBAAKlC,UAAU,uBAAuBY,QAvBhB,WAEtB,IAAMuB,EAAe,2BAAOL,GAAP,IAAqBM,OAAQ9C,EAAK+C,cAAc,IACjEF,EAAgB7C,GAQhB6C,EAAgB7C,GAAO,CACnBZ,SAAUA,EACVe,SAAUA,EACVQ,KAAK,YAAK6B,EAAaxC,GAAKW,MAC5Be,SAAU,GAXdmB,EAAgB7C,GAAO,CACnBZ,SAAUA,EACVuB,KAAM,GACNR,SAAUA,EACVuB,SAAU,GAUlBe,EAAgBI,GAChB9D,EAAQnB,EAAKC,aAAaG,QAKtB,kBAAC,EAAD,CAAc0D,SAAUgB,IACxB,yBAAKhC,UAAU,eACX,yBAAKA,UAAU,UACX,0BAAMA,UAAU,YAAYtB,GAC5B,0BAAMsB,UAAU,sBAEpB,yBAAKA,UAAU,WAAWiC,MCP3BK,EAhCE,SAAAtE,GACb,IAAMuE,EAAWrE,yBAAenB,GADV,EAEgBuB,yBAAerB,GAF/B,mBAEfuF,EAFe,KAEFC,EAFE,KAItBC,qBAAU,WACN3D,IAAM4D,IAAN,UAAajF,EAAeC,OAA5B,WACKsB,MAAK,SAAAC,GACiB,MAAhBA,EAAKC,QACJsD,EACIvD,EAAKK,KAAKA,KACLqD,KAAI,SAAAC,GAAI,MAAK,CAACjE,KAAMiE,EAAKnE,SAAUY,IAAKuD,EAAKvD,IAAKG,SAAUoD,EAAKpD,aACjEqD,QAAO,SAAAD,GAAI,OAAIA,EAAKvD,MAAQiD,EAASjD,WAIrDK,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC/B,IAOH,OACI,yBAAKgC,MANK,CACVmB,UAAW,SACX5B,OAAQ,sBAKHqB,EAAYI,KAAI,SAAAI,GACb,OAAO,yBAAKnG,IAAKmG,EAAQ1D,KAAK,kBAAC,EAAD,CAASZ,SAAUsE,EAAQpE,KAAMU,IAAK0D,EAAQ1D,IAAKG,SAAUuD,EAAQvD,iB,QCnBpGwD,EAXC,SAAC,GAAgC,IAAD,IAA9BC,aAA8B,SAAhBhB,EAAgB,EAAhBA,IAAKN,EAAW,EAAXA,MAE3BuB,EAAWD,EAAQ,QAAU,WAEnC,OACI,yBAAKlD,UAAS,kBAAamD,GAAYvB,MAAOA,GACzCM,ICYEkB,EAlBM,SAAC,GAA0C,IAAzC1E,EAAwC,EAAxCA,SAAU2E,EAA8B,EAA9BA,UAA8B,IAAnBC,cAAmB,SAE3D,OACI,yBAAKtD,UAAU,wBACX,yBAAKA,UAAU,SAASY,QAASyC,IACjC,kBAAC,EAAD,CAActC,KAAM,KAEpB,yBAAKf,UAAU,eACX,yBAAKA,UAAU,UACX,0BAAMA,UAAU,YAAYtB,GAC5B,0BAAMsB,UAAS,2BAAsBsD,EAAS,SAAS,YAAeA,EAAS,SAAW,eCyE/FC,EA9EF,SAAAvF,GAET,IAAMC,EAASC,yBAAevB,GACxB6G,EAAgBtF,yBAAenB,GAHnB,EAIsBuB,yBAAetB,GAJrC,mBAIX8E,EAJW,KAIG2B,EAJH,KAKZC,EAAeC,iBAAO,IACtBtF,EAAUD,4BAAkBlB,EAAKK,SAEjC6B,EAAS1C,EAAOmB,YAEhB+F,EAAU,WAEZ,IACM3D,EADUyD,EAAaG,QAAQC,UAChBC,QAAQ,wBAAyB,MACtD,GAAY,KAAT9D,EAAY,CACX,IAAM+D,EAAW,eAAOlC,GACxBkC,EAAYA,EAAY5B,QAAxB,eAAsC4B,EAAYlC,EAAaM,SAC/D4B,EAAYA,EAAY5B,QAAQnC,KAAhC,sBAA2C+D,EAAYA,EAAY5B,QAAQnC,MAA3E,CAAiF,CAACiD,OAAO,EAAMhB,IAAKjC,KACpGwD,EAAgBO,GAChB5E,EAAOC,KAAK,UAAW,CAAC4E,KAAMT,EAAclE,IAAK4E,SAAUpC,EAAaM,OAAQ+B,WAAYrC,EAAaA,EAAaM,QAAQ3C,SAAUyC,IAAKjC,IAC7IyD,EAAaG,QAAQC,UAAY,GACjCJ,EAAaG,QAAQO,UAK7B1B,qBAAU,WACN,IAAI2B,EAAUC,SAASC,eAAe,oBACnCF,IACCA,EAAQG,UAAYH,EAAQI,iBAoBpC,OACI,yBAAK/E,GAAG,iBACJ,kBAAC,EAAD,CAAc2D,UAjBP,WACXhF,EAAQnB,EAAKC,aAAaE,UAC1BoG,EAAgB,2BAAI3B,GAAL,IAAmBM,OAAQ,SAeL1D,SAAUoD,EAAaA,EAAaM,QAAQ1D,SAAU4E,OAAQxB,EAAaO,eAE5G,yBAAK3C,GAAG,oBACHoC,EAAaA,EAAaM,QAAQnC,KAAK2C,KAAI,SAAC8B,EAAMC,EAAKC,GACpD,IAAMhD,EAAQ,GAUd,OARGgD,EAAID,EAAM,IAAMD,EAAKxB,QAAU0B,EAAID,EAAI,GAAGzB,QACzCtB,EAAMiD,aAAe,OACrBjD,EAAMkD,aAAeJ,EAAKxB,MAAQ,qBAAuB,oBAE1DyB,EAAM,GAAKD,EAAKxB,QAAU0B,EAAID,EAAI,GAAGzB,QACpCtB,EAAMkD,cAAeJ,EAAKxB,MAAQ,wBAG/B,kBAAC,EAAD,iBAAawB,EAAb,CAAmB7H,IAAK8H,EAAK/C,MAAOA,SAInD,yBAAKlC,GAAG,UACJ,yBAAKA,GAAG,WAAWqF,KAAK,UAAUC,gBAAiBlD,EAAaO,aAAc4C,IAAKvB,EAAcjD,WA/B5F,SAACC,GACXoB,EAAaO,cACU,KAAnB3B,EAAMC,UACLiD,OA6BA,4BAAQlE,GAAG,aAAawF,UAAWpD,EAAaO,aAAczB,QAASgD,GAAU3D,EAAKkF,QAAQlH,OCrD/FmH,EArBA,SAAApH,GAAU,IAAD,EACQM,yBAAe3B,GADvB,mBACbsB,EADa,KACLoH,EADK,KAOpB,OACI,yBAAKrF,UAAU,aACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,YAAf,YAGJ,4BAAQM,MAAOrC,EAAQoC,SAVV,SAAC,GAAuB,IAAbC,EAAY,EAArBC,OAASD,MAC5B+E,EAAU/E,IASyCN,UAAU,gBACrD,4BAAQM,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,SCGDgF,EAlBQ,SAAAtH,GAAU,IAAD,EACeM,yBAAerB,GAD9B,mBACrBuF,EADqB,KACR+C,EADQ,KAEtBnG,EAAS1C,EAAOmB,YAWtB,OATA6E,qBAAU,WAMN,OAJAtD,EAAOoG,GAAG,YAAY,SAAAjG,GAClBgG,EAAoB,GAAD,mBAAK/C,GAAL,CAAkB,CAAC5D,KAAMW,EAAKb,SAAUY,IAAKC,EAAKD,IAAKG,SAAUF,EAAKE,gBAGtF,kBAAML,EAAOqG,IAAI,eACzB,CAACjD,IAGA,sCCQO8C,EAtBQ,SAAAtH,GAAU,IAAD,EACeM,yBAAerB,GAD9B,mBACrBuF,EADqB,KACR+C,EADQ,OAEYjH,yBAAetB,GAF3B,mBAErB8E,EAFqB,KAEPC,EAFO,KAGtB3C,EAAS1C,EAAOmB,YActB,OAZA6E,qBAAU,WASN,OAPAtD,EAAOoG,GAAG,mBAAmB,SAAAjG,GACzBgG,EAAoB/C,EAAYM,QAAO,SAAAE,GAAO,OAAIA,EAAQ1D,MAAQC,EAAKD,QACpEwC,EAAaM,SAAW7C,EAAKD,KAC5ByC,EAAgB,2BAAID,GAAL,IAAmBO,cAAc,QAIjD,kBAAMjD,EAAOqG,IAAI,sBACzB,CAAC3D,IAGA,sCCuBO4D,EA1Ce,SAAA1H,GAAU,IAAD,EAEKM,yBAAetB,GAFpB,mBAE5B8E,EAF4B,KAEd2B,EAFc,KAG7BrE,EAAS1C,EAAOmB,YAkCtB,OAhCA6E,qBAAU,WA6BN,OA3BAtD,EAAOoG,GAAG,WAAW,SAAAjG,GACjB,IAAMyE,EAAW,eAAOlC,GACrBA,EAAavC,EAAKD,MACjB0E,EAAYzE,EAAKD,KAAjB,eAA4BwC,EAAavC,EAAKD,MAC3CwC,EAAavC,EAAKD,KAAKW,MACtB+D,EAAYzE,EAAKD,KAAKW,KAAtB,sBAAiC6B,EAAavC,EAAKD,KAAKW,MAAxD,CAA8D,CAACiD,OAAO,EAAOhB,IAAK3C,EAAK2C,OAIpF3C,EAAKD,MAAQ0E,EAAY5B,SACxB4B,EAAYzE,EAAKD,KAAK0B,SAAWgD,EAAYzE,EAAKD,KAAK0B,SAAW,IAGtEgD,EAAYzE,EAAKD,KAAKW,KAAO,IAIjC+D,EAAYzE,EAAKD,KAAO,CACpBW,KAAM,CAAC,CAACiD,OAAO,EAAOhB,IAAK3C,EAAK2C,MAChCxD,SAAU,KACVe,SAAU,KACVuB,SAAU,GAGlByC,EAAgBO,MAGb,kBAAM5E,EAAOqG,IAAI,cACzB,CAAC3D,IAGA,sCClBO6D,G,OApBE,SAAA3H,GAEb,IAAM4H,EAAc1H,yBAAeV,GAEnC,OAAGoI,GACC/F,QAAQC,IAAR,8BAAmC8F,IAC5B,yBAAK5F,UAAU,YAClB,yBAAK6F,MAAM,UAAX,gBAGG,OC0BAC,MAzBf,WACE,IAAMC,EAAY7H,yBAAehB,EAAKK,SAChCyI,EAAY9H,yBAAeT,GAC3BwI,EAAMF,IAAc7I,EAAKC,aAAaC,MAAQ,kBAAC,EAAD,MAAY2I,IAAc7I,EAAKC,aAAaE,SAAW,kBAAC,EAAD,MAAe,kBAAC,EAAD,MAEtH6I,EAAgB,KASpB,OARGF,IACDE,EAAgB,oCACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACC,kBAAC,EAAD,QAIG,oCAAE,kBAAC,EAAD,MACN,yBAAKlG,UAAU,QAEb,kBAAC,EAAD,MACCiG,EACAC,KCtBWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,aAAD,KACE,kBAAC,EAAD,QAGJpC,SAASC,eAAe,SDsHpB,kBAAmBoC,WACrBA,UAAUC,cAAcC,MACrB5H,MAAK,SAAA6H,GACJA,EAAaC,gBAEdpH,OAAM,SAAAqH,GACLnH,QAAQmH,MAAMA,EAAMC,a","file":"static/js/main.488c98d0.chunk.js","sourcesContent":["import openSocket from 'socket.io-client'; \r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nlet socket;\r\n\r\nconst socketClient = \r\n {   \r\n    getSocket: () => {\r\n        if(!socket){\r\n            socket = openSocket(DEFAULT_CONFIG.server);\r\n            return socket;    \r\n        }\r\n        return socket;\r\n    }\r\n};\r\n\r\nexport default socketClient;","import {atom} from 'recoil';\r\n\r\nconst idiomaState = atom({\r\n    key: 'idiomaState',\r\n    default: 'es'\r\n});\r\n\r\nconst loginData = atom({\r\n    key: 'loginData',\r\n    default: null\r\n})\r\n\r\nconst chatConversation = atom({\r\n    key: 'chatConversation',\r\n    default: {\r\n        'active': false\r\n    }\r\n});\r\n\r\nconst contactListState = atom({\r\n    key: 'contactListState',\r\n    default: []\r\n});\r\n\r\n\r\nconst view = {\r\n    posibleViews: {\r\n        LOGIN: 'LOGIN',\r\n        CONTACTS: 'CONTACTS',\r\n        CHAT: 'CHAT'\r\n    },\r\n    getAtom: atom({\r\n        key: 'view',\r\n        default: 'LOGIN'\r\n    })\r\n};\r\n\r\nconst backdropState = atom({\r\n    key: 'backdropState',\r\n    default: false\r\n});\r\n\r\nconst subscribeToEventsState = atom({\r\n    key: 'subscribeToEventsState',\r\n    default: false\r\n})\r\n\r\nexport {idiomaState, loginData, chatConversation, view, contactListState, subscribeToEventsState, backdropState};","const DEV = {\r\n    server: \"http://localhost:3001\"\r\n}\r\nconst PROD = {\r\n    server: \"https://shut-app-back.herokuapp.com\"\r\n}\r\n\r\nexport const DEFAULT_CONFIG = process.env.NODE_ENV === \"development\" ? DEV : PROD;","import React, {useState} from 'react';\r\nimport { useRecoilValue, useRecoilState, useSetRecoilState } from 'recoil';\r\nimport axios from 'axios';\r\nimport {idiomaState, loginData, view, contactListState, subscribeToEventsState, backdropState} from '../recoil/atoms';\r\n//import classes from './login.module.css';\r\nimport text from './idioma.json';\r\nimport socket from '../socket';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\n\r\nconst Login = props => {\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const setView = useSetRecoilState(view.getAtom);\r\n    const [contactList, setContactListState] = useRecoilState(contactListState);\r\n    const setSubscribeToEvents = useSetRecoilState(subscribeToEventsState);\r\n    const setBackdrop = useSetRecoilState(backdropState);\r\n    const [nick, setNick] = useState({\r\n        nickname: '', valid: null\r\n    });\r\n\r\n    const setNickName = ({target: {value}}) => {\r\n        if(/^[a-zA-Z][a-zA-Z0-9]{2,10}$/.test(value)){\r\n            setNick({nickname: value, valid: true});\r\n        }else{\r\n            setNick({nickname: value, valid: false});\r\n        }\r\n    };\r\n\r\n    const setLogin = (nickname) => {\r\n        setBackdrop(true);\r\n        axios\r\n            .post(`${DEFAULT_CONFIG.server}/login`, {nickname: nickname})\r\n            .then((resp) => {\r\n                if(resp.status === 200){\r\n                    const client = socket.getSocket();\r\n                    client.emit('new user', {nickname: nickname, _id: resp.data._id});\r\n                    return {\r\n                        client: client, \r\n                        nickname: nickname, \r\n                        _id:resp.data._id\r\n                    };\r\n                }else{\r\n                    throw Error ('El login no fue satiscactorio');\r\n                }\r\n            })\r\n            .then(resp => {\r\n                setLoginData({nickname: resp.nickname, _id: resp._id, socketId: resp.client.id});\r\n            })\r\n            .then(() => {setSubscribeToEvents(true)})\r\n            .then(() => {setView(view.posibleViews.CONTACTS)})\r\n            .catch(err => {console.log(err)})\r\n            .finally(() => {\r\n                setBackdrop(false);\r\n            });\r\n    }\r\n\r\n    const keyPress = (event) => {\r\n        if(event.charCode === 13){\r\n            setLogin(nick.nickname);\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className='login'>\r\n            <h2>{text.welcome[idioma]}</h2>\r\n            <input type=\"text\" placeholder={text.placeholder[idioma]} \r\n                onChange={setNickName}\r\n                onKeyPress={keyPress} \r\n                value={nick.nickname} \r\n                className={nick.valid ? 'valid' : 'invalid'}                \r\n            />\r\n            {nick.valid ? <button onClick={() => setLogin(nick.nickname)}>{text.txtBtn[idioma]}</button> : null}\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Login;","import React from 'react';\r\n\r\n\r\n\r\nconst VisualAvatar = ({size = 1, novistos = 0}) => {\r\n\r\n    const styleOut = {\r\n        width: `${50*size}px`,\r\n        height: `${50*size}px`\r\n    }\r\n\r\n    const styleHead = {\r\n        width: `${20*size}px`,\r\n        height: `${20*size}px`\r\n    };\r\n\r\n    const styleBody = {\r\n        width: `${35*size}px`,\r\n        height: `${30*size}px`\r\n    }\r\n    const pos = novistos.toString().length <= 3 ? novistos.toString().length * 3 : 10; \r\n    const badgeStyle = {\r\n        top: `-${pos}px`,\r\n        right: `-${pos}px`\r\n    }\r\n\r\n    return (\r\n        <div className=\"avatar\">\r\n            <div className='avatarOut' style={styleOut}>\r\n                <div className='avatarHead' style={styleHead}></div>\r\n                <div className='avatarTrunk' style={styleBody}></div>\r\n            </div>\r\n            {novistos > 0 \r\n                ? <span className=\"badge\" style={badgeStyle}>{novistos}</span>\r\n                : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VisualAvatar;","import React from 'react';\r\nimport {useRecoilState, useSetRecoilState} from 'recoil';\r\nimport {chatConversation, view} from '../recoil/atoms';\r\nimport VisualAvatar from './avatar';\r\n\r\nconst Contact = ({nickname, _id, socketId}) => {\r\n    const [conversation, setConversation] = useRecoilState(chatConversation);\r\n    const setView = useSetRecoilState(view.getAtom);\r\n    \r\n    const cantidad = conversation[_id]?.novistos ? conversation[_id].novistos : 0;\r\n    let lastMessage = '';\r\n    if(conversation[_id] && conversation[_id].text){        \r\n        lastMessage = conversation[_id].text[conversation[_id].text.length-1]?.msg ? conversation[_id].text[conversation[_id].text.length-1].msg : '';\r\n    }\r\n    \r\n\r\n    const startConvertation = () => {\r\n        \r\n        const newConversation = {...conversation, active: _id, activeOnline: true};\r\n        if(!newConversation[_id]) {\r\n            newConversation[_id] = {\r\n                nickname: nickname,\r\n                text: [],\r\n                socketId: socketId,\r\n                novistos: 0\r\n            };            \r\n        }else{\r\n            newConversation[_id] = {\r\n                nickname: nickname,\r\n                socketId: socketId,\r\n                text: [...conversation[_id].text],\r\n                novistos: 0\r\n            }\r\n        }\r\n        setConversation(newConversation);\r\n        setView(view.posibleViews.CHAT);\r\n    };  \r\n\r\n    return (\r\n        <div className='contact contact-item' onClick={startConvertation}>\r\n            <VisualAvatar novistos={cantidad}/>\r\n            <div className='contactBody'>\r\n                <div className='status'>\r\n                    <span className=\"nickname\">{nickname}</span>\r\n                    <span className=\"connectionStatus\"></span>\r\n                </div>\r\n                <div className=\"lastMsg\">{lastMessage}</div>\r\n            </div>\r\n\r\n            {/*<button className={classes.options}>...</button>*/}\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Contact;","import React, {useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport Contact from './contact';\r\nimport {loginData, contactListState} from '../recoil/atoms';\r\nimport {useRecoilValue, useRecoilState} from 'recoil';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\n\r\nconst Contacts = props => {\r\n    const userData = useRecoilValue(loginData);\r\n    const [contactList, setContactList] = useRecoilState(contactListState);\r\n\r\n    useEffect(() => {\r\n        axios.get(`${DEFAULT_CONFIG.server}/users`)\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    setContactList(\r\n                        resp.data.data\r\n                            .map(user => ({nick: user.nickname, _id: user._id, socketId: user.socketId}))\r\n                            .filter(user => user._id !== userData._id)\r\n                    );\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n\r\n    const style = {\r\n        overflowY: \"scroll\",\r\n        height: 'calc(100% - 70px)'\r\n    };\r\n\r\n    return (\r\n        <div style={style}> \r\n            {contactList.map(contact => {\r\n                return <div key={contact._id}><Contact nickname={contact.nick} _id={contact._id} socketId={contact.socketId}/></div>\r\n            })}\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Contacts;","import React from 'react';\r\n//import './chateditor.css';\r\n\r\nconst Message = ({myMsg = true, msg, style}) => {\r\n\r\n    const msgStyle = myMsg ? 'mymsg' : 'notmymsg';\r\n\r\n    return (\r\n        <div className={`message ${msgStyle}`} style={style}>\r\n            {msg}\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Message;","import React from 'react';\r\nimport VisualAvatar from '../../contacts/avatar';\r\n\r\nconst FriendHeader = ({nickname, backClick, online = true}) => {\r\n\r\n    return (\r\n        <div className='contact contact-chat'>\r\n            <div className=\"goBack\" onClick={backClick}></div>\r\n            <VisualAvatar size={0.8}/>\r\n\r\n            <div className='contactBody'>\r\n                <div className='status'>\r\n                    <span className=\"nickname\">{nickname}</span>\r\n                    <span className={`connectionStatus ${online ? 'online':'offline' }`}>{online ? 'Online' : 'Offline'}</span>\r\n                </div>\r\n            </div>\r\n            {/*<button className={classes.options}>...</button>*/}\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default FriendHeader;","import React, {useRef, useEffect} from 'react';\r\nimport {useRecoilValue, useRecoilState, useSetRecoilState} from 'recoil';\r\nimport {idiomaState, chatConversation, loginData, view} from '../recoil/atoms';\r\nimport text from './idioma.json';\r\nimport Message from './message';\r\nimport socket from '../socket';\r\nimport FriendHeader from './friendHeader/friendHeader';\r\n\r\nconst Chat = props => {\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const loginDataUser = useRecoilValue(loginData);\r\n    const [conversation, setConvertation] = useRecoilState(chatConversation);\r\n    const refAreaTexto = useRef('');\r\n    const setView = useSetRecoilState(view.getAtom);\r\n\r\n    const client = socket.getSocket();\r\n    \r\n    const sendMsg = () => {\r\n        \r\n        const oldtext = refAreaTexto.current.innerText;\r\n        const text = oldtext.replace(/^(\\s*\\r*)(.)(\\s*\\r*)$/, '$2');\r\n        if(text !== ''){\r\n            const newStateObj = {...conversation};\r\n            newStateObj[newStateObj.active] = {...newStateObj[conversation.active]};\r\n            newStateObj[newStateObj.active].text = [...newStateObj[newStateObj.active].text, {myMsg: true, msg: text}];\r\n            setConvertation(newStateObj);\r\n            client.emit('message', {from: loginDataUser._id, toUserId: conversation.active, toSocketId: conversation[conversation.active].socketId, msg: text});\r\n            refAreaTexto.current.innerText = '';\r\n            refAreaTexto.current.focus();\r\n        }\r\n        \r\n    };\r\n\r\n    useEffect(() => {\r\n        var element = document.getElementById('chatConversation');\r\n        if(element)\r\n            element.scrollTop = element.scrollHeight;\r\n    });\r\n\r\n    \r\n\r\n    const goBack = () => {\r\n        setView(view.posibleViews.CONTACTS);\r\n        setConvertation({...conversation, active: null});\r\n    }\r\n\r\n    const keyPress = (event) => {\r\n        if(conversation.activeOnline){\r\n            if(event.charCode === 13){\r\n                sendMsg();\r\n                \r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div id=\"chatContainer\">\r\n            <FriendHeader backClick={goBack} nickname={conversation[conversation.active].nickname} online={conversation.activeOnline}/>\r\n            \r\n            <div id=\"chatConversation\">\r\n                {conversation[conversation.active].text.map((elem, idx, arr) => {\r\n                    const style = {};\r\n\r\n                    if(arr[idx + 1] && elem.myMsg === arr[idx+1].myMsg){\r\n                        style.marginBottom = '-3px';\r\n                        style.borderRadius = elem.myMsg ? \"10px 0px 10px 10px\" : \"0 10px 10px 10px\";\r\n                    }\r\n                    if(idx > 0 && elem.myMsg === arr[idx-1].myMsg){\r\n                        style.borderRadius = elem.myMsg ? \"10px 10px 10px 10px\" : \"10px 10px 10px 10px\";\r\n                    }\r\n                    \r\n                    return <Message {...elem} key={idx} style={style}/>\r\n                })}\r\n            </div>\r\n\r\n            <div id=\"editor\"> \r\n                <div id=\"textarea\" role=\"textbox\" contentEditable={conversation.activeOnline} ref={refAreaTexto} onKeyPress={keyPress}></div>\r\n                <button id=\"sendButton\" disabled={!conversation.activeOnline} onClick={sendMsg}>{text.btnSend[idioma]}</button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Chat;","import React from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {idiomaState} from '../recoil/atoms';\r\n//import classes from './header.module.css';\r\n\r\nconst Header = props => {\r\n    const [idioma, setIdioma] = useRecoilState(idiomaState);\r\n\r\n    const changeIdioma = ({target: {value}}) => {\r\n        setIdioma(value);\r\n    }\r\n\r\n    return (\r\n        <div className='headerdiv'>\r\n            <div className='infoapp'>\r\n                <div className='apptitle'>Chatapp</div>\r\n            </div>\r\n            \r\n            <select value={idioma} onChange={changeIdioma} className='idiomaselect'>\r\n                <option value=\"es\">ES</option>\r\n                <option value=\"en\">EN</option>\r\n            </select>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Header;","import React, {useEffect} from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {contactListState} from '../recoil/atoms';\r\nimport socket from '../socket'\r\n\r\nconst UserSubscriber = props => {\r\n    const [contactList, setContactListState] = useRecoilState(contactListState);\r\n    const client = socket.getSocket();\r\n\r\n    useEffect(() => {\r\n\r\n        client.on('new user', data => {\r\n            setContactListState([...contactList, {nick: data.nickname, _id: data._id, socketId: data.socketId}]);\r\n        });\r\n\r\n        return () => client.off('new user');\r\n    }, [contactList]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {contactListState, chatConversation} from '../recoil/atoms';\r\nimport socket from '../socket'\r\n\r\nconst UserSubscriber = props => {\r\n    const [contactList, setContactListState] = useRecoilState(contactListState);\r\n    const [conversation, setConversation] = useRecoilState(chatConversation);\r\n    const client = socket.getSocket();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('user disconnect', data => {\r\n            setContactListState(contactList.filter(contact => contact._id !== data._id));\r\n            if(conversation.active === data._id){\r\n                setConversation({...conversation, activeOnline: false});\r\n            }\r\n        });\r\n\r\n        return () => client.off('user disconnect');\r\n    }, [conversation]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {chatConversation} from '../recoil/atoms';\r\nimport socket from '../socket'\r\nconst IncomingMsgSubscriber = props => {\r\n\r\n    const [conversation, setConvertation] = useRecoilState(chatConversation);\r\n    const client = socket.getSocket();\r\n    \r\n    useEffect(() => {\r\n\r\n        client.on('message', data => {\r\n            const newStateObj = {...conversation};\r\n            if(conversation[data._id]){\r\n                newStateObj[data._id] = {...conversation[data._id]};\r\n                if(conversation[data._id].text){\r\n                    newStateObj[data._id].text = [...conversation[data._id].text, {myMsg: false, msg: data.msg}];\r\n                    \r\n                    \r\n\r\n                    if(data._id !== newStateObj.active){\r\n                        newStateObj[data._id].novistos = newStateObj[data._id].novistos + 1; \r\n                    }\r\n                }else{\r\n                    newStateObj[data._id].text = [];\r\n                }\r\n                \r\n            }else{\r\n                newStateObj[data._id] = {\r\n                    text: [{myMsg: false, msg: data.msg}],\r\n                    nickname: null,\r\n                    socketId: null,\r\n                    novistos: 1\r\n                }\r\n            }\r\n            setConvertation(newStateObj);\r\n        });\r\n\r\n        return () => client.off('message');\r\n    }, [conversation]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default IncomingMsgSubscriber;","import React from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {backdropState} from '../recoil/atoms';\r\n\r\nconst Backdrop = props => {\r\n\r\n    const useBackdrop = useRecoilValue(backdropState);\r\n    \r\n    if(useBackdrop){\r\n        console.log(`se muestra backdrop ${useBackdrop}`)\r\n        return <div className=\"backdrop\">\r\n            <div class=\"loader\">Loading...</div>\r\n        </div>;\r\n    }else{\r\n        return null;\r\n    }\r\n/*\r\n    const cmpBody = useBackdrop ? <div className=\"backdrop\"></div> : <></>;\r\n\r\n    return (\r\n        {cmpBody}\r\n    );*/\r\n\r\n}\r\nexport default Backdrop;","import React from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {view, subscribeToEventsState} from './components/recoil/atoms';\r\nimport Login from './components/login/login';\r\nimport Contacts from './components/contacts/contacts';\r\nimport Chat from './components/chat/chat';\r\n//import Chat from './components/chat/chat';\r\nimport Header from './components/header/header';\r\nimport NewUserSubscriber from './components/events/newUserSubscriber';\r\nimport UserDisconnectSubscriber from './components/events/userDisconnectSubscriber';\r\nimport IncomingMsgSubscriber from './components/events/incomingMsgSubscriber';\r\nimport './App.css';\r\nimport Backdrop from './components/backdrop/backdrop';\r\n\r\n\r\nfunction App() {\r\n  const viewState = useRecoilValue(view.getAtom);\r\n  const subscribe = useRecoilValue(subscribeToEventsState);\r\n  const cmp = viewState === view.posibleViews.LOGIN ? <Login /> : viewState === view.posibleViews.CONTACTS ? <Contacts /> : <Chat />;\r\n\r\n  let subscriptions = null;\r\n  if(subscribe){\r\n    subscriptions = <>\r\n      <NewUserSubscriber />\r\n      <UserDisconnectSubscriber />\r\n      {<IncomingMsgSubscriber />}\r\n    </>\r\n  }\r\n\r\n  return (<><Backdrop />\r\n      <div className=\"main\">\r\n      \r\n        <Header />        \r\n        {cmp}\r\n        {subscriptions}\r\n        \r\n      </div></>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {RecoilRoot} from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}