{"version":3,"sources":["components/recoil/selectors.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/events/newUserSubscriber.js","components/events/userDisconnectSubscriber.js","components/events/incomingMsgSubscriber.js","components/events/declinedFriendshipSubscriber.js","components/events/requestFriendshipSubscriber.js","components/events/acceptedFriendshipSubscriber.js","components/events/deletedContactSubscriber.js","components/events/blokedContactSubscriber.js","components/events/recibedMessageSubscriber.js","components/events/index.js"],"names":["friendSelector","selector","key","get","friendsAtom","length","sort","f1","f2","friendShipStatus","socketId","email","set","a","action","payload","oldFriends","friends","push","friend","fIndex","findIndex","f","contactId","slice","concat","index","unread","data","dataObj","map","cantidad","lastMsg","lastMessage","datetime","activeChatWith","friendId","oldActive","filter","Array","isArray","idx","dat","userId","conectedFriendName","nickname","updatedFriend","notification","msg","idiomaState","variant","disconectedFriendName","initConversationSelector","conversation","getMessageState","userOriginId","UserDestinyId","readed","getConversationWithContact","oldConversation","message","_id","content","state","userOrigin","userDestiny","addMsgToConversationSelector","newMessageObj","messageId","editMsgToStateSavedSelector","consecutive","modMessage","editAllMsgToReadedSelector","_toConsumableArray","arr","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","UserSubscriber","props","client","socket","getSocket","friendDispatcher","useSetRecoilState","userData","useRecoilValue","loginData","enqueueSnackbar","useSnackbar","useEffect","on","text","connected","emit","off","disconnected","IncomingMsgSubscriber","useRecoilState","chatConversation","setConvertation","newStateObj","myMsg","active","novistos","DeclinedFriendshipSubscriber","socketClient","idioma","openErrorNotification","useNotifications","declinerId","socketIdDecliner","declinedId","socketIdDeclined","authMiddleware","token","axios","post","DEFAULT_CONFIG","server","headers","then","resp","status","declinedInv","catch","err","response","connError","RequestFriendSubscriber","userIdRequester","userIdRequested","socketIdRequester","requestedInv","errorLoadingFriends","AcceptedFriendshipSubscriber","accepterId","socketIdAccepter","accept","DeletedContactSubscriber","deleterId","socketIdDeleter","delete","BlokedContactSubscriber","blokerId","socketIdBloked","block","RecibedMessageSubscriber","addMsgToConversation","editMsgToStateSaved","editAllMsgToReaded","activeChatContactId","socketIdSender","contact","find","writingYou","notifyTo","localStorage","getItem","soketIdContact","Events"],"mappings":"mVAIMA,EAAiBC,mBAAS,CAC5BC,IAAK,iBACLC,IAAK,YAAY,IAAVA,EAAS,EAATA,IACH,OAAGA,EAAIC,KAAaC,OAAS,EACZ,YAAOF,EAAIC,MAETE,MACX,SAACC,EAAGC,GAEA,GAA2B,IAAxBD,EAAGE,kBAAkD,IAAxBD,EAAGC,iBAAuB,CACtD,GAAGF,EAAGG,WAAaF,EAAGE,SAAU,OAAQ,EACxC,IAAIH,EAAGG,UAAYF,EAAGE,SAAU,OAAO,EAE3C,OAAGH,EAAGE,iBAAmBD,EAAGC,kBAA0B,EACnDF,EAAGE,iBAAmBD,EAAGC,iBAAyB,EAClDF,EAAGI,MAAQH,EAAGG,OAAe,EAC7BJ,EAAGI,MAAQH,EAAGG,MAAc,OAA/B,KAID,IAIfC,IAAI,WAAD,4BAAE,mDAAAC,EAAA,sDAAQD,EAAR,EAAQA,IAAKT,EAAb,EAAaA,IAAOW,EAApB,EAAoBA,OAAQC,EAA5B,EAA4BA,QAA5B,KAEMD,EAFN,OAGQ,eAHR,OAWQ,QAXR,OAkBQ,WAlBR,OA2BQ,yBA3BR,QAiCQ,qBAjCR,QAwDQ,WAxDR,QAmEQ,YAnER,QAsGQ,eAtGR,+BAIOF,EAAIR,KAAa,SAAAY,GACb,OAAyB,IAAtBA,EAAWX,OACHU,EAAQE,QAEZD,KARlB,mCAYOJ,EAAIR,KAAa,SAAAY,GACb,IAAMC,EAAO,YAAOD,GAEpB,OADAC,EAAQC,KAAKH,EAAQI,QACdF,KAflB,mCAmBOL,EAAIR,KAAa,SAAAY,GACb,IAAMI,EAASJ,EAAWK,WAAU,SAAAC,GAAC,OAAIA,EAAEC,YAAcR,EAAQI,OAAOI,aAIxE,OAHgBP,EAAWQ,MAAM,EAAGJ,GACXK,OAAO,CAACV,EAAQI,SAChBM,OAAOT,EAAWQ,MAAMJ,EAAO,OAvBnE,oCA4BOR,EAAIR,KAAa,SAAAY,GACb,IAAMU,EAAQV,EAAWK,WAAU,SAAAF,GAAM,OAAIA,EAAOI,YAAcR,EAAQQ,aAC1E,OAAOP,EAAWQ,MAAM,EAAGE,GAAOD,OAAO,CAAC,2BAAIT,EAAWU,IAAhB,IAAwBC,OAAQ,MAAKF,OAAOT,EAAWQ,MAAME,EAAM,OA9BvH,oCAkCOd,EAAIR,KAAa,SAAAY,GACb,IAAMY,EAAOb,EAAQc,QAkBrB,OAjBmBb,EAAWc,KAAI,SAAAX,GAC9B,GAAGS,EAAKT,EAAOI,WAAW,CACtB,IAAIQ,EAAW,EAOf,OANGZ,EAAOQ,SACNI,EAAWZ,EAAOQ,QAEnBC,EAAKT,EAAOI,WAAWQ,WACtBA,GAAYH,EAAKT,EAAOI,WAAWQ,UAEhC,2BAAIZ,GAAX,IACIQ,OAASI,EACTC,QAASJ,EAAKT,EAAOI,WAAWU,YAChCC,SAAUN,EAAKT,EAAOI,WAAWW,WAGzC,OAAOf,QAnDtB,oCAyDmChB,EAAIgC,OACLpB,EAAQqB,UAC/BxB,EAAIuB,KAAgB,SAAAE,GAChB,OAAO,QAGfzB,EAAIR,KAAa,SAAAY,GACb,OAAOA,EAAWsB,QAAO,SAAAhB,GAAC,OAAIA,EAAEC,YAAcR,EAAQqB,eAhEjE,oCAoEUG,MAAMC,QAAQzB,EAAQa,MACrBhB,EAAIR,KAAa,SAAAY,GACb,OAAOA,EAAWc,KAAI,SAAAX,GAClB,IAAMsB,EAAM1B,EAAQa,KAAKP,WAAU,SAAAqB,GAAG,OAAIA,EAAIC,SAAWxB,EAAOI,aAChE,OAAGkB,GAAO,EACC,2BAAItB,GAAX,IAAmBT,SAAUK,EAAQa,KAAKa,GAAK/B,WAE5C,eAAIS,UAGjB,EAEyBJ,EAAQa,KAA5Be,EAFN,EAEMA,OAAQjC,EAFd,EAEcA,SACXkC,EAAqB,KACrBnC,EAAmB,EAEvBG,EAAIR,KAAa,SAAAY,GACb,IAAMI,EAASJ,EAAWK,WAAU,SAAAC,GAAC,OAAIA,EAAEC,YAAcoB,KACzD,GAAGvB,GAAU,EAAE,CACXwB,EAAqB5B,EAAWI,GAAQyB,SACxCpC,EAAmBO,EAAWI,GAAQX,iBACtC,IAAMqC,EAAa,2BAAO9B,EAAWI,IAAlB,IAA2BV,SAAUA,IAKxD,OAHgBM,EAAWQ,MAAM,EAAGJ,GACXK,OAAO,CAACqB,IACRrB,OAAOT,EAAWQ,MAAMJ,EAAO,IAG5D,OAAOJ,KAER4B,GAA2C,IAArBnC,GACrBM,EAAQgC,aAAR,UAAwBH,EAAxB,YAA8C7B,EAAQiC,IAAI7C,EAAI8C,OAAiB,CAACC,QAAS,UAnGxG,oCAuGWC,EAAwB,KACxB1C,EAAmB,EAEvBG,EAAIR,KAAa,SAAAY,GAEb,IAAMU,EAAQV,EAAWK,WAAU,SAAAF,GAAM,OAAIA,EAAOT,WAAaK,EAAQL,YACzE,OAAGgB,GAAS,GACRyB,EAAwBnC,EAAWU,GAAOmB,SAC1CpC,EAAmBO,EAAWU,GAAOjB,iBAC9B,YAAIO,GAAYQ,MAAM,EAAGE,GAAOD,OAAO,CAAC,2BAAIT,EAAWU,IAAhB,IAAwBhB,SAAU,SAAQe,OAAOT,EAAWQ,MAAME,EAAM,KAEnHV,KAERmC,GAA8C,IAArB1C,GACxBM,EAAQgC,aAAR,UAAwBI,EAAxB,YAAiDpC,EAAQiC,IAAI7C,EAAI8C,OAAiB,CAACC,QAAS,YArHvG,qGAAF,qDAAC,KAsIFE,EAA2BnD,mBAAS,CACtCC,IAAI,uBACJU,IAAK,cAAuC,IAArCA,EAAoC,EAApCA,IAAOW,EAA6B,EAA7BA,UAAW8B,EAAkB,EAAlBA,aAEfC,EAAkB,SAACC,EAAcC,EAAejC,EAAWkC,GAE7D,OAAGF,IAAiBhC,EACT,EACFiC,IAAkBjC,EAChBkC,EAAS,EAAI,OADlB,GAKV7C,EAAI8C,YAA2BnC,IAAY,SAAAoC,GACvC,OAAON,EAAavB,KAAI,SAAA8B,GACpB,MAAO,CACHC,IAAKD,EAAQC,IACbC,QAASF,EAAQE,QACjB5B,SAAU0B,EAAQ1B,SAClB6B,MAAOT,EAAgBM,EAAQI,WAAYJ,EAAQK,YAAa1C,EAAWqC,EAAQH,kBAOjGS,EAA+BjE,mBAAS,CAC1CC,IAAK,2BACLU,IAAK,cAA8D,IAA5DA,EAA2D,EAA3DA,IAAOW,EAAoD,EAApDA,UACJ4C,EAAgB,CAClBN,IAF0D,EAAzCO,UAGjBN,QAH0D,EAA9BA,QAI5B5B,SAJ0D,EAArBA,SAKrC6B,MAL0D,EAAXA,OAQnDnD,EAAI8C,YAA2BnC,IAAY,SAAAoC,GACvC,OAAOA,EAAgBlC,OAAO,CAAC0C,UAOrCE,EAA8BpE,mBAAS,CACzCC,IAAK,8BACLU,IAAK,cAA2D,IAAzDA,EAAwD,EAAxDA,IAAOW,EAAiD,EAAjDA,UAAW6C,EAAsC,EAAtCA,UAAWlC,EAA2B,EAA3BA,SAAUoC,EAAiB,EAAjBA,YAE1C1D,EAAI8C,YAA2BnC,IAAY,SAAAoC,GAEvC,IAAMjC,EAAQiC,EAAgBtC,WAAU,SAAAuC,GAAO,OAAIA,EAAQC,MAAQS,GAAiC,IAAlBV,EAAQG,SAC1F,GAAGrC,GAAS,EAAE,CACV,IAAM6C,EAAU,2BAAOZ,EAAgBjC,IAAvB,IAA+BqC,MAAO,EAAGF,IAAKO,EAAWlC,SAAUA,IACnF,OAAOyB,EAAgBnC,MAAM,EAAGE,GAAOD,OAAO,CAAC8C,IAAa9C,OAAOkC,EAAgBnC,MAAME,EAAM,IAEnG,OAAOiC,QAKba,EAA6BvE,mBAAS,CACxCC,IAAK,4BACLU,IAAK,cAAyB,IAAvBA,EAAsB,EAAtBA,IAAOW,EAAe,EAAfA,UACVX,EAAI8C,YAA2BnC,IAAY,SAAAoC,GACvC,OAAOA,EACF7B,KAAI,SAAA8B,GACD,OAAqB,IAAlBA,EAAQG,MACA,2BAAIH,GAAX,IAAoBG,MAAO,IAEpBH,Y,m2BCnOhB,SAASa,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAInC,MAAMC,QAAQkC,GAAM,OAAO,OAAAC,EAAA,GAAiBD,GDGzC,CAAkBA,IELZ,SAA0BE,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOrC,MAAMyC,KAAKJ,GFIvD,CAAgBF,IAAQ,OAAAO,EAAA,GAA2BP,IGLvE,WACb,MAAM,IAAIQ,UAAU,wIHIwE,K,+GImC/EC,EA/BQ,SAAAC,GACnB,IAAMC,EAASC,IAAOC,YAChBC,EAAmBC,4BAAkBzF,KACrC0F,EAAWC,yBAAeC,KACxBC,EAAoBC,cAApBD,gBAsBR,OApBAE,qBAAU,WAiBN,OAfAV,EAAOW,GAAG,YAAY,SAAApE,GAElB4D,EAAiB,CACb1E,OAAQ,UACRC,QAAS,CACLa,KAAKA,EACLmB,aAAc8C,EACd7C,IAAKiD,EAAKC,gBAKnBR,GACCL,EAAOc,KAAK,WAAY,CAACxD,OAAQ+C,EAAS/C,SAEvC,kBAAM0C,EAAOe,IAAI,eACzB,CAACZ,EAAkBH,EAAQK,IAG1B,sCCHOP,EA1BQ,SAAAC,GACnB,IAAMI,EAAmBC,4BAAkBzF,KACrCqF,EAASC,IAAOC,YACdM,EAAoBC,cAApBD,gBAkBR,OAhBAE,qBAAU,WAaN,OAXAV,EAAOW,GAAG,mBAAmB,SAAApE,GACzB4D,EAAiB,CACb1E,OAAQ,aACRC,QAAS,CACLL,SAAUkB,EAAKlB,SACfqC,aAAc8C,EACd7C,IAAKiD,EAAKI,mBAKf,kBAAMhB,EAAOe,IAAI,sBACzB,IAGC,sC,yBCiBOE,EA1Ce,SAAAlB,GAAU,IAAD,EAEKmB,yBAAeC,KAFpB,mBAE5BnD,EAF4B,KAEdoD,EAFc,KAG7BpB,EAASC,IAAOC,YAkCtB,OAhCAQ,qBAAU,WA6BN,OA3BAV,EAAOW,GAAG,WAAW,SAAApE,GACjB,IAAM8E,EAAW,eAAOrD,GACrBA,EAAazB,EAAKlB,WACjBgG,EAAY9E,EAAKlB,UAAjB,eAAiC2C,EAAazB,EAAKlB,WAChD2C,EAAazB,EAAKlB,UAAUuF,MAC3BS,EAAY9E,EAAKlB,UAAUuF,KAA3B,sBAAsC5C,EAAazB,EAAKlB,UAAUuF,MAAlE,CAAwE,CAACU,OAAO,EAAO3D,IAAKpB,EAAKoB,OAI9FpB,EAAKlB,WAAagG,EAAYE,SAC7BF,EAAY9E,EAAKlB,UAAUmG,SAAWH,EAAY9E,EAAKlB,UAAUmG,SAAW,IAGhFH,EAAY9E,EAAKlB,UAAUuF,KAAO,IAItCS,EAAY9E,EAAKlB,UAAY,CACzBuF,KAAM,CAAC,CAACU,OAAO,EAAO3D,IAAKpB,EAAKoB,MAChCH,SAAU,KACVnC,SAAU,KACVmG,SAAU,GAGlBJ,EAAgBC,MAGb,kBAAMrB,EAAOe,IAAI,cACzB,CAAC/C,IAGA,sC,0CC8BOyD,EA3DsB,SAAA1B,GAEjC,IAAMC,EAAS0B,IAAaxB,YACtBC,EAAmBC,4BAAkBzF,KACnC6F,EAAoBC,cAApBD,gBACFmB,EAASrB,yBAAe1C,KACvBgE,EAAyBC,cAAzBD,sBAkDP,OAhDAlB,qBAAU,WA2CN,OAzCAV,EAAOW,GAAG,uBAAuB,YAAmE,IAAjEmB,EAAgE,EAAhEA,WAAwBC,GAAwC,EAApDC,WAAoD,EAAxCD,kBAAwC,EAAtBE,iBAoCzEC,aAlCyB,SAAAC,GACrBC,IAAMC,KAAN,UAAcC,IAAeC,OAA7B,wBAA0D,CACtDxF,SAAU+E,GACZ,CACEU,QAAS,CACL,cAAiBL,KAGxBM,MAAK,SAAAC,GACF,GAAmB,MAAhBA,EAAKC,OAOJ,OALAxC,EAAiB,CACb1E,OAAQ,SACRC,QAAS,CACLI,OAAO,2BAAK4G,EAAKnG,KAAKT,QAAhB,IAAwBT,SAAU0G,OAEzCW,EAAKnG,KAAKT,UAGxB2G,MAAK,SAAA3G,GACF0E,EAAgB,GAAD,OAAI1E,EAAO0B,SAAX,YAAuBoD,EAAKgC,YAAYjB,IAAW,CAAC9D,QAAS,eAE/EgF,OAAM,SAAAC,GACCA,EAAIC,SAEyB,MAAxBD,EAAIC,SAASJ,QAClBxC,EAAiB,CACb1E,OAAQ,SACRC,QAAS,CACLqB,SAAU+E,KALlBF,EAAsBhB,EAAKoC,UAAUrB,aAe9C,kBAAM3B,EAAOe,IAAI,0BACzB,IAII,sCCEIkC,EA1DiB,SAAAlD,GAE5B,IAAMC,EAAS0B,IAAaxB,YACtBC,EAAmBC,4BAAkBzF,KACnC6F,EAAoBC,cAApBD,gBACFH,EAAWC,yBAAeC,KAC1BoB,EAASrB,yBAAe1C,KACvBgE,EAAyBC,cAAzBD,sBAgDP,OA9CAlB,qBAAU,WAyCN,OAvCAV,EAAOW,GAAG,wBAAwB,YAA4D,IAA1DuC,EAAyD,EAAzDA,gBAAiBC,EAAwC,EAAxCA,gBAAiBC,EAAuB,EAAvBA,kBAClE,GAAGD,IAAoB9C,EAAS/C,OAAO,CAiCnC4E,aA9ByB,SAAAC,GACrBC,IAAMC,KAAN,UAAcC,IAAeC,OAA7B,wBAA0D,CACtDxF,SAAUmG,GACZ,CACEV,QAAS,CACL,cAAiBL,KAGxBM,MAAK,SAAAC,GACF,GAAmB,MAAhBA,EAAKC,OAOJ,OALAxC,EAAiB,CACb1E,OAAQ,MACRC,QAAS,CACLI,OAAO,2BAAK4G,EAAKnG,KAAKT,QAAhB,IAAwBT,SAAU+H,OAEzCV,EAAKnG,KAAKT,UAGxB2G,MAAK,SAAA3G,GACF0E,EAAgB,GAAD,OAAI1E,EAAO0B,SAAX,YAAuBoD,EAAKyC,aAAa1B,IAAW,CAAC9D,QAAS,eAEhFgF,OAAM,SAAAC,GACCA,EAAIC,SAGJnB,EAAsBhB,EAAK0C,oBAAoB3B,IAF/CC,EAAsBhB,EAAKoC,UAAUrB,cAWlD,kBAAM3B,EAAOe,IAAI,2BACzB,IAII,sCCCIwC,EAxDsB,SAAAxD,GAEjC,IAAMC,EAAS0B,IAAaxB,YACtBC,EAAmBC,4BAAkBzF,KACnC6F,EAAoBC,cAApBD,gBAEFmB,GADWrB,yBAAeC,KACjBD,yBAAe1C,MACvBgE,EAAyBC,cAAzBD,sBA8CP,OA5CAlB,qBAAU,WAuCN,OArCAV,EAAOW,GAAG,uBAAuB,YAAqC,IAAnC6C,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,iBAgC3CvB,aA9ByB,SAAAC,GACrBC,IAAMC,KAAN,UAAcC,IAAeC,OAA7B,wBAA0D,CACtDxF,SAAUyG,GACZ,CACEhB,QAAS,CACL,cAAiBL,KAGxBM,MAAK,SAAAC,GACF,GAAmB,MAAhBA,EAAKC,OAOJ,OALAxC,EAAiB,CACb1E,OAAQ,SACRC,QAAS,CACLI,OAAO,2BAAK4G,EAAKnG,KAAKT,QAAhB,IAAwBT,SAAUoI,OAEzCf,EAAKnG,KAAKT,UAGxB2G,MAAK,SAAA3G,GACF0E,EAAgB,GAAD,OAAI1E,EAAO0B,SAAX,YAAuBoD,EAAK8C,OAAO/B,IAAW,CAAC9D,QAAS,eAE1EgF,OAAM,SAAAC,GACCA,EAAIC,SAGJnB,EAAsBhB,EAAK0C,oBAAoB3B,IAF/CC,EAAsBhB,EAAKoC,UAAUrB,aAW9C,kBAAM3B,EAAOe,IAAI,0BACzB,IAII,sCCEI4C,EAvDkB,SAAA5D,GAE7B,IAAMC,EAAS0B,IAAaxB,YACtBC,EAAmBC,4BAAkBzF,KACnC6F,EAAoBC,cAApBD,gBACFmB,EAASrB,yBAAe1C,KACvBgE,EAAyBC,cAAzBD,sBA8CP,OA5CAlB,qBAAU,WAuCN,OArCAV,EAAOW,GAAG,mBAAmB,YAAmC,IAAjCiD,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,gBAgCtC3B,aA9ByB,SAAAC,GACrBC,IAAMC,KAAN,UAAcC,IAAeC,OAA7B,wBAA0D,CACtDxF,SAAU6G,GACZ,CACEpB,QAAS,CACL,cAAiBL,KAGxBM,MAAK,SAAAC,GACF,GAAmB,MAAhBA,EAAKC,OAOJ,OALAxC,EAAiB,CACb1E,OAAQ,SACRC,QAAS,CACLI,OAAO,2BAAK4G,EAAKnG,KAAKT,QAAhB,IAAwBT,SAAUwI,OAEzCnB,EAAKnG,KAAKT,UAGxB2G,MAAK,SAAA3G,GACF0E,EAAgB,GAAD,OAAI1E,EAAO0B,SAAX,YAAuBoD,EAAKkD,OAAOnC,IAAW,CAAC9D,QAAS,aAE1EgF,OAAM,SAAAC,GACCA,EAAIC,SAGJnB,EAAsBhB,EAAK0C,oBAAoB3B,IAF/CC,EAAsBhB,EAAKoC,UAAUrB,aAW9C,kBAAM3B,EAAOe,IAAI,sBACzB,IAII,sCCCIgD,EArDiB,SAAAhE,GAE5B,IAAMC,EAAS0B,IAAaxB,YACtBC,EAAmBC,4BAAkBzF,KACnC6F,EAAoBC,cAApBD,gBACFmB,EAASrB,yBAAe1C,KACvBgE,EAAyBC,cAAzBD,sBA4CP,OA1CAlB,qBAAU,WAqCN,OAnCAV,EAAOW,GAAG,mBAAmB,YAAiC,IAA/BqD,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,eAgCrC/B,aA9ByB,SAAAC,GACrBC,IAAMC,KAAN,UAAcC,IAAeC,OAA7B,wBAA0D,CACtDxF,SAAUiH,GACZ,CACExB,QAAS,CACL,cAAiBL,KAGxBM,MAAK,SAAAC,GACF,GAAmB,MAAhBA,EAAKC,OAOJ,OALAxC,EAAiB,CACb1E,OAAQ,SACRC,QAAS,CACLI,OAAO,2BAAK4G,EAAKnG,KAAKT,QAAhB,IAAwBT,SAAU4I,OAEzCvB,EAAKnG,KAAKT,UAGxB2G,MAAK,SAAA3G,GACF0E,EAAgB,GAAD,OAAI1E,EAAO0B,SAAX,YAAuBoD,EAAKsD,MAAMvC,IAAW,CAAC9D,QAAS,aAEzEgF,OAAM,SAAAC,GACCA,EAAIC,SAGJnB,EAAsBhB,EAAK0C,oBAAoB3B,IAF/CC,EAAsBhB,EAAKoC,UAAUrB,aAS9C,kBAAM3B,EAAOe,IAAI,qBACzB,IAII,sC,SCsCIoD,EA7FkB,SAAApE,GAE7B,IAAMC,EAAS0B,IAAaxB,YACtBkE,EAAuBhE,4BAAkBvB,KACzCwF,EAAsBjE,4BAAkBpB,KACxCsF,EAAqBlE,4BAAkBjB,KACvCkB,EAAWC,yBAAeC,KAC1BgE,EAAsBjE,yBAAexD,KACpC0D,EAAmBC,cAAnBD,gBAR+B,EASFU,yBAAevG,KATb,mBAS/BiB,EAT+B,KAStBuE,EATsB,KAUhCwB,EAASrB,yBAAe1C,KAgF9B,OA5EA8C,qBAAU,WAqEN,OApEAV,EAAOW,GAAG,mBAAmB,YAAgF,IAA9ElC,EAA6E,EAA7EA,QAASP,EAAoE,EAApEA,aAA8Ba,GAAsC,EAAtDyF,eAAsD,EAAtCzF,WAAWlC,EAA2B,EAA3BA,SAEvE4H,GAFkG,EAAjBxF,YAEvErD,EAAQ8I,MAAK,SAAAzI,GAAC,OAAIA,EAAEC,YAAcgC,MAClD,GAAGqG,IAAwBrG,EAAa,CACpCsC,EAAgB,GAAD,OAAIiE,EAAQjH,SAAZ,YAAwBoD,EAAK+D,WAAWhD,IAAW,CAAC9D,QAAS,SAE5E,IAAMrB,EAAO,eACR0B,EAAe,CACZxB,SAAU,EACVE,YAAa6B,EACb5B,SAAUA,IAIlBsD,EAAiB,CACb1E,OAAQ,mBACRC,QAAS,CACLc,QAASA,SAIhB,CAED,IAAMA,EAAO,eACR0B,EAAe,CACZxB,SAAU,EACVE,YAAa6B,EACb5B,SAAUA,IAIlBsD,EAAiB,CACb1E,OAAQ,mBACRC,QAAS,CACLc,QAASA,KAIFkF,IAAaxB,YACrBY,KAAK,gBAAiB,CACzBxD,OAAQ+C,EAAS/C,OACjBpB,UAAWuI,EAAQvI,UACnB0I,SAAUH,EAAQpJ,SAClB8G,MAAO0C,aAAaC,QAAQ,WAGpCV,EAAqB,CACjBlI,UAAWgC,EACXa,UAAWA,EACXN,QAASA,EACT5B,SAAUA,EACV6B,MAAO,OAIfsB,EAAOW,GAAG,iBAAiB,YAAkE,IAAhEzE,EAA+D,EAA/DA,UAAW6C,EAAoD,EAApDA,UAAWlC,EAAyC,EAAzCA,SAASoC,EAAgC,EAAhCA,YAAgC,EAApB8F,eACpEV,EAAoB,CAChBnI,UAAWA,EACX6C,UAAWA,EACXlC,SAAUA,EACVoC,YAAaA,OAIrBe,EAAOW,GAAG,mBAAmB,YAAkB,IAAhBzE,EAAe,EAAfA,UAC3BoI,EAAmB,CAACpI,iBAGjB,WACH8D,EAAOe,IAAI,mBACXf,EAAOe,IAAI,iBACXf,EAAOe,IAAI,uBAIZ,sCCrEIiE,UAfA,SAAAjF,GAEX,OAAO,oCACP,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD","file":"static/js/13.2d187f19.chunk.js","sourcesContent":["import {selector} from 'recoil';\r\n\r\nimport {friendsAtom, idiomaState, getConversationWithContact, activeChatWith} from './atoms';\r\n\r\nconst friendSelector = selector({\r\n    key: 'friendSelector',\r\n    get: ({get}) => {\r\n        if(get(friendsAtom).length > 0){\r\n            const friends = [...get(friendsAtom)];\r\n\r\n            return friends.sort(\r\n                (f1,f2) => {\r\n                    \r\n                    if(f1.friendShipStatus === 1 && f2.friendShipStatus === 1){\r\n                        if(f1.socketId && !f2.socketId) return -1;\r\n                        if(!f1.socketId && f2.socketId) return 1;    \r\n                    }\r\n                    if(f1.friendShipStatus < f2.friendShipStatus) return -1; \r\n                    if(f1.friendShipStatus > f2.friendShipStatus) return 1;\r\n                    if(f1.email < f2.email) return -1; \r\n                    if(f1.email > f2.email) return 1; \r\n                }\r\n            );\r\n        }else{\r\n            return [];\r\n        }\r\n        \r\n    },\r\n    set: async ({set, get}, {action, payload}) => {\r\n\r\n        switch(action){\r\n            case 'initialize': \r\n                set(friendsAtom, oldFriends => {\r\n                    if(oldFriends.length === 0){\r\n                        return payload.friends;\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                break;\r\n            case 'add':\r\n                set(friendsAtom, oldFriends => {\r\n                    const friends = [...oldFriends];\r\n                    friends.push(payload.friend);\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'update':\r\n                set(friendsAtom, oldFriends => {\r\n                    const fIndex = oldFriends.findIndex(f => f.contactId === payload.friend.contactId);\r\n                    const friends = oldFriends.slice(0, fIndex)\r\n                                            .concat([payload.friend])\r\n                                            .concat(oldFriends.slice(fIndex+1));\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'reset_cant_no_leidos':\r\n                set(friendsAtom, oldFriends => {\r\n                    const index = oldFriends.findIndex(friend => friend.contactId === payload.contactId);\r\n                    return oldFriends.slice(0, index).concat([{...oldFriends[index], unread: 0}]).concat(oldFriends.slice(index+1));\r\n                });\r\n                break;\r\n            case 'set_message_info': // Para poner la cantidad de mensajes sin leer, el ultimo mensaje y la fecha del ultimo mensaje\r\n                set(friendsAtom, oldFriends => {\r\n                    const data = payload.dataObj;\r\n                    const newFriends = oldFriends.map(friend => {\r\n                        if(data[friend.contactId]){\r\n                            let cantidad = 0;\r\n                            if(friend.unread){\r\n                                cantidad = friend.unread;\r\n                            }\r\n                            if(data[friend.contactId].cantidad){\r\n                                cantidad += data[friend.contactId].cantidad; \r\n                            }\r\n                            return {...friend, \r\n                                unread:  cantidad,\r\n                                lastMsg: data[friend.contactId].lastMessage,\r\n                                datetime: data[friend.contactId].datetime\r\n                            }\r\n                        }\r\n                        return friend;\r\n                    });\r\n                    return newFriends;\r\n                });\r\n            break;\r\n            case 'delete':\r\n                const activeChatContactId = get(activeChatWith);\r\n                if(activeChatContactId === payload.friendId){\r\n                    set(activeChatWith, oldActive => {\r\n                        return null;\r\n                    });\r\n                }\r\n                set(friendsAtom, oldFriends => {\r\n                    return oldFriends.filter(f => f.contactId !== payload.friendId);\r\n                });\r\n                break;\r\n            case 'connect':                \r\n                if(Array.isArray(payload.data)){\r\n                    set(friendsAtom, oldFriends => {\r\n                        return oldFriends.map(friend => {\r\n                            const idx = payload.data.findIndex(dat => dat.userId === friend.contactId);\r\n                            if(idx >= 0){\r\n                                return {...friend, socketId: payload.data[idx].socketId};     \r\n                            }\r\n                            return {...friend};\r\n                        });\r\n                    }); \r\n                }else{\r\n\r\n                    const {userId, socketId} = payload.data;\r\n                    let conectedFriendName = null;\r\n                    let friendShipStatus = 0;\r\n                    \r\n                    set(friendsAtom, oldFriends => {\r\n                        const fIndex = oldFriends.findIndex(f => f.contactId === userId);\r\n                        if(fIndex >= 0){\r\n                            conectedFriendName = oldFriends[fIndex].nickname;\r\n                            friendShipStatus = oldFriends[fIndex].friendShipStatus;\r\n                            const updatedFriend = {...oldFriends[fIndex], socketId: socketId };\r\n                        \r\n                            const friends = oldFriends.slice(0, fIndex)\r\n                                                    .concat([updatedFriend])\r\n                                                    .concat(oldFriends.slice(fIndex+1));\r\n                            return friends;\r\n                        }\r\n                        return oldFriends;\r\n                    });\r\n                    if(conectedFriendName && friendShipStatus === 1)\r\n                        payload.notification(`${conectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'info'});\r\n                }                \r\n                break;\r\n            case 'disconnect':\r\n                let disconectedFriendName = null;\r\n                let friendShipStatus = 0;\r\n                \r\n                set(friendsAtom, oldFriends => {\r\n                    \r\n                    const index = oldFriends.findIndex(friend => friend.socketId === payload.socketId);\r\n                    if(index >= 0){\r\n                        disconectedFriendName = oldFriends[index].nickname;\r\n                        friendShipStatus = oldFriends[index].friendShipStatus;\r\n                        return [...oldFriends].slice(0, index).concat([{...oldFriends[index], socketId: null}]).concat(oldFriends.slice(index+1));\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                if(disconectedFriendName && friendShipStatus === 1)\r\n                    payload.notification(`${disconectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'warning'});\r\n                break;\r\n            \r\n                default: break;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst messageStates = {\r\n    'NINGUNO': 0, // Cuando no es enviado por el propio usuario, sino que se lo enviaron a el, por lo que los estados no tienen sentido para este tipo de mensajes\r\n    'ENVIADO': 1,\r\n    'GUARDADO': 2,\r\n    'LEIDO': 3\r\n};\r\n\r\nconst initConversationSelector = selector({\r\n    key:'conversationSelector',\r\n    set: ({set}, {contactId, conversation}) => {\r\n\r\n        const getMessageState = (userOriginId, UserDestinyId, contactId, readed) => {\r\n\r\n            if(userOriginId === contactId){\r\n                return 0;\r\n            }else if(UserDestinyId === contactId){\r\n                return readed ? 3 : 2;\r\n            }\r\n        }\r\n\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return conversation.map(message => {\r\n                return {\r\n                    _id: message._id,\r\n                    content: message.content,\r\n                    datetime: message.datetime,\r\n                    state: getMessageState(message.userOrigin, message.userDestiny, contactId, message.readed)\r\n                };\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nconst addMsgToConversationSelector = selector({\r\n    key: 'addMessageToConversation',\r\n    set: ({set}, {contactId, messageId, content, datetime, state}) => {\r\n        const newMessageObj = {\r\n            _id: messageId,\r\n            content: content,\r\n            datetime: datetime,\r\n            state: state\r\n        };        \r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation.concat([newMessageObj]);\r\n        });\r\n\r\n    }\r\n});\r\n\r\n\r\nconst editMsgToStateSavedSelector = selector({\r\n    key: 'editMsgToStateSavedSelector',\r\n    set: ({set}, {contactId, messageId, datetime, consecutive}) => {\r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            \r\n            const index = oldConversation.findIndex(message => message._id === consecutive && message.state === 1);\r\n            if(index >= 0){\r\n                const modMessage = {...oldConversation[index], state: 2, _id: messageId, datetime: datetime};\r\n                return oldConversation.slice(0, index).concat([modMessage]).concat(oldConversation.slice(index+1));\r\n            }\r\n            return oldConversation;\r\n        });\r\n    }\r\n});\r\n\r\nconst editAllMsgToReadedSelector = selector({\r\n    key: 'editAllMsgToSavedSelector',\r\n    set: ({set}, {contactId}) => {\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation\r\n                .map(message => {\r\n                    if(message.state !== 0)\r\n                        return {...message, state: 3}\r\n                    else\r\n                        return message;\r\n                });\r\n        });\r\n    }\r\n});\r\n\r\nexport {friendSelector, initConversationSelector, addMsgToConversationSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket'\r\nimport {loginData} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\n\r\nconst UserSubscriber = props => {   \r\n    const client = socket.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n\r\n        client.on('new user', data => {\r\n            \r\n            friendDispatcher({\r\n                action: 'connect', \r\n                payload: {\r\n                    data:data,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.connected\r\n                }\r\n            });\r\n        });\r\n        \r\n        if(userData)\r\n            client.emit('new user', {userId: userData.userId});\r\n\r\n        return () => client.off('new user');\r\n    }, [friendDispatcher, client, userData]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst UserSubscriber = props => {\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const client = socket.getSocket();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('user disconnect', data => {\r\n            friendDispatcher({\r\n                action: 'disconnect', \r\n                payload: {\r\n                    socketId: data.socketId,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.disconnected\r\n                }\r\n            })\r\n        });\r\n\r\n        return () => client.off('user disconnect');\r\n    }, []);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {chatConversation} from '../recoil/atoms';\r\nimport socket from '../../utils/socket'\r\nconst IncomingMsgSubscriber = props => {\r\n\r\n    const [conversation, setConvertation] = useRecoilState(chatConversation);\r\n    const client = socket.getSocket();\r\n    \r\n    useEffect(() => {\r\n\r\n        client.on('message', data => {\r\n            const newStateObj = {...conversation};\r\n            if(conversation[data.socketId]){\r\n                newStateObj[data.socketId] = {...conversation[data.socketId]};\r\n                if(conversation[data.socketId].text){\r\n                    newStateObj[data.socketId].text = [...conversation[data.socketId].text, {myMsg: false, msg: data.msg}];\r\n                    \r\n                    \r\n\r\n                    if(data.socketId !== newStateObj.active){\r\n                        newStateObj[data.socketId].novistos = newStateObj[data.socketId].novistos + 1; \r\n                    }\r\n                }else{\r\n                    newStateObj[data.socketId].text = [];\r\n                }\r\n                \r\n            }else{\r\n                newStateObj[data.socketId] = {\r\n                    text: [{myMsg: false, msg: data.msg}],\r\n                    nickname: null,\r\n                    socketId: null,\r\n                    novistos: 1\r\n                }\r\n            }\r\n            setConvertation(newStateObj);\r\n        });\r\n\r\n        return () => client.off('message');\r\n    }, [conversation]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default IncomingMsgSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst DeclinedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('declined friendship', ({declinerId, declinedId, socketIdDecliner, socketIdDeclined}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: declinerId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDecliner}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.declinedInv[idioma]}`, {variant: \"warning\"});\r\n                })\r\n                .catch(err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else if(err.response.status === 404){\r\n                        friendDispatcher({\r\n                            action: 'delete', \r\n                            payload: {\r\n                                friendId: declinerId\r\n                        }})\r\n                    }\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('declined friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeclinedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst RequestFriendSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('requested friendship', ({userIdRequester, userIdRequested, socketIdRequester}) => {\r\n            if(userIdRequested === userData.userId){\r\n                \r\n                \r\n                const optimisticAction = token => {\r\n                    axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                        friendId: userIdRequester\r\n                    },{\r\n                        headers: {\r\n                            'Authorization': token\r\n                        }\r\n                    })\r\n                    .then(resp => {\r\n                        if(resp.status === 200){\r\n                            \r\n                            friendDispatcher({\r\n                                action: 'add', \r\n                                payload: {\r\n                                    friend: {...resp.data.friend, socketId: socketIdRequester}\r\n                                }});\r\n                            return resp.data.friend;\r\n                        }\r\n                    })\r\n                    .then(friend => {\r\n                        enqueueSnackbar(`${friend.nickname} ${text.requestedInv[idioma]}`, {variant: \"success\"});\r\n                    })\r\n                    .catch(err => {\r\n                        if(!err.response){\r\n                            openErrorNotification(text.connError[idioma]);\r\n                        }else{\r\n                            openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                        }\r\n                    });\r\n                }\r\n                authMiddleware(optimisticAction);\r\n                \r\n            }\r\n        });\r\n\r\n        return () => client.off('requested friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RequestFriendSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst AcceptedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('accepted friendship', ({accepterId, socketIdAccepter}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: accepterId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdAccepter}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.accept[idioma]}`, {variant: \"success\"});\r\n                })\r\n                .catch(err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('accepted friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default AcceptedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst DeletedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('deleted contact', ({deleterId, socketIdDeleter}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: deleterId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDeleter}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.delete[idioma]}`, {variant: \"error\"});\r\n                })\r\n                .catch(err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else{\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('deleted contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeletedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst BlokedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('blocked contact', ({blokerId, socketIdBloked}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: blokerId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdBloked}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.block[idioma]}`, {variant: \"error\"});\r\n                })\r\n                .catch(err => {\r\n                    if(!err.response){\r\n                        openErrorNotification(text.connError[idioma]);\r\n                    }else {\r\n                        openErrorNotification(text.errorLoadingFriends[idioma]);\r\n                    }\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n        });\r\n\r\n        return () => client.off('bloked contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default BlokedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue, useRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport {addMsgToConversationSelector, friendSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector} from '../recoil/selectors';\r\nimport {loginData, activeChatWith, idiomaState} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst RecibedMessageSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const editMsgToStateSaved = useSetRecoilState(editMsgToStateSavedSelector);\r\n    const editAllMsgToReaded = useSetRecoilState(editAllMsgToReadedSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const activeChatContactId = useRecoilValue(activeChatWith);\r\n    const {enqueueSnackbar} = useSnackbar();\r\n    const [friends, friendDispatcher] = useRecoilState(friendSelector);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n        client.on('recived message', ({content, userOriginId, socketIdSender, messageId, datetime, consecutive}) => {\r\n            \r\n            const contact = friends.find(f => f.contactId === userOriginId);\r\n            if(activeChatContactId !== userOriginId){                \r\n                enqueueSnackbar(`${contact.nickname} ${text.writingYou[idioma]}`, {variant: 'info'});\r\n\r\n                const dataObj = {\r\n                    [userOriginId]: {\r\n                        cantidad: 1,\r\n                        lastMessage: content,\r\n                        datetime: datetime\r\n                    }\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n            }else{\r\n\r\n                const dataObj = {\r\n                    [userOriginId]: {\r\n                        cantidad: 0,\r\n                        lastMessage: content,\r\n                        datetime: datetime\r\n                    }\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n                const client = socketClient.getSocket();\r\n                client.emit('read messages', {\r\n                    userId: userData.userId,\r\n                    contactId: contact.contactId,\r\n                    notifyTo: contact.socketId,\r\n                    token: localStorage.getItem('token')\r\n                });\r\n            }\r\n            addMsgToConversation({\r\n                contactId: userOriginId,\r\n                messageId: messageId,\r\n                content: content,\r\n                datetime: datetime,\r\n                state: 0\r\n            });\r\n        });\r\n\r\n        client.on('saved message', ({contactId, messageId, datetime,consecutive,soketIdContact}) => {\r\n            editMsgToStateSaved({\r\n                contactId: contactId,\r\n                messageId: messageId,\r\n                datetime: datetime,\r\n                consecutive: consecutive\r\n            });\r\n        });\r\n\r\n        client.on('readed messages', ({contactId}) => {\r\n            editAllMsgToReaded({contactId})\r\n        });\r\n\r\n        return () => {\r\n            client.off('recived message');\r\n            client.off('saved message');\r\n            client.off('readed messages');\r\n        };\r\n    });\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RecibedMessageSubscriber;","import React from 'react';\r\n\r\n// Eventos\r\nimport NewUserSubscriber from './newUserSubscriber';\r\nimport UserDisconnectSubscriber from './userDisconnectSubscriber';\r\nimport IncomingMsgSubscriber from './incomingMsgSubscriber';\r\nimport DeclinedFriendshipSubscriber from './declinedFriendshipSubscriber';\r\nimport RequestFriendSubscriber from './requestFriendshipSubscriber';\r\nimport AcceptFriendshipSubscriber from './acceptedFriendshipSubscriber';\r\nimport DeletedContactSubscriber from './deletedContactSubscriber';\r\nimport BlokedContactSubscriber from './blokedContactSubscriber';\r\nimport RecibedMessageSubscriber from './recibedMessageSubscriber';\r\n\r\n\r\nconst Events = props => {\r\n\r\n    return <>\r\n    <NewUserSubscriber />\r\n    <UserDisconnectSubscriber />\r\n    <IncomingMsgSubscriber />\r\n    <RequestFriendSubscriber />\r\n    <DeclinedFriendshipSubscriber />\r\n    <AcceptFriendshipSubscriber />\r\n    <DeletedContactSubscriber />\r\n    <BlokedContactSubscriber />\r\n    <RecibedMessageSubscriber />\r\n</>;\r\n\r\n}\r\nexport default Events;"],"sourceRoot":""}