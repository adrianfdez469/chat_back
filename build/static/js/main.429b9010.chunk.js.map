{"version":3,"sources":["utils/useLogout.js","conf/configuration.js","utils/socket.js","components/recoil/selectors.js","components/uiComponents/notification/notification.hook.js","view/signin/forgotpass/forgotPass.view.js","view/signin/forgotpass/forgotPass.controller.js","view/signin/forgotpass/index.js","view/signin/signin.view.js","view/signin/signin.controller.js","view/signin/index.js","view/main/main.view.js","view/main/index.js","view/signup/signup.view.js","view/signup/signup.controller.js","view/signup/index.js","components/uiComponents/notification/notification.view.js","components/uiComponents/index.js","view/changepass/changepass.view.js","view/changepass/changepass.controller.js","view/changepass/index.js","utils/useRefreshToken.js","components/events/newUserSubscriber.js","components/events/userDisconnectSubscriber.js","components/events/incomingMsgSubscriber.js","components/events/declinedFriendshipSubscriber.js","components/events/requestFriendshipSubscriber.js","components/events/acceptedFriendshipSubscriber.js","components/events/deletedContactSubscriber.js","components/events/blokedContactSubscriber.js","components/events/recibedMessageSubscriber.js","App.js","serviceWorker.js","index.js","authMiddleware.js","components/recoil/atoms.js","components/uiComponents/notification/notification.atom.js"],"names":["useLogout","setLoginData","useSetRecoilState","loginData","setUserAvatar","userAvatarState","setSubscribe","subscribeToEventsState","setContactList","contactListState","setFriends","friendsAtom","client","socketClient","getSocket","useCallback","emit","localStorage","removeItem","DEFAULT_CONFIG","server","location","origin","socket","openSocket","close","friendSelector","selector","key","get","length","sort","f1","f2","friendShipStatus","socketId","email","set","a","action","payload","oldFriends","friends","push","friend","fIndex","findIndex","f","contactId","slice","concat","index","unread","data","dataObj","map","cantidad","lastMsg","lastMessage","datetime","filter","friendId","Array","isArray","idx","dat","userId","conectedFriendName","nickname","updatedFriend","notification","msg","idiomaState","variant","disconectedFriendName","initConversationSelector","conversation","getMessageState","userOriginId","UserDestinyId","readed","getConversationWithContact","oldConversation","message","_id","content","state","userOrigin","userDestiny","addMsgToConversationSelector","newMessageObj","messageId","editMsgToStateSavedSelector","consecutive","modMessage","editAllMsgToReadedSelector","NotificationHook","useRecoilState","notificationAtom","notificationState","setNotificationState","defaultToOpem","open","autoHideDuration","openSpecificNotification","severity","openNotification","properties","openSuccessNotification","openErrorNotification","openInfoNotification","openWarningNotification","ForgotPassView","idioma","forgetPassHandler","forgotWinState","forgotWinOk","onChangeForgotEmail","forgotEmailState","Dialog","onClose","aria-labelledby","DialogTitle","id","text","title","DialogContent","DialogContentText","forgotText","TextField","autoFocus","margin","label","type","fullWidth","onChange","value","helperText","valid","invalidEmail","error","DialogActions","Button","onClick","color","forgotBtnCancel","forgotBtnOk","ForgotPassController","useState","setForgotEmailStste","target","test","axios","post","hostname","window","host","then","resp","status","emailSended","catch","err","response","emailNotFound","ForgotPass","props","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","submit","link","cursor","textDecoration","SignIn","emailRef","passRef","onSignIn","rememberChecked","onRememberChange","classes","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","signin","noValidate","required","name","autoComplete","inputRef","password","FormControlLabel","control","Checkbox","checked","rememberme","Grid","container","item","xs","Link","forgotpassword","to","gosignup","SigninController","setIdiomaState","setUserAvatarState","setTokenTimeOut","tokenTimeoutAtom","redirectState","setRedirect","useRef","remember","setRemember","setforgotWinState","useEffect","authMiddleware","token","token_expires","firstName","lastName","gender","language","avatarUrl","setItem","timeleft","console","log","current","event","preventDefault","refresh_token","refresh_token_expires","notAuthorized","internalError","Signin","padding","position","height","overflowY","background","MainView","children","MainContainer","SignUp","onSignUp","emailState","onEmailChange","passState","onPassChange","nameState","onNameChange","lastNameRef","signup","sm","justify","SignupController","useRecoilValue","setEmailState","setPassState","setNameState","userCreated","duplicated","Signup","Alert","elevation","NotificationView","setNotState","handleClose","reason","Snackbar","anchorOrigin","vertical","horizontal","Notification","ChangePassView","pass2State","onPass2Change","submitPass","invalidPass","repeatPassword","passNotEqual","changePass","withRouter","setPass2State","match","params","passChangeOk","passChangeError","ChangePass","useRefreshToken","setTokenTimeout","logout","getItem","Date","getTime","new_token","new_refresh_token","new_token_expires","new_refresh_token_expires","UserSubscriber","friendDispatcher","userData","enqueueSnackbar","useSnackbar","on","connected","off","disconnected","IncomingMsgSubscriber","chatConversation","setConvertation","newStateObj","myMsg","active","novistos","DeclinedFriendshipSubscriber","useNotifications","declinerId","socketIdDecliner","declinedId","socketIdDeclined","headers","declinedInv","RequestFriendSubscriber","userIdRequester","userIdRequested","socketIdRequester","requestedInv","errorLoadingFriends","AcceptedFriendshipSubscriber","accepterId","socketIdAccepter","accept","DeletedContactSubscriber","deleterId","socketIdDeleter","delete","BlokedContactSubscriber","blokerId","socketIdBloked","block","RecibedMessageSubscriber","addMsgToConversation","editMsgToStateSaved","editAllMsgToReaded","activeChatContactId","activeChatWith","socketIdSender","contact","find","writingYou","notifyTo","soketIdContact","AsyncToolbar","React","lazy","AsyncMainButton","AsyncContactList","AsyncChatCmp","AsyncActivateUser","TimerCmp","refreshToken","timeoutData","setTimeout","themeDark","createMuiTheme","themeDefault","backdrop","zIndex","drawer","App","dark","darkModeAtom","subscribe","chatWith","notistackRef","createRef","onClickDismiss","closeSnackbar","cmp","fallback","Backdrop","CircularProgress","path","exact","render","ThemeProvider","maxSnack","preventDuplicate","ref","IconButton","fontSize","style","from","Boolean","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","AuthMiddleware","nextOptimisticAction","dataOptimistic","atom","default","userLang","userLanguage","getDefaultLanguage","addContactViewOpenState","tokentimeout"],"mappings":"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","file":"static/js/main.429b9010.chunk.js","sourcesContent":["import {useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport {loginData, userAvatarState, subscribeToEventsState, contactListState, friendsAtom} from '../components/recoil/atoms';\r\nimport { useCallback } from 'react';\r\nimport socketClient from './socket';\r\n\r\nconst useLogout = () => {\r\n\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const setUserAvatar = useSetRecoilState(userAvatarState);\r\n    const setSubscribe = useSetRecoilState(subscribeToEventsState);\r\n    const setContactList = useSetRecoilState(contactListState);\r\n    const setFriends = useSetRecoilState(friendsAtom);\r\n    const client = socketClient.getSocket();\r\n\r\n    return useCallback(() => {\r\n        \r\n        setUserAvatar(null);\r\n        setContactList([]);\r\n        setFriends([]);\r\n        client.emit('logout', {});\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('refresh_token');\r\n        localStorage.removeItem('refresh_token_expires');\r\n        localStorage.removeItem('token_expires');\r\n        setSubscribe(false);\r\n        setLoginData(null);\r\n        \r\n        \r\n    });\r\n}\r\nexport default useLogout;","const DEV = {\r\n    server: \"http://localhost:3001\"\r\n}\r\nconst PROD = {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    server: location.origin //\"https://shut-app-back.herokuapp.com\"\r\n}\r\n\r\nexport const DEFAULT_CONFIG = process.env.NODE_ENV === \"development\" ? DEV : PROD;","import openSocket from 'socket.io-client'; \r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nlet socket;\r\n\r\nconst socketClient = \r\n {   \r\n    getSocket: () => {\r\n        if(!socket){\r\n            socket = openSocket(DEFAULT_CONFIG.server);\r\n            return socket;    \r\n        }\r\n        return socket;\r\n    },\r\n    close: () => {\r\n        socket.close();\r\n    }\r\n};\r\n\r\nexport default socketClient;","import {selector} from 'recoil';\r\n\r\nimport {friendsAtom, idiomaState, messagesAtom, getConversationWithContact} from './atoms';\r\n\r\nconst friendSelector = selector({\r\n    key: 'friendSelector',\r\n    get: ({get}) => {\r\n        if(get(friendsAtom).length > 0){\r\n            const friends = [...get(friendsAtom)];\r\n\r\n            return friends.sort(\r\n                (f1,f2) => {\r\n                    \r\n                    if(f1.friendShipStatus === 1 && f2.friendShipStatus === 1){\r\n                        if(f1.socketId && !f2.socketId) return -1;\r\n                        if(!f1.socketId && f2.socketId) return 1;    \r\n                    }\r\n                    if(f1.friendShipStatus < f2.friendShipStatus) return -1; \r\n                    if(f1.friendShipStatus > f2.friendShipStatus) return 1;\r\n                    if(f1.email < f2.email) return -1; \r\n                    if(f1.email > f2.email) return 1; \r\n                }\r\n            );\r\n        }else{\r\n            return [];\r\n        }\r\n        \r\n    },\r\n    set: async ({set, get}, {action, payload}) => {\r\n\r\n        switch(action){\r\n            case 'initialize': \r\n                set(friendsAtom, oldFriends => {\r\n                    if(oldFriends.length === 0){\r\n                        return payload.friends;\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                break;\r\n            case 'add':\r\n                set(friendsAtom, oldFriends => {\r\n                    const friends = [...oldFriends];\r\n                    friends.push(payload.friend);\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'update':\r\n                set(friendsAtom, oldFriends => {\r\n                    const fIndex = oldFriends.findIndex(f => f.contactId === payload.friend.contactId);\r\n                    const friends = oldFriends.slice(0, fIndex)\r\n                                            .concat([payload.friend])\r\n                                            .concat(oldFriends.slice(fIndex+1));\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'reset_cant_no_leidos':\r\n                set(friendsAtom, oldFriends => {\r\n                    const index = oldFriends.findIndex(friend => friend.contactId === payload.contactId);\r\n                    return oldFriends.slice(0, index).concat([{...oldFriends[index], unread: 0}]).concat(oldFriends.slice(index+1));\r\n                });\r\n                break;\r\n            case 'set_message_info': // Para poner la cantidad de mensajes sin leer, el ultimo mensaje y la fecha del ultimo mensaje\r\n                set(friendsAtom, oldFriends => {\r\n                    const data = payload.dataObj;\r\n                    const newFriends = oldFriends.map(friend => {\r\n                        if(data[friend.contactId]){\r\n                            let cantidad = 0;\r\n                            if(friend.unread){\r\n                                cantidad = friend.unread;\r\n                            }\r\n                            if(data[friend.contactId].cantidad){\r\n                                cantidad += data[friend.contactId].cantidad; \r\n                            }\r\n                            return {...friend, \r\n                                unread:  cantidad,\r\n                                lastMsg: data[friend.contactId].lastMessage,\r\n                                datetime: data[friend.contactId].datetime\r\n                            }\r\n                        }\r\n                        return friend;\r\n                    });\r\n                    return newFriends;\r\n                });\r\n            break;\r\n            case 'delete':\r\n                set(friendsAtom, oldFriends => {\r\n                    return oldFriends.filter(f => f.contactId !== payload.friendId);\r\n                });\r\n                break;\r\n            case 'connect':                \r\n                if(Array.isArray(payload.data)){\r\n                    set(friendsAtom, oldFriends => {\r\n                        return oldFriends.map(friend => {\r\n                            const idx = payload.data.findIndex(dat => dat.userId === friend.contactId);\r\n                            if(idx >= 0){\r\n                                return {...friend, socketId: payload.data[idx].socketId};     \r\n                            }\r\n                            return {...friend};\r\n                        });\r\n                    }); \r\n                }else{\r\n\r\n                    const {userId, socketId} = payload.data;\r\n                    let conectedFriendName = null;\r\n                    let friendShipStatus = 0;\r\n                    \r\n                    set(friendsAtom, oldFriends => {\r\n                        const fIndex = oldFriends.findIndex(f => f.contactId === userId);\r\n                        if(fIndex >= 0){\r\n                            conectedFriendName = oldFriends[fIndex].nickname;\r\n                            friendShipStatus = oldFriends[fIndex].friendShipStatus;\r\n                            const updatedFriend = {...oldFriends[fIndex], socketId: socketId };\r\n                        \r\n                            const friends = oldFriends.slice(0, fIndex)\r\n                                                    .concat([updatedFriend])\r\n                                                    .concat(oldFriends.slice(fIndex+1));\r\n                            return friends;\r\n                        }\r\n                        return oldFriends;\r\n                    });\r\n                    if(conectedFriendName && friendShipStatus === 1)\r\n                        payload.notification(`${conectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'info'});\r\n                }                \r\n                break;\r\n            case 'disconnect':\r\n                let disconectedFriendName = null;\r\n                let friendShipStatus = 0;\r\n                \r\n                set(friendsAtom, oldFriends => {\r\n                    \r\n                    const index = oldFriends.findIndex(friend => friend.socketId === payload.socketId);\r\n                    if(index >= 0){\r\n                        disconectedFriendName = oldFriends[index].nickname;\r\n                        friendShipStatus = oldFriends[index].friendShipStatus;\r\n                        return [...oldFriends].slice(0, index).concat([{...oldFriends[index], socketId: null}]).concat(oldFriends.slice(index+1));\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                if(disconectedFriendName && friendShipStatus === 1)\r\n                    payload.notification(`${disconectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'warning'});\r\n                break;\r\n            \r\n                default: break;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst messageStates = {\r\n    'NINGUNO': 0, // Cuando no es enviado por el propio usuario, sino que se lo enviaron a el, por lo que los estados no tienen sentido para este tipo de mensajes\r\n    'ENVIADO': 1,\r\n    'GUARDADO': 2,\r\n    'LEIDO': 3\r\n};\r\n\r\nconst initConversationSelector = selector({\r\n    key:'conversationSelector',\r\n    set: ({set}, {contactId, conversation}) => {\r\n\r\n        const getMessageState = (userOriginId, UserDestinyId, contactId, readed) => {\r\n\r\n            if(userOriginId === contactId){\r\n                return 0;\r\n            }else if(UserDestinyId === contactId){\r\n                return readed ? 3 : 2;\r\n            }\r\n        }\r\n\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return conversation.map(message => {\r\n                return {\r\n                    _id: message._id,\r\n                    content: message.content,\r\n                    datetime: message.datetime,\r\n                    state: getMessageState(message.userOrigin, message.userDestiny, contactId, message.readed)\r\n                };\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nconst addMsgToConversationSelector = selector({\r\n    key: 'addMessageToConversation',\r\n    set: ({set}, {contactId, messageId, content, datetime, state}) => {\r\n        const newMessageObj = {\r\n            _id: messageId,\r\n            content: content,\r\n            datetime: datetime,\r\n            state: state\r\n        };        \r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation.concat([newMessageObj]);\r\n        });\r\n\r\n    }\r\n});\r\n\r\n\r\nconst editMsgToStateSavedSelector = selector({\r\n    key: 'editMsgToStateSavedSelector',\r\n    set: ({set}, {contactId, messageId, datetime, consecutive}) => {\r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            \r\n            const index = oldConversation.findIndex(message => message._id === consecutive && message.state === 1);\r\n            if(index >= 0){\r\n                const modMessage = {...oldConversation[index], state: 2, _id: messageId, datetime: datetime};\r\n                return oldConversation.slice(0, index).concat([modMessage]).concat(oldConversation.slice(index+1));\r\n            }\r\n            return oldConversation;\r\n        });\r\n    }\r\n});\r\n\r\nconst editAllMsgToReadedSelector = selector({\r\n    key: 'editAllMsgToSavedSelector',\r\n    set: ({set}, {contactId}) => {\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation\r\n                .map(message => {\r\n                    if(message.state !== 0)\r\n                        return {...message, state: 3}\r\n                    else\r\n                        return message;\r\n                });\r\n        });\r\n    }\r\n});\r\n\r\nexport {friendSelector, initConversationSelector, addMsgToConversationSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector}","import React from 'react';\r\nimport {useRecoilState} from 'recoil'\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\nconst NotificationHook = () => {\r\n    \r\n    const [notificationState, setNotificationState] = useRecoilState(notificationAtom);\r\n\r\n    const defaultToOpem = {\r\n        ...notificationState,\r\n        open: true,\r\n        autoHideDuration: 3000\r\n    };\r\n\r\n    const openNotification = properties => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            ...properties\r\n        });\r\n    }\r\n\r\n    const openSpecificNotification = (severity, msg) => {\r\n        setNotificationState({\r\n            ...defaultToOpem,\r\n            severity: severity,\r\n            msg: msg\r\n        });\r\n    }\r\n\r\n    const openSuccessNotification = msg => {\r\n        openSpecificNotification(\"success\",msg);\r\n    }\r\n\r\n    const openWarningNotification = msg => {\r\n        openSpecificNotification(\"warning\",msg);\r\n    }\r\n\r\n    const openErrorNotification = msg => {\r\n        openSpecificNotification(\"error\",msg);\r\n    }\r\n\r\n    const openInfoNotification = msg => {\r\n        openSpecificNotification(\"info\",msg);\r\n    }\r\n\r\n    return {    \r\n        openNotification: openNotification,\r\n        openSuccessNotification: openSuccessNotification,\r\n        openErrorNotification: openErrorNotification,\r\n        openInfoNotification: openInfoNotification,\r\n        openWarningNotification: openWarningNotification\r\n    };\r\n\r\n}\r\nexport default NotificationHook;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@material-ui/core';\r\nimport text from './idioma.json';\r\n\r\n\r\n\r\nconst ForgotPassView = ({idioma, forgetPassHandler, forgotWinState, forgotWinOk, onChangeForgotEmail, forgotEmailState}) => {\r\n\r\n    return (\r\n        <Dialog open={forgotWinState} onClose={forgetPassHandler} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">{text.title[idioma]}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {text.forgotText[idioma]}\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label={text.email[idioma]}\r\n            type=\"email\"\r\n            fullWidth\r\n            onChange={onChangeForgotEmail}\r\n            value={forgotEmailState.value}\r\n            helperText={!forgotEmailState.valid ? text.invalidEmail[idioma] : ''}\r\n            error={!forgotEmailState.valid}\r\n\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={forgetPassHandler} color=\"primary\">\r\n            {text.forgotBtnCancel[idioma]}\r\n          </Button>\r\n          <Button onClick={forgotWinOk} color=\"primary\">\r\n            {text.forgotBtnOk[idioma]}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n\r\n}\r\nexport default ForgotPassView;","import React, {useState} from 'react';\r\nimport NotificationHook from '../../../components/uiComponents/notification/notification.hook';\r\nimport text from './idioma.json';\r\nimport ForgotPassView from './forgotPass.view';\r\nimport axios from 'axios';\r\nimport {DEFAULT_CONFIG} from '../../../conf/configuration';\r\n\r\n\r\nconst ForgotPassController = ({idioma, forgotWinState, forgetPassHandler}) => {\r\n\r\n    const [forgotEmailState, setForgotEmailStste] = useState({value:'', valid:true});\r\n    const {openSuccessNotification, openErrorNotification} = NotificationHook();\r\n\r\n    const onChangeForgotEmail = ({target: {value}}) => {\r\n        setForgotEmailStste({...forgotEmailState, valid: true, value: value});\r\n    }\r\n\r\n    const forgotWinOk = () => {        \r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(forgotEmailState.value)){\r\n            setForgotEmailStste({...forgotEmailState, valid: false});\r\n        }else{\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/forgot`, {\r\n                email: forgotEmailState.value,\r\n                hostname: window.location.host\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 201){\r\n                    // Send a notification\r\n                    openSuccessNotification(text.emailSended[idioma]);\r\n                }\r\n                forgetPassHandler();\r\n\r\n            })\r\n            .catch(err => {\r\n                if(err.response.status === 404){\r\n                    openErrorNotification(text.emailNotFound[idioma]);\r\n                }else{\r\n                    openErrorNotification(text.error[idioma]);\r\n                }\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n    return <ForgotPassView \r\n        idioma={idioma}\r\n        forgotWinState={forgotWinState}\r\n        onChangeForgotEmail={onChangeForgotEmail}\r\n        forgotWinOk={forgotWinOk}\r\n        forgotEmailState={forgotEmailState}\r\n        setForgotEmailStste={setForgotEmailStste}\r\n        forgetPassHandler={forgetPassHandler}\r\n    />;\r\n\r\n}\r\nexport default ForgotPassController;","import React from 'react';\r\nimport ForgotPassController from './forgotPass.controller';\r\n\r\nconst ForgotPass = props => {\r\n\r\n    return <ForgotPassController {...props}/>;\r\n\r\n}\r\nexport default ForgotPass;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport ForgotPass from './forgotpass';\r\nimport text from './idioma.json'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  link: {\r\n    cursor: 'pointer',\r\n    textDecoration: 'none',\r\n    color: theme.palette.text.secondary,\r\n    '&:hover':{\r\n        textDecoration: 'underline',\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function SignIn({idioma, emailRef, passRef, onSignIn, rememberChecked, onRememberChange, \r\n  forgetPassHandler, forgotWinState}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {text.signin[idioma]}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label={text.email[idioma]}\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            inputRef={emailRef}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label={text.password[idioma]}\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            inputRef={passRef}\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" checked={rememberChecked} onChange={onRememberChange}/>}\r\n            label={text.rememberme[idioma]}\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={onSignIn}            \r\n          >\r\n            {text.signin[idioma]}\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Link className={classes.link} onClick={forgetPassHandler}>\r\n                {text.forgotpassword[idioma]}\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n                {\r\n                <RouterLink to=\"/signup\" /*style={{textDecoration: 'none'}}*/ className={classes.link}>\r\n                    \r\n                    {text.gosignup[idioma]}\r\n                    \r\n                </RouterLink>\r\n                }\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <ForgotPass idioma={idioma} forgotWinState={forgotWinState} forgetPassHandler={forgetPassHandler}/>\r\n\r\n    </Container>\r\n  );\r\n}","import React, {useRef, useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useSetRecoilState, useRecoilState} from 'recoil';\r\nimport {idiomaState, /*authTokenState,*/ userAvatarState, loginData, tokenTimeoutAtom} from '../../components/recoil/atoms';\r\nimport Signin from \"./signin.view\";\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport NotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport text from './idioma.json';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\nconst SigninController = props => {\r\n\r\n    const [idioma, setIdiomaState] = useRecoilState(idiomaState);\r\n    //const setAuthTokenState = useSetRecoilState(authTokenState);\r\n    const setUserAvatarState = useSetRecoilState(userAvatarState);\r\n    const setTokenTimeOut = useSetRecoilState(tokenTimeoutAtom);\r\n    const setLoginData = useSetRecoilState(loginData);\r\n    const [redirectState, setRedirect] = useState(null);\r\n    const {openErrorNotification} = NotificationHook();\r\n    const emailRef = useRef('');\r\n    \r\n    const passRef = useRef('');\r\n    const [remember, setRemember] = useState(false);\r\n    const [forgotWinState, setforgotWinState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        \r\n        const optimisticAction = token => {\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/loginWithToken`,{\r\n                token: token\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    const {\r\n                        token, token_expires, _id, nickname, firstName,\r\n                        lastName, email, gender, language, avatarUrl\r\n                    } = resp.data;\r\n    \r\n                    \r\n                    localStorage.setItem('token', token);\r\n                    localStorage.setItem('token_expires', token_expires);\r\n                    setTokenTimeOut({\r\n                        timeleft: token_expires\r\n                    });\r\n    \r\n                    setLoginData({\r\n                        userId: _id, \r\n                        nickname: nickname,\r\n                        firstName: firstName,\r\n                        lastName: lastName,\r\n                        email: email,\r\n                        gender: gender\r\n                    });\r\n                    setIdiomaState(language);\r\n                    setUserAvatarState(`${DEFAULT_CONFIG.server}${avatarUrl}`);\r\n\r\n                    setRedirect(true);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log('Error al cargar los datos del usuario usando el token');\r\n            })\r\n        }\r\n        \r\n        authMiddleware(optimisticAction);\r\n\r\n\r\n\r\n        if(localStorage.email && localStorage.password && localStorage.rememberme){\r\n            emailRef.current.value = localStorage.email;\r\n            passRef.current.value = localStorage.password;\r\n            setRemember(true);\r\n        }\r\n    },[])\r\n\r\n    const forgetPassHandler = () => {\r\n        setforgotWinState(!forgotWinState);\r\n    }\r\n\r\n    \r\n\r\n    const onSignIn = (event) => {\r\n        event.preventDefault();\r\n        \r\n        if(remember === true){\r\n            localStorage.setItem('email', emailRef.current.value);\r\n            localStorage.setItem('password', passRef.current.value);\r\n            localStorage.setItem('rememberme', true);\r\n        }else{\r\n            localStorage.removeItem('email');\r\n            localStorage.removeItem('password');\r\n            localStorage.removeItem('rememberme');\r\n        }\r\n\r\n        axios.post(`${DEFAULT_CONFIG.server}/users/login`, {\r\n            email: emailRef.current.value,\r\n            password: passRef.current.value\r\n        })\r\n        .then(resp => {\r\n            if(resp.status === 200){\r\n                \r\n                const {\r\n                    token, token_expires, _id, nickname, firstName,\r\n                    lastName, email, gender, language, avatarUrl,\r\n                    refresh_token, refresh_token_expires\r\n                } = resp.data;\r\n\r\n                \r\n                localStorage.setItem('token', token);\r\n                localStorage.setItem('refresh_token', refresh_token);\r\n                localStorage.setItem('token_expires', token_expires);\r\n                localStorage.setItem('refresh_token_expires', refresh_token_expires);\r\n                setTokenTimeOut({\r\n                    timeleft: token_expires\r\n                });\r\n\r\n                setLoginData({\r\n                    userId: _id, \r\n                    nickname: nickname,\r\n                    firstName: firstName,\r\n                    lastName: lastName,\r\n                    email: email,\r\n                    gender: gender\r\n                });\r\n                setIdiomaState(language);\r\n                setUserAvatarState(`${DEFAULT_CONFIG.server}${avatarUrl}`);\r\n\r\n                setRedirect(true);\r\n\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if(err.response.status === 403){\r\n                openErrorNotification(text.notAuthorized[idioma]);\r\n            }else{\r\n                openErrorNotification(text.internalError[idioma]);\r\n            }\r\n        });\r\n    }\r\n\r\n    if(redirectState){\r\n        return <Redirect to=\"/contacts\" />\r\n    }\r\n    \r\n    return <Signin idioma={idioma} \r\n        emailRef={emailRef}\r\n        passRef={passRef}\r\n        rememberChecked={remember}\r\n        onRememberChange={event => setRemember(event.target.checked)}\r\n        onSignIn={onSignIn}\r\n        forgotWinState={forgotWinState}\r\n        forgetPassHandler={forgetPassHandler}\r\n    />;\r\n\r\n}\r\n\r\nexport default SigninController;\r\n","import React from 'react';\r\nimport SigninController from './signin.controller';\r\nconst Signin = props => {\r\n\r\n    return <SigninController />;\r\n\r\n}\r\nexport default Signin;","import React from 'react';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n      padding: 0,\r\n      position: 'relative',\r\n      height: '100vh',\r\n      overflowY: 'hidden',\r\n      backgroundColor: theme.palette.background.paper\r\n    }\r\n  }));\r\n\r\nconst MainView = props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" className={classes.container} component=\"main\">\r\n            <CssBaseline />\r\n            {props.children}\r\n        </Container>\r\n    );\r\n\r\n}\r\nexport default MainView;","import React from 'react';\r\nimport ContainerView from './main.view';\r\nconst MainContainer = props => {\r\n\r\n    return <ContainerView {...props}/>;\r\n\r\n}\r\nexport default MainContainer;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\n\r\nimport text from './idioma.json';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  link: {\r\n    cursor: 'pointer',\r\n    textDecoration: 'none',\r\n    color: theme.palette.text.secondary,\r\n    '&:hover':{\r\n        textDecoration: 'underline',\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function SignUp({idioma, onSignUp,emailState, onEmailChange, passState, onPassChange, nameState, onNameChange, lastNameRef}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {text.signup[idioma]}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label={text.firstName[idioma]}\r\n                autoFocus\r\n                value={nameState.value}\r\n                helperText={!nameState.valid ? text[nameState.msg][idioma] : ''}\r\n                error={!nameState.valid}\r\n                onChange={onNameChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label={text.lastName[idioma]}\r\n                name=\"lastName\"\r\n                autoComplete=\"lname\"\r\n                inputRef={lastNameRef}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label={text.email[idioma]}\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                value={emailState.value}\r\n                helperText={!emailState.valid ? text.invalidEmail[idioma] : ''}\r\n                error={!emailState.valid}\r\n                onChange={onEmailChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label={text.password[idioma]}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={passState.value}\r\n                helperText={!passState.valid ? text[passState.msg][idioma] : ''}\r\n                error={!passState.valid}\r\n                onChange={onPassChange}\r\n              />\r\n            </Grid>            \r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={onSignUp}\r\n          >\r\n            {text.signup[idioma]}\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <RouterLink to=\"/\" className={classes.link}>\r\n              {text.signin[idioma]}\r\n              </RouterLink>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import React, {useState, useRef} from 'react';\r\nimport axios from 'axios';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport Signup from './signup.view';\r\nimport {useRecoilValue} from 'recoil';\r\nimport {idiomaState} from '../../components/recoil/atoms';\r\nimport NotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport text from './idioma.json';\r\n\r\nconst SignupController = props => {\r\n    \r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openSuccessNotification, openErrorNotification} = NotificationHook();\r\n    const [emailState, setEmailState] = useState({value: \"\", valid: true});\r\n    const [passState, setPassState] = useState({value: \"\", valid: true});    \r\n    const [nameState, setNameState] = useState({value: \"\", valid: true});    \r\n    \r\n    const lastNameRef = useRef();\r\n\r\n    const onSignUp = (event) => {\r\n        event.preventDefault();\r\n        if(!/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(emailState.value)){\r\n            setEmailState({...emailState, valid: false});\r\n        }else\r\n        if(passState.value.length < 8){\r\n            setPassState({...passState, valid: false, msg: 'passShort'});\r\n        }else\r\n\r\n        if(!/^[a-zA-Z\\']+$/.test(nameState.value)){\r\n            setNameState({...nameState, valid: false, msg: 'nameInvalid'});\r\n        }else\r\n        if(nameState.value.length < 2){\r\n            setNameState({...nameState, valid: false, msg: 'nameShort'});\r\n        }else\r\n        if(nameState.value.length >= 20){\r\n            setNameState({...nameState, valid: false, msg: 'nameLong'});\r\n        }else {\r\n            // All validations pass!\r\n            axios.post(`${DEFAULT_CONFIG.server}/users/signup`, {\r\n                firstName: nameState.value,\r\n                lastName: lastNameRef.current.value,\r\n                email: emailState.value,\r\n                password: passState.value,\r\n                language: idioma,\r\n                hostname: window.location.host\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 201){\r\n                    // Send a notification\r\n                    openSuccessNotification(text.userCreated[idioma]);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                if(err.response.status === 409){\r\n                    openErrorNotification(text.duplicated[idioma]);\r\n                }else{\r\n                    openErrorNotification(text.error[idioma]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    const onNameChange = ({target: {value}}) => {\r\n        setNameState({...nameState, value: value, valid: true});\r\n    }\r\n    const onEmailChange = ({target:{value}}) => {\r\n        setEmailState({...emailState, value: value, valid: true});\r\n    }\r\n    const onPassChange = ({target: {value}}) => {\r\n        setPassState({...passState, value: value, valid: true});\r\n    }\r\n\r\n    return (\r\n        <Signup \r\n            idioma={idioma}\r\n           \r\n            \r\n            lastNameRef={lastNameRef}\r\n            nameState={nameState}\r\n            passState={passState}\r\n            emailState={emailState}\r\n            onSignUp={onSignUp}\r\n            onNameChange={onNameChange}\r\n            onEmailChange={onEmailChange}\r\n            onPassChange={onPassChange}\r\n        />\r\n    );\r\n\r\n}\r\nexport default SignupController;","import React from 'react';\r\nimport SignupController from './signup.controller';\r\n\r\nconst Signup = props => {\r\n\r\n    return <SignupController />;\r\n\r\n}\r\nexport default Signup;","import React from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {Snackbar } from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\n\r\nimport {notificationAtom} from './notification.atom';\r\n\r\n\r\n\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\nconst NotificationView = () => {\r\n    const [notificationState, setNotState] = useRecoilState(notificationAtom);\r\n    \r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        setNotState({...notificationState, open: false});\r\n    };\r\n\r\n    return <Snackbar \r\n        open={notificationState.open}\r\n        autoHideDuration={notificationState.autoHideDuration}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical:'top', horizontal:'center' }}\r\n    >\r\n        <Alert\r\n            onClose={handleClose}\r\n            severity={notificationState.severity}\r\n        >\r\n            {notificationState.msg}\r\n        </Alert>\r\n    </Snackbar>;\r\n\r\n}\r\nexport default NotificationView;","import React from 'react';\r\nimport NotificationView from './notification/notification.view';\r\n//import Backdrop from './backdrop/backdrop.view';\r\n\r\nconst Notification = props => {\r\n\r\n    return (\r\n        <>\r\n            <NotificationView />\r\n            {/*<Backdrop />*/}\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport text from './idioma.json'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  }\r\n}));\r\n\r\nexport default function ChangePassView({idioma, passState, pass2State, onPassChange, onPass2Change, submitPass}) {\r\n  \r\n        const classes = useStyles();\r\n\r\n  return (  \r\n    <Container component=\"main\" maxWidth=\"xs\">  \r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          {text.title[idioma]}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label={text.password[idioma]}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={passState.value}\r\n                onChange={onPassChange}\r\n                helperText={!passState.valid ? text.invalidPass[idioma] : ''}\r\n                error={!passState.valid}\r\n            />\r\n            <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label={text.repeatPassword[idioma]}\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={pass2State.value}\r\n                onChange={onPass2Change}\r\n                helperText={!pass2State.valid ? text.passNotEqual[idioma] : ''}\r\n                error={!pass2State.valid}\r\n            />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={submitPass}            \r\n          >\r\n            {text.changePass[idioma]}\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <RouterLink to=\"/\">\r\n              {text.signin[idioma]}\r\n              </RouterLink>\r\n            </Grid>\r\n          </Grid>\r\n         </form>\r\n      </div>\r\n      </Container>\r\n  );\r\n}","import React, {useState} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\nimport NotificationHook from '../../components/uiComponents/notification/notification.hook';\r\nimport axios from 'axios';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport ChangePassView from './changepass.view';\r\nimport {idiomaState} from './../../components/recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport text from './idioma.json';\r\n\r\nconst ChangePassController = props => {\r\n    \r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const {openErrorNotification, openSuccessNotification} = NotificationHook();\r\n    const [passState, setPassState] = useState({value: \"\", valid: true});\r\n    const [pass2State, setPass2State] = useState({value: \"\", valid: true});\r\n\r\n\r\n    const onPassChange = ({target: {value}}) => {\r\n        setPassState({...passState, value: value, valid: true});\r\n        setPass2State({...pass2State, valid: true});\r\n    }\r\n    const onPass2Change = ({target: {value}}) => {\r\n        setPass2State({...pass2State, value: value, valid: true});\r\n    }\r\n\r\n    const submitPass = (event) => {\r\n        event.preventDefault();\r\n        if(passState.value.length < 8){\r\n            setPassState({...passState, valid: false});\r\n        }else if(pass2State.value !== passState.value){\r\n            setPass2State({...pass2State, valid: false});\r\n        }else {\r\n            const token = props.match.params.token;\r\n            \r\n            axios.post(`${DEFAULT_CONFIG.server}/users/resetpassword`,{\r\n                token: token,\r\n                password: passState.value\r\n            })\r\n            .then(resp => {\r\n                if(resp.status === 200){\r\n                    openSuccessNotification(text.passChangeOk[idioma]);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                openErrorNotification(text.passChangeError[idioma]);\r\n            });\r\n        }\r\n    }\r\n    \r\n    return <ChangePassView idioma={idioma} \r\n            passState={passState}\r\n            pass2State={pass2State}\r\n\r\n            onPassChange={onPassChange}\r\n            onPass2Change={onPass2Change}\r\n            submitPass={submitPass}\r\n            />;\r\n\r\n}\r\n\r\nexport default withRouter(ChangePassController);\r\n","import React from 'react';\r\nimport ChangePassController from './changepass.controller';\r\nconst ChangePass = props => {\r\n\r\n    return <ChangePassController {...props}/>;\r\n\r\n}\r\nexport default ChangePass;","//import React from 'react';\r\nimport {useSetRecoilState} from 'recoil';\r\nimport axios from 'axios';\r\nimport {tokenTimeoutAtom} from '../components/recoil/atoms';\r\nimport useLogout from './useLogout';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration'\r\nimport { useCallback } from 'react';\r\n\r\nconst useRefreshToken = () => {\r\n\r\n    const setTokenTimeout = useSetRecoilState(tokenTimeoutAtom);\r\n    const logout = useLogout();\r\n    \r\n    const refreshToken = useCallback(() => {\r\n        const token = localStorage.getItem('token');\r\n        const refresh_token = localStorage.getItem('refresh_token');\r\n        const refresh_token_expires = localStorage.getItem('refresh_token_expires');\r\n        if (refresh_token && refresh_token_expires && new Date(refresh_token_expires).getTime() > new Date().getTime()) {\r\n            \r\n            return axios.post(`${DEFAULT_CONFIG.server}/users/refreshtoken`, {\r\n                token: token, refresh_token: refresh_token\r\n              })\r\n              .then(resp => {\r\n                if(resp.status === 200){\r\n                  const {new_token, new_refresh_token, new_token_expires, new_refresh_token_expires} = resp.data;\r\n                  localStorage.setItem('token', new_token);\r\n                  localStorage.setItem('refresh_token', new_refresh_token);\r\n                  localStorage.setItem('token_expires', new_token_expires);\r\n                  localStorage.setItem('refresh_token_expires', new_refresh_token_expires);\r\n                  setTokenTimeout({\r\n                        timeleft: new_token_expires\r\n                  })\r\n                }          \r\n              })\r\n              .catch(err => {\r\n                  logout();\r\n              });\r\n    \r\n        }else{\r\n            logout();\r\n        }\r\n    }, [logout, setTokenTimeout])\r\n    \r\n    return refreshToken;\r\n  }\r\n\r\n  export default useRefreshToken;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket'\r\nimport {loginData} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\n\r\nconst UserSubscriber = props => {   \r\n    const client = socket.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n\r\n        client.on('new user', data => {\r\n            console.log('new user');\r\n            \r\n            friendDispatcher({\r\n                action: 'connect', \r\n                payload: {\r\n                    data:data,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.connected\r\n                }\r\n            });\r\n        });\r\n        \r\n        if(userData)\r\n            client.emit('new user', {userId: userData.userId});\r\n\r\n        return () => client.off('new user');\r\n    }, [friendDispatcher, client, userData]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport socket from '../../utils/socket';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst UserSubscriber = props => {\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const client = socket.getSocket();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('user disconnect', data => {\r\n            friendDispatcher({\r\n                action: 'disconnect', \r\n                payload: {\r\n                    socketId: data.socketId,\r\n                    notification: enqueueSnackbar,\r\n                    msg: text.disconnected\r\n                }\r\n            })\r\n        });\r\n\r\n        return () => client.off('user disconnect');\r\n    }, []);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default UserSubscriber;","import React, {useEffect} from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport {chatConversation} from '../recoil/atoms';\r\nimport socket from '../../utils/socket'\r\nconst IncomingMsgSubscriber = props => {\r\n\r\n    const [conversation, setConvertation] = useRecoilState(chatConversation);\r\n    const client = socket.getSocket();\r\n    \r\n    useEffect(() => {\r\n\r\n        client.on('message', data => {\r\n            const newStateObj = {...conversation};\r\n            if(conversation[data.socketId]){\r\n                newStateObj[data.socketId] = {...conversation[data.socketId]};\r\n                if(conversation[data.socketId].text){\r\n                    newStateObj[data.socketId].text = [...conversation[data.socketId].text, {myMsg: false, msg: data.msg}];\r\n                    \r\n                    \r\n\r\n                    if(data.socketId !== newStateObj.active){\r\n                        newStateObj[data.socketId].novistos = newStateObj[data.socketId].novistos + 1; \r\n                    }\r\n                }else{\r\n                    newStateObj[data.socketId].text = [];\r\n                }\r\n                \r\n            }else{\r\n                newStateObj[data.socketId] = {\r\n                    text: [{myMsg: false, msg: data.msg}],\r\n                    nickname: null,\r\n                    socketId: null,\r\n                    novistos: 1\r\n                }\r\n            }\r\n            setConvertation(newStateObj);\r\n        });\r\n\r\n        return () => client.off('message');\r\n    }, [conversation]);\r\n\r\n    return (\r\n        <></>\r\n    );\r\n\r\n}\r\nexport default IncomingMsgSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst DeclinedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('declined friendship', ({declinerId, declinedId, socketIdDecliner, socketIdDeclined}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: declinerId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDecliner}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.declinedInv[idioma]}`, {variant: \"warning\"});\r\n                })\r\n                .catch(err => {\r\n                    if(err.response.status === 404){\r\n                        friendDispatcher({\r\n                            action: 'delete', \r\n                            payload: {\r\n                                friendId: declinerId\r\n                            }});\r\n                    }\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('declined friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeclinedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst RequestFriendSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('requested friendship', ({userIdRequester, userIdRequested, socketIdRequester}) => {\r\n            if(userIdRequested === userData.userId){\r\n                \r\n                \r\n                const optimisticAction = token => {\r\n                    axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                        friendId: userIdRequester\r\n                    },{\r\n                        headers: {\r\n                            'Authorization': token\r\n                        }\r\n                    })\r\n                    .then(resp => {\r\n                        if(resp.status === 200){\r\n                            \r\n                            friendDispatcher({\r\n                                action: 'add', \r\n                                payload: {\r\n                                    friend: {...resp.data.friend, socketId: socketIdRequester}\r\n                                }});\r\n                            return resp.data.friend;\r\n                        }\r\n                    })\r\n                    .then(friend => {\r\n                        enqueueSnackbar(`${friend.nickname} ${text.requestedInv[idioma]}`, {variant: \"success\"});\r\n                    })\r\n                    .catch(err => {\r\n                        openErrorNotification(text.errorLoadingFriends[idioma])\r\n                    });\r\n                }\r\n                authMiddleware(optimisticAction);\r\n                \r\n            }\r\n        });\r\n\r\n        return () => client.off('requested friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RequestFriendSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {loginData, idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst AcceptedFriendshipSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const userData = useRecoilValue(loginData);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('accepted friendship', ({accepterId, socketIdAccepter}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: accepterId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdAccepter}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.accept[idioma]}`, {variant: \"success\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('accepted friendship');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default AcceptedFriendshipSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst DeletedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('deleted contact', ({deleterId, socketIdDeleter}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: deleterId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdDeleter}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.delete[idioma]}`, {variant: \"error\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n                \r\n            \r\n        });\r\n\r\n        return () => client.off('deleted contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default DeletedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport socketClient from '../../utils/socket';\r\nimport {useSetRecoilState, useRecoilValue} from 'recoil';\r\nimport {friendSelector} from '../recoil/selectors';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\nimport {idiomaState} from '../recoil/atoms';\r\nimport {DEFAULT_CONFIG} from '../../conf/configuration';\r\nimport axios from 'axios';\r\nimport useNotifications from '../uiComponents/notification/notification.hook';\r\nimport authMiddleware from '../../authMiddleware';\r\n\r\n\r\nconst BlokedContactSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const idioma = useRecoilValue(idiomaState);\r\n    const {openErrorNotification} = useNotifications();\r\n\r\n    useEffect(() => {\r\n        \r\n        client.on('blocked contact', ({blokerId, socketIdBloked}) => {\r\n            \r\n            const optimisticAction = token => {\r\n                axios.post(`${DEFAULT_CONFIG.server}/users/getFriendById`,{\r\n                    friendId: blokerId\r\n                },{\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    if(resp.status === 200){\r\n                        \r\n                        friendDispatcher({\r\n                            action: 'update', \r\n                            payload: {\r\n                                friend: {...resp.data.friend, socketId: socketIdBloked}\r\n                            }});\r\n                        return resp.data.friend;\r\n                    }\r\n                })\r\n                .then(friend => {\r\n                    enqueueSnackbar(`${friend.nickname} ${text.block[idioma]}`, {variant: \"error\"});\r\n                })\r\n                .catch(err => {\r\n                    openErrorNotification(text.errorLoadingFriends[idioma])\r\n                });\r\n            }\r\n            authMiddleware(optimisticAction);\r\n        });\r\n\r\n        return () => client.off('bloked contact');\r\n    }, [])\r\n\r\n\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default BlokedContactSubscriber;","import React, {useEffect} from 'react';\r\nimport {useSetRecoilState, useRecoilValue, useRecoilState} from 'recoil';\r\nimport socketClient from '../../utils/socket';\r\nimport {addMsgToConversationSelector, friendSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector} from '../recoil/selectors';\r\nimport {loginData, activeChatWith, idiomaState} from '../recoil/atoms';\r\nimport {useSnackbar} from 'notistack';\r\nimport text from './idioma.json';\r\n\r\nconst RecibedMessageSubscriber = props => {\r\n\r\n    const client = socketClient.getSocket();\r\n    const addMsgToConversation = useSetRecoilState(addMsgToConversationSelector);\r\n    const editMsgToStateSaved = useSetRecoilState(editMsgToStateSavedSelector);\r\n    const editAllMsgToReaded = useSetRecoilState(editAllMsgToReadedSelector);\r\n    const userData = useRecoilValue(loginData);\r\n    const activeChatContactId = useRecoilValue(activeChatWith);\r\n    const {enqueueSnackbar} = useSnackbar();\r\n    const [friends, friendDispatcher] = useRecoilState(friendSelector);\r\n    const idioma = useRecoilValue(idiomaState);\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n        client.on('recived message', ({content, userOriginId, socketIdSender, messageId, datetime, consecutive}) => {\r\n            \r\n            const contact = friends.find(f => f.contactId === userOriginId);\r\n            if(activeChatContactId !== userOriginId){                \r\n                enqueueSnackbar(`${contact.nickname} ${text.writingYou[idioma]}`, {variant: 'info'});\r\n\r\n                const dataObj = {\r\n                    [userOriginId]: {\r\n                        cantidad: 1,\r\n                        lastMessage: content,\r\n                        datetime: datetime\r\n                    }\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n            }else{\r\n\r\n                const dataObj = {\r\n                    [userOriginId]: {\r\n                        cantidad: 0,\r\n                        lastMessage: content,\r\n                        datetime: datetime\r\n                    }\r\n                };\r\n                \r\n                friendDispatcher({\r\n                    action: 'set_message_info',\r\n                    payload: {\r\n                        dataObj: dataObj\r\n                    }\r\n                });\r\n\r\n                const client = socketClient.getSocket();\r\n                client.emit('read messages', {\r\n                    userId: userData.userId,\r\n                    contactId: contact.contactId,\r\n                    notifyTo: contact.socketId,\r\n                    token: localStorage.getItem('token')\r\n                });\r\n            }\r\n            addMsgToConversation({\r\n                contactId: userOriginId,\r\n                messageId: messageId,\r\n                content: content,\r\n                datetime: datetime,\r\n                state: 0\r\n            });\r\n        });\r\n\r\n        client.on('saved message', ({contactId, messageId, datetime,consecutive,soketIdContact}) => {\r\n            editMsgToStateSaved({\r\n                contactId: contactId,\r\n                messageId: messageId,\r\n                datetime: datetime,\r\n                consecutive: consecutive\r\n            });\r\n        });\r\n\r\n        client.on('readed messages', ({contactId}) => {\r\n            editAllMsgToReaded({contactId})\r\n        });\r\n\r\n        return () => {\r\n            client.off('recived message');\r\n            client.off('saved message');\r\n            client.off('readed messages');\r\n        };\r\n    });\r\n\r\n    return <></>;\r\n\r\n}\r\nexport default RecibedMessageSubscriber;","import React, {Suspense} from 'react';\r\nimport {useRecoilValue} from 'recoil';\r\n\r\n// Recoil Atoms\r\nimport {subscribeToEventsState, loginData, activeChatWith, tokenTimeoutAtom, darkModeAtom} from './components/recoil/atoms';\r\n\r\n// React router\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\n\r\n// Materia UI\r\nimport { createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { Backdrop, CircularProgress, CssBaseline, IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {SnackbarProvider} from 'notistack';\r\n\r\n// Componentes visuales\r\nimport Signin from './view/signin';\r\nimport MainContainter from './view/main';\r\nimport Signup from './view/signup';\r\nimport UiComponents from './components/uiComponents';\r\nimport ChangePass from './view/changepass';\r\nimport useRefreshToken from './utils/useRefreshToken';\r\n\r\n// Eventos\r\nimport NewUserSubscriber from './components/events/newUserSubscriber';\r\nimport UserDisconnectSubscriber from './components/events/userDisconnectSubscriber';\r\nimport IncomingMsgSubscriber from './components/events/incomingMsgSubscriber';\r\nimport DeclinedFriendshipSubscriber from './components/events/declinedFriendshipSubscriber';\r\nimport RequestFriendSubscriber from './components/events/requestFriendshipSubscriber';\r\nimport AcceptFriendshipSubscriber from './components/events/acceptedFriendshipSubscriber';\r\nimport DeletedContactSubscriber from './components/events/deletedContactSubscriber';\r\nimport BlokedContactSubscriber from './components/events/blokedContactSubscriber';\r\nimport RecibedMessageSubscriber from './components/events/recibedMessageSubscriber';\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import Toolbar from './view/toolbar';\r\n//import MainButton from './view/mainButton';\r\n//import ContactList from './view/contacts';\r\n//import ChatCmp from './view/chat';\r\n//import ActivateUser from './view/activateuser';\r\n\r\nconst AsyncToolbar = React.lazy(() => import('./view/toolbar'));\r\nconst AsyncMainButton = React.lazy(() => import('./view/mainButton'));\r\nconst AsyncContactList = React.lazy(() => import('./view/contacts'));\r\nconst AsyncChatCmp = React.lazy(() => import('./view/chat'));\r\nconst AsyncActivateUser = React.lazy(() => import('./view/activateuser'));\r\n\r\n\r\n\r\nconst TimerCmp = () => {\r\n\r\n    const refreshToken = useRefreshToken();\r\n    const timeoutData = useRecoilValue(tokenTimeoutAtom);\r\n    \r\n    React.useEffect(() => {\r\n        \r\n        let timeleft = new Date(timeoutData.timeleft).getTime() - new Date().getTime();\r\n        if(timeleft >= 10000){\r\n            setTimeout(()=> {\r\n                refreshToken();\r\n            }, timeleft - 10000);\r\n        }\r\n\r\n    }, [timeoutData]);\r\n\r\n    return <></>;\r\n}\r\n\r\nconst themeDark = createMuiTheme({palette: {type: 'dark',}});\r\nconst themeDefault = createMuiTheme({});\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\n\r\nconst App = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const dark = useRecoilValue(darkModeAtom);\r\n    const subscribe = useRecoilValue(subscribeToEventsState);\r\n    const userData = useRecoilValue(loginData);\r\n    const chatWith = useRecoilValue(activeChatWith);\r\n    const notistackRef = React.createRef();\r\n    const onClickDismiss = key => () => { \r\n        notistackRef.current.closeSnackbar(key);\r\n    }\r\n  \r\n    const cmp  = userData !== null \r\n    ? <>\r\n            {\r\n                chatWith \r\n                ? <Suspense fallback={\r\n                    <Backdrop className={classes.backdrop} open={true} >\r\n                        <CircularProgress color=\"inherit\" />\r\n                    </Backdrop>}\r\n                >\r\n                    <AsyncChatCmp />\r\n                </Suspense>\r\n                                    \r\n                : <Route path=\"/contacts\" exact render={ () => (\r\n                    <ThemeProvider theme={dark ? themeDark : themeDefault}>\r\n                        <Suspense fallback={\r\n                            <Backdrop className={classes.backdrop} open={true} >\r\n                                <CircularProgress color=\"inherit\" />\r\n                            </Backdrop>}\r\n                        >\r\n                            <AsyncToolbar />\r\n                            <AsyncMainButton />\r\n                            <AsyncContactList />\r\n                        </Suspense>\r\n                    </ThemeProvider>\r\n                )} />\r\n            }\r\n        </> \r\n    : null ;\r\n\r\n\r\n    return (<ThemeProvider theme={dark ? themeDark : themeDefault}>\r\n       \r\n            <MainContainter>\r\n                <CssBaseline />\r\n                <UiComponents />\r\n                <SnackbarProvider \r\n                    maxSnack={3} \r\n                    autoHideDuration={3000}\r\n                    preventDuplicate\r\n                    anchorOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    ref={notistackRef}\r\n                    action={(key) => (\r\n                        <IconButton onClick={onClickDismiss(key)}>\r\n                            <CloseIcon fontSize=\"small\" style={{color: 'white'}} />\r\n                        </IconButton>\r\n                    )}\r\n                >\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={Signin} />\r\n                        <Route path=\"/signup\" exact component={Signup} />\r\n                        {cmp}\r\n                        <Route path=\"/changepass/:token\" exact component={ChangePass} />\r\n                        \r\n                        \r\n                        \r\n                        <Route path=\"/activateuser/:token/:nickname/:invited\" exact render={() => (\r\n                            <Suspense fallback={\r\n                                <Backdrop className={classes.backdrop} open={true} >\r\n                                    <CircularProgress color=\"inherit\" />\r\n                                </Backdrop>}\r\n                            >\r\n                                <AsyncActivateUser />\r\n                            </Suspense>\r\n                        )} /> \r\n                        <Route path=\"/activateuser/:token/:nickname\" exact render={() => (\r\n                            <Suspense fallback={\r\n                                <Backdrop className={classes.backdrop} open={true} >\r\n                                    <CircularProgress color=\"inherit\" />\r\n                                </Backdrop>}\r\n                            >\r\n                                <AsyncActivateUser />\r\n                            </Suspense>\r\n                        )} /> \r\n                        \r\n                        \r\n                        \r\n                        \r\n                        <Redirect from='/' to='/' />       \r\n                    </Switch>\r\n                    \r\n                    {subscribe ? <>\r\n                            <NewUserSubscriber />\r\n                            <UserDisconnectSubscriber />\r\n                            <IncomingMsgSubscriber />\r\n                            <RequestFriendSubscriber />\r\n                            <DeclinedFriendshipSubscriber />\r\n                            <AcceptFriendshipSubscriber />\r\n                            <DeletedContactSubscriber />\r\n                            <BlokedContactSubscriber />\r\n                            <RecibedMessageSubscriber />\r\n                        </>: null\r\n                    }\r\n                    <TimerCmp />\r\n                </SnackbarProvider>\r\n            </MainContainter>\r\n        </ThemeProvider>);\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {RecoilRoot} from 'recoil';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport 'typeface-roboto';\r\n//import 'fontsource-roboto';\r\n//import \"fontsource-roboto/300.css\"\r\n//import \"fontsource-roboto/400.css\"\r\n//import \"fontsource-roboto/500.css\"\r\n//import \"fontsource-roboto/700.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>      \r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n//serviceWorker.register();\r\n","const AuthMiddleware = async (nextOptimisticAction) => {\r\n    // Revisar si el token esta en timepo\r\n    const token = localStorage.getItem('token');\r\n    const token_expires = localStorage.getItem('token_expires');\r\n\r\n    if (token && token_expires && new Date(token_expires).getTime() > new Date().getTime()) {\r\n      const dataOptimistic = await nextOptimisticAction(token);\r\n      return dataOptimistic;\r\n    } \r\n  }\r\n\r\n  \r\n  export default AuthMiddleware;","\r\nimport {atom, selector} from 'recoil';\r\n\r\nconst getDefaultLanguage= () => {\r\n    let idioma = 'en';\r\n    var userLang = navigator.language || navigator.userLanguage;\r\n    if(/^(es-).+/.test(userLang)){\r\n        idioma = 'es';\r\n    }\r\n    return idioma;\r\n}\r\n\r\nconst idiomaState = atom({\r\n    key: 'idiomaState',\r\n    default: getDefaultLanguage()\r\n});\r\n\r\nconst loginData = atom({\r\n    key: 'loginData',\r\n    default: null\r\n});\r\nconst userAvatarState = atom({\r\n    key: 'userAvatarState',\r\n    default: null\r\n});\r\n\r\n\r\n\r\nconst chatConversation = atom({\r\n    key: 'chatConversation',\r\n    default: {\r\n        'active': false\r\n    }\r\n});\r\n\r\nconst contactListState = atom({\r\n    key: 'contactListState',\r\n    default: []\r\n});\r\n\r\n\r\nconst view = {\r\n    posibleViews: {\r\n        LOGIN: 'LOGIN',\r\n        CONTACTS: 'CONTACTS',\r\n        CHAT: 'CHAT'\r\n    },\r\n    getAtom: atom({\r\n        key: 'view',\r\n        default: 'LOGIN'\r\n    })\r\n};\r\n\r\nconst backdropState = atom({\r\n    key: 'backdropState',\r\n    default: false\r\n});\r\n\r\nconst subscribeToEventsState = atom({\r\n    key: 'subscribeToEventsState',\r\n    default: false\r\n})\r\n\r\nconst addContactViewOpenState = atom({\r\n    key: 'addContactViewOpenState',\r\n    default: false\r\n});\r\n\r\nconst friendsAtom = atom({\r\n    key: 'friendsAtom',\r\n    default: []\r\n});\r\n\r\nconst activeChatWith = atom({\r\n    key: 'activeChatWith',\r\n    default: null\r\n});\r\n\r\nconst getConversationWithContact = contactId => atom({\r\n    key: `conversationWith_${contactId}`,\r\n    default: []\r\n});\r\n\r\nconst messagesAtom = atom({\r\n    key: 'messagesAtom',\r\n    default: null\r\n});\r\n\r\nconst tokenTimeoutAtom = atom({\r\n    key: 'tokenTimeoutAtom',\r\n    default: {\r\n        tokentimeout: 0\r\n    }\r\n});\r\n\r\nconst darkModeAtom = atom({\r\n    key: 'themeAtom',\r\n    default: localStorage.getItem('darkMode') === 'true' ? true : false\r\n});\r\n\r\nexport {idiomaState, loginData, chatConversation, view, contactListState, subscribeToEventsState, \r\n    backdropState, userAvatarState, addContactViewOpenState,\r\n    friendsAtom, \r\n    activeChatWith, messagesAtom, getConversationWithContact, tokenTimeoutAtom, darkModeAtom\r\n};","import {atom} from 'recoil';\r\n\r\nconst notificationAtom = atom({\r\n    key: \"notificationAtom\",\r\n    default: {\r\n        open: false,\r\n        autoHideDuration: 6000,\r\n        severity: 'success',\r\n        msg: \"\"\r\n    }\r\n});\r\n\r\nexport {notificationAtom};"],"sourceRoot":""}