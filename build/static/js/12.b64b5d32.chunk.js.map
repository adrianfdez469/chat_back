{"version":3,"sources":["components/recoil/selectors.js","utils/axiosHook.js","view/mainButton/mainButton.view.js","view/addContact/addContact.view.js","view/addContact/addContact.controller.js","view/addContact/index.js","view/mainButton/mainButton.controller.js","view/mainButton/index.js"],"names":["friendSelector","selector","key","get","friendsAtom","length","sort","f1","f2","friendShipStatus","socketId","email","set","a","action","payload","oldFriends","friends","push","friend","fIndex","findIndex","f","contactId","slice","concat","index","unread","data","dataObj","map","cantidad","lastMsg","lastMessage","datetime","activeChatWith","friendId","oldActive","filter","Array","isArray","idx","dat","userId","conectedFriendName","nickname","updatedFriend","notification","msg","idiomaState","variant","disconectedFriendName","initConversationSelector","conversation","getMessageState","userOriginId","UserDestinyId","readed","getConversationWithContact","oldConversation","message","_id","content","state","userOrigin","userDestiny","addMsgToConversationSelector","newMessageObj","messageId","editMsgToStateSavedSelector","consecutive","modMessage","editAllMsgToReadedSelector","useAxiosHook","useNotificationHook","openErrorNotification","openSuccessNotification","idioma","useRecoilValue","postRequest","url","bodyParams","doFnAfterSuccess","doFnAfterError","messageOnSuccess","messageOnError","authMidleware","token","axios","post","DEFAULT_CONFIG","server","headers","then","resp","catch","err","response","useStyles","makeStyles","theme","speedDial","position","bottom","spacing","right","icon","color","palette","text","secondary","MainButtonView","handleOpen","handleClose","open","openAddContactView","classes","SpeedDial","ariaLabel","className","SpeedDialIcon","onClose","onOpen","SpeedDialAction","tooltipTitle","addContact","tooltipOpen","onClick","sendAll","console","log","alert","dialogContent","padding","search","borderRadius","shape","backgroundColor","fade","common","white","marginLeft","width","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","avatarMan","getContrastText","blue","avatarWoman","pink","UserItem","user","sendFriendRequest","avatarGender","gender","ListItem","ListItemAvatar","Avatar","src","avatarUrl","ListItemText","primary","ListItemSecondaryAction","IconButton","blockinguser","grey","disabled","InputSearch","buscarUsuarios","inputSearchRef","React","useState","searchState","setSearchState","InputBase","onKeyPress","event","charCode","placeholder","root","input","inputProps","value","onChange","target","inputRef","endAdornment","InputAdornment","size","aria-label","AddContactView","closeAddContactWin","users","Dialog","maxWidth","onEntering","aria-labelledby","DialogTitle","id","dialogTitle","title","Divider","DialogContent","dividers","List","style","minHeight","DialogActions","Button","autoFocus","close","AddContactController","props","useRecoilState","addContactViewOpenState","addContactState","setAddContactState","setUsers","useRef","userData","loginData","friendDispatcher","useSetRecoilState","stringPattern","current","start","limit","status","lbErrorLoadingUsers","useEffect","socketClient","getSocket","emit","userIdRequester","userIdRequested","lbErrorSendigFriendRequest","AddContact","MainButtonController","setOpen","addContactViewState","setAddContactViewState","MainButton"],"mappings":"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","file":"static/js/12.b64b5d32.chunk.js","sourcesContent":["import {selector} from 'recoil';\r\n\r\nimport {friendsAtom, idiomaState, getConversationWithContact, activeChatWith} from './atoms';\r\n\r\nconst friendSelector = selector({\r\n    key: 'friendSelector',\r\n    get: ({get}) => {\r\n        if(get(friendsAtom).length > 0){\r\n            const friends = [...get(friendsAtom)];\r\n\r\n            return friends.sort(\r\n                (f1,f2) => {\r\n                    \r\n                    if(f1.friendShipStatus === 1 && f2.friendShipStatus === 1){\r\n                        if(f1.socketId && !f2.socketId) return -1;\r\n                        if(!f1.socketId && f2.socketId) return 1;    \r\n                    }\r\n                    if(f1.friendShipStatus < f2.friendShipStatus) return -1; \r\n                    if(f1.friendShipStatus > f2.friendShipStatus) return 1;\r\n                    if(f1.email < f2.email) return -1; \r\n                    if(f1.email > f2.email) return 1; \r\n                }\r\n            );\r\n        }else{\r\n            return [];\r\n        }\r\n        \r\n    },\r\n    set: async ({set, get}, {action, payload}) => {\r\n\r\n        switch(action){\r\n            case 'initialize': \r\n                set(friendsAtom, oldFriends => {\r\n                    if(oldFriends.length === 0){\r\n                        return payload.friends;\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                break;\r\n            case 'add':\r\n                set(friendsAtom, oldFriends => {\r\n                    const friends = [...oldFriends];\r\n                    friends.push(payload.friend);\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'update':\r\n                set(friendsAtom, oldFriends => {\r\n                    const fIndex = oldFriends.findIndex(f => f.contactId === payload.friend.contactId);\r\n                    const friends = oldFriends.slice(0, fIndex)\r\n                                            .concat([payload.friend])\r\n                                            .concat(oldFriends.slice(fIndex+1));\r\n                    return friends;\r\n                });\r\n                break;\r\n            case 'reset_cant_no_leidos':\r\n                set(friendsAtom, oldFriends => {\r\n                    const index = oldFriends.findIndex(friend => friend.contactId === payload.contactId);\r\n                    return oldFriends.slice(0, index).concat([{...oldFriends[index], unread: 0}]).concat(oldFriends.slice(index+1));\r\n                });\r\n                break;\r\n            case 'set_message_info': // Para poner la cantidad de mensajes sin leer, el ultimo mensaje y la fecha del ultimo mensaje\r\n                set(friendsAtom, oldFriends => {\r\n                    const data = payload.dataObj;\r\n                    const newFriends = oldFriends.map(friend => {\r\n                        if(data[friend.contactId]){\r\n                            let cantidad = 0;\r\n                            if(friend.unread){\r\n                                cantidad = friend.unread;\r\n                            }\r\n                            if(data[friend.contactId].cantidad){\r\n                                cantidad += data[friend.contactId].cantidad; \r\n                            }\r\n                            return {...friend, \r\n                                unread:  cantidad,\r\n                                lastMsg: data[friend.contactId].lastMessage,\r\n                                datetime: data[friend.contactId].datetime\r\n                            }\r\n                        }\r\n                        return friend;\r\n                    });\r\n                    return newFriends;\r\n                });\r\n            break;\r\n            case 'delete':\r\n                const activeChatContactId = get(activeChatWith);\r\n                if(activeChatContactId === payload.friendId){\r\n                    set(activeChatWith, oldActive => {\r\n                        return null;\r\n                    });\r\n                }\r\n                set(friendsAtom, oldFriends => {\r\n                    return oldFriends.filter(f => f.contactId !== payload.friendId);\r\n                });\r\n                break;\r\n            case 'connect':                \r\n                if(Array.isArray(payload.data)){\r\n                    set(friendsAtom, oldFriends => {\r\n                        return oldFriends.map(friend => {\r\n                            const idx = payload.data.findIndex(dat => dat.userId === friend.contactId);\r\n                            if(idx >= 0){\r\n                                return {...friend, socketId: payload.data[idx].socketId};     \r\n                            }\r\n                            return {...friend};\r\n                        });\r\n                    }); \r\n                }else{\r\n\r\n                    const {userId, socketId} = payload.data;\r\n                    let conectedFriendName = null;\r\n                    let friendShipStatus = 0;\r\n                    \r\n                    set(friendsAtom, oldFriends => {\r\n                        const fIndex = oldFriends.findIndex(f => f.contactId === userId);\r\n                        if(fIndex >= 0){\r\n                            conectedFriendName = oldFriends[fIndex].nickname;\r\n                            friendShipStatus = oldFriends[fIndex].friendShipStatus;\r\n                            const updatedFriend = {...oldFriends[fIndex], socketId: socketId };\r\n                        \r\n                            const friends = oldFriends.slice(0, fIndex)\r\n                                                    .concat([updatedFriend])\r\n                                                    .concat(oldFriends.slice(fIndex+1));\r\n                            return friends;\r\n                        }\r\n                        return oldFriends;\r\n                    });\r\n                    if(conectedFriendName && friendShipStatus === 1)\r\n                        payload.notification(`${conectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'info'});\r\n                }                \r\n                break;\r\n            case 'disconnect':\r\n                let disconectedFriendName = null;\r\n                let friendShipStatus = 0;\r\n                \r\n                set(friendsAtom, oldFriends => {\r\n                    \r\n                    const index = oldFriends.findIndex(friend => friend.socketId === payload.socketId);\r\n                    if(index >= 0){\r\n                        disconectedFriendName = oldFriends[index].nickname;\r\n                        friendShipStatus = oldFriends[index].friendShipStatus;\r\n                        return [...oldFriends].slice(0, index).concat([{...oldFriends[index], socketId: null}]).concat(oldFriends.slice(index+1));\r\n                    }\r\n                    return oldFriends;\r\n                });\r\n                if(disconectedFriendName && friendShipStatus === 1)\r\n                    payload.notification(`${disconectedFriendName} ${payload.msg[get(idiomaState)]}`, {variant: 'warning'});\r\n                break;\r\n            \r\n                default: break;\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst messageStates = {\r\n    'NINGUNO': 0, // Cuando no es enviado por el propio usuario, sino que se lo enviaron a el, por lo que los estados no tienen sentido para este tipo de mensajes\r\n    'ENVIADO': 1,\r\n    'GUARDADO': 2,\r\n    'LEIDO': 3\r\n};\r\n\r\nconst initConversationSelector = selector({\r\n    key:'conversationSelector',\r\n    set: ({set}, {contactId, conversation}) => {\r\n\r\n        const getMessageState = (userOriginId, UserDestinyId, contactId, readed) => {\r\n\r\n            if(userOriginId === contactId){\r\n                return 0;\r\n            }else if(UserDestinyId === contactId){\r\n                return readed ? 3 : 2;\r\n            }\r\n        }\r\n\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return conversation.map(message => {\r\n                return {\r\n                    _id: message._id,\r\n                    content: message.content,\r\n                    datetime: message.datetime,\r\n                    state: getMessageState(message.userOrigin, message.userDestiny, contactId, message.readed)\r\n                };\r\n            })\r\n        });\r\n    }\r\n});\r\n\r\nconst addMsgToConversationSelector = selector({\r\n    key: 'addMessageToConversation',\r\n    set: ({set}, {contactId, messageId, content, datetime, state}) => {\r\n        const newMessageObj = {\r\n            _id: messageId,\r\n            content: content,\r\n            datetime: datetime,\r\n            state: state\r\n        };        \r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation.concat([newMessageObj]);\r\n        });\r\n\r\n    }\r\n});\r\n\r\n\r\nconst editMsgToStateSavedSelector = selector({\r\n    key: 'editMsgToStateSavedSelector',\r\n    set: ({set}, {contactId, messageId, datetime, consecutive}) => {\r\n        \r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            \r\n            const index = oldConversation.findIndex(message => message._id === consecutive && message.state === 1);\r\n            if(index >= 0){\r\n                const modMessage = {...oldConversation[index], state: 2, _id: messageId, datetime: datetime};\r\n                return oldConversation.slice(0, index).concat([modMessage]).concat(oldConversation.slice(index+1));\r\n            }\r\n            return oldConversation;\r\n        });\r\n    }\r\n});\r\n\r\nconst editAllMsgToReadedSelector = selector({\r\n    key: 'editAllMsgToSavedSelector',\r\n    set: ({set}, {contactId}) => {\r\n        set(getConversationWithContact(contactId), oldConversation => {\r\n            return oldConversation\r\n                .map(message => {\r\n                    if(message.state !== 0)\r\n                        return {...message, state: 3}\r\n                    else\r\n                        return message;\r\n                });\r\n        });\r\n    }\r\n});\r\n\r\nexport {friendSelector, initConversationSelector, addMsgToConversationSelector, editMsgToStateSavedSelector, editAllMsgToReadedSelector}","//import React from 'react';\r\nimport axios from 'axios';\r\nimport {useRecoilValue} from 'recoil';\r\nimport authMidleware from '../authMiddleware';\r\nimport useNotificationHook from '../components/uiComponents/notification/notification.hook';\r\nimport {DEFAULT_CONFIG} from '../conf/configuration';\r\nimport {idiomaState} from '../components/recoil/atoms';\r\n//import useBackdrop from '../components/uiComponents/backdrop/useBackdrop';\r\n\r\nconst useAxiosHook = () => {\r\n\r\n    const {openErrorNotification, openSuccessNotification} = useNotificationHook();\r\n    const {idioma} = useRecoilValue(idiomaState);\r\n    //const {closeBackDrop, showBackDrop} = useBackdrop();\r\n\r\n    const postRequest = ({url, bodyParams= {}, doFnAfterSuccess=null, doFnAfterError = null, messageOnSuccess=null, messageOnError=null}) => {\r\n        \r\n        const optimisticAction = token => {\r\n            //showBackDrop();\r\n            axios.post(`${DEFAULT_CONFIG.server}${url}`, \r\n                bodyParams, \r\n                {\r\n                    headers: {\r\n                        'Authorization': token\r\n                    }\r\n                })\r\n                .then(resp => {\r\n                    //closeBackDrop();\r\n                    if(messageOnSuccess) openSuccessNotification(messageOnSuccess);\r\n                    if(doFnAfterSuccess) doFnAfterSuccess(resp, token);\r\n                })\r\n                .catch(err => {\r\n                    //closeBackDrop();\r\n                    if(!err.response){\r\n                        const connMsgError = {\"es\": \"Error de conexión\", \"en\": \"Network error\"};\r\n                        openErrorNotification(connMsgError[idioma]);\r\n                    }else if(messageOnError) openErrorNotification(messageOnError);\r\n\r\n                    if(doFnAfterError) doFnAfterError(err);\r\n                })\r\n        }\r\n        /*const pesimisticAction = () => {            \r\n            clearUserData();\r\n        }*/\r\n        \r\n        authMidleware(optimisticAction/*, pesimisticAction*/);\r\n    };   \r\n\r\n\r\n    return {postRequest};\r\n\r\n}\r\nexport default useAxiosHook;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\r\nimport text from './idioma.json'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    speedDial: {\r\n      position: 'absolute',\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n    icon: {\r\n        color: theme.palette.text.secondary\r\n    }\r\n  }));\r\n\r\nconst MainButtonView = ({idioma, handleOpen, handleClose, open, openAddContactView}) => {\r\n\r\n  const classes = useStyles();\r\n  \r\n\r\n    return (\r\n      <>\r\n        <SpeedDial\r\n            ariaLabel=\"SpeedDial tooltip example\"\r\n            className={classes.speedDial}            \r\n            icon={<SpeedDialIcon />}\r\n            onClose={handleClose}\r\n            onOpen={handleOpen}\r\n            open={open}\r\n        >\r\n          <SpeedDialAction\r\n            key='add'\r\n            icon={<PersonAddIcon className={classes.icon}/>}\r\n            tooltipTitle={text.addContact[idioma]}\r\n            tooltipOpen\r\n            onClick={openAddContactView}\r\n          />\r\n          <SpeedDialAction\r\n            key='addgroup'\r\n            icon={<CallSplitIcon className={classes.icon}/>}\r\n            tooltipTitle={text.sendAll[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje de difusion');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          {/*<SpeedDialAction\r\n            key='addgroup'\r\n            icon={<GroupAddIcon className={classes.icon}/>}\r\n            tooltipTitle={text.addGroup[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Crear un grupo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='send'\r\n            icon={<MessageIcon className={classes.icon}/>}\r\n            tooltipTitle={text.sendMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Enviar mensaje a un contacto que no esta en tu lista de contacto');\r\n              alert('Not implemented!')\r\n            }}\r\n          />\r\n          <SpeedDialAction\r\n            key='share'\r\n            icon={<ShareIcon className={classes.icon}/>}\r\n            tooltipTitle={text.shareMsg[idioma]}\r\n            tooltipOpen\r\n            onClick={() => {\r\n              console.log('Compartir la aplicacion por correo electronivo');\r\n              alert('Not implemented!')\r\n            }}\r\n          />*/}\r\n        </SpeedDial>\r\n      </>\r\n    );\r\n\r\n}\r\nexport default MainButtonView;","import React from 'react';\r\n\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { blue, pink, grey } from '@material-ui/core/colors';\r\n\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport text from './idioma.json';\r\nimport { ListItemSecondaryAction } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    /*avatar: {\r\n      backgroundColor: blue[100],\r\n      color: blue[600],\r\n    },*/\r\n    dialogContent: {\r\n      padding: 0\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n          backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },*/\r\n      },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        /*[theme.breakpoints.up('sm')]: {\r\n            width: '12ch',\r\n            '&:focus': {\r\n            width: '20ch',\r\n            },\r\n        },*/\r\n    },\r\n    avatarMan: {\r\n        color: theme.palette.getContrastText(blue[400]),\r\n        backgroundColor: blue[400],\r\n    },\r\n    avatarWoman: {\r\n        color: theme.palette.getContrastText(pink[300]),\r\n        backgroundColor: pink[300],\r\n    }\r\n  }));\r\n\r\nconst AddContactView = ({idioma, closeAddContactWin, open,\r\n    buscarUsuarios, users,\r\n    inputSearchRef,\r\n    sendFriendRequest\r\n}) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Dialog\r\n            maxWidth=\"xs\"\r\n            onEntering={() => {}}\r\n            aria-labelledby=\"confirmation-dialog-title\"\r\n            open={open}\r\n            onClose={closeAddContactWin}\r\n        >\r\n            <DialogTitle id=\"confirmation-dialog-title\" className={classes.dialogTitle}>{text.title[idioma]} </DialogTitle>\r\n            <Divider />\r\n            <InputSearch idioma={idioma} buscarUsuarios={buscarUsuarios} inputSearchRef={inputSearchRef}/>\r\n            <DialogContent dividers className={classes.dialogContent}>\r\n                <List style={{minHeight:'200px'}}>\r\n                    {\r\n                        users.map(user => {\r\n                            return (\r\n                                <UserItem user={user} sendFriendRequest={sendFriendRequest}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </List>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={closeAddContactWin} color=\"primary\">\r\n                    {text.close[idioma]}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n\r\n}\r\n\r\nconst UserItem = ({user, sendFriendRequest}) => {\r\n\r\n    const classes = useStyles();\r\n    //const [iconButtonDisabledState, setIconButtonDisabledState] = React.useState(false)\r\n\r\n    const disableItem = () => {\r\n        //setIconButtonDisabledState(true);\r\n        sendFriendRequest(user.userId);\r\n\r\n    }\r\n\r\n\r\n    const avatarGender = user.gender === \"M\" ? 'avatarMan' : \"avatarWoman\";\r\n\r\n    return (\r\n        <ListItem key={user.email} >\r\n            <ListItemAvatar>\r\n                <Avatar \r\n                    className={user.gender && classes[avatarGender]} \r\n                    //src={DEFAULT_CONFIG.server + user.avatarUrl}\r\n                    src={user.avatarUrl}\r\n                />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={user.nickname}\r\n                secondary={user.email}\r\n            />\r\n            \r\n                <ListItemSecondaryAction>\r\n                    <IconButton color={user.blockinguser ? grey[100] : blue[300]} onClick={disableItem} disabled={user.blockinguser}>\r\n                        <AddIcon color={user.blockinguser ? 'disabled' : \"primary\"}/>\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            \r\n        </ListItem>\r\n    )\r\n\r\n}\r\n\r\nconst InputSearch = ({idioma, buscarUsuarios, inputSearchRef}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [searchState, setSearchState] = React.useState('');\r\n\r\n    const onChangeSearch = ({target: {value}}) => {\r\n        setSearchState(value);\r\n    }\r\n    const clearSearch = () => {\r\n        setSearchState('');\r\n    }\r\n    const keyPressHandler = (event) => {\r\n        if(event.charCode === 13){\r\n            buscarUsuarios();\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className={classes.search}>\r\n                <div className={classes.searchIcon}>\r\n                    <SearchIcon />\r\n                </div>\r\n                <InputBase\r\n                    onKeyPress={keyPressHandler}\r\n                    placeholder={text.search[idioma]}\r\n                    classes={{\r\n                        root: classes.inputRoot,\r\n                        input: classes.inputInput,\r\n                    }}\r\n                    inputProps={{ 'aria-label': 'search' }}\r\n                    value={searchState}\r\n                    onChange={onChangeSearch}\r\n                    inputRef={inputSearchRef}\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            {searchState !== '' ?\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={clearSearch}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            : null}\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                aria-label=\"toggle password visibility\"\r\n                                onClick={buscarUsuarios}\r\n                            >\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                        </InputAdornment> \r\n                        \r\n                    }\r\n                />\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default AddContactView;","import React, {useState, useEffect, useRef} from 'react';\r\nimport {useRecoilValue, useRecoilState, useSetRecoilState} from 'recoil';\r\nimport AddContactView from './addContact.view';\r\nimport text from './idioma.json';\r\nimport {addContactViewOpenState, loginData/*, friendSelector*/} from '../../components/recoil/atoms';\r\nimport {friendSelector} from '../../components/recoil/selectors';\r\nimport useAxiosHook from '../../utils/axiosHook';\r\n\r\nimport {idiomaState} from '../../components/recoil/atoms'\r\nimport socketClient from '../../utils/socket';\r\n\r\nconst AddContactController = props => {\r\n    const idioma = useRecoilValue(idiomaState); \r\n    const [addContactState, setAddContactState] = useRecoilState(addContactViewOpenState);\r\n    const [users, setUsers] = useState([]);\r\n    const inputSearchRef = useRef({value: ''});\r\n    const userData = useRecoilValue(loginData);\r\n    const {postRequest} = useAxiosHook();\r\n\r\n    const friendDispatcher = useSetRecoilState(friendSelector);\r\n    \r\n\r\n    const buscarUsuarios = () => {\r\n        \r\n        postRequest({\r\n            url: '/users/searchContact',\r\n            bodyParams: {\r\n                stringPattern: inputSearchRef.current.value,\r\n                start: 0,\r\n                limit: 20\r\n            },\r\n            doFnAfterSuccess: resp => {\r\n                if(resp.status === 200){\r\n                    setUsers(resp.data.users);\r\n                }\r\n            },\r\n            messageOnError: text.lbErrorLoadingUsers[idioma]\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        buscarUsuarios();\r\n    }, [])\r\n\r\n    const sendFriendRequest = (userId) => {\r\n        \r\n        postRequest({\r\n            url: '/users/sendFriendRequest',\r\n            bodyParams: {\r\n                userId: userId\r\n            },\r\n            doFnAfterSuccess: (resp, token) => {\r\n                if(resp.status === 200){\r\n                    setUsers(users => {\r\n                        return users.filter(user => user.userId !== userId);\r\n                    });\r\n\r\n                    //addContact(resp.data.friend);\r\n                    friendDispatcher({action: 'add', payload: {friend: resp.data.friend}});\r\n                    const client = socketClient.getSocket();\r\n                    client.emit('request friendship', {\r\n                        userIdRequester: userData.userId,\r\n                        userIdRequested: userId,\r\n                        token: token\r\n                    });\r\n                }\r\n            },\r\n            messageOnError: text.lbErrorSendigFriendRequest[idioma]\r\n        });\r\n    }\r\n\r\n    const closeAddContactWin = () => {\r\n        setAddContactState(false);\r\n    }\r\n\r\n    return <AddContactView \r\n        idioma={idioma}\r\n        closeAddContactWin={closeAddContactWin}\r\n        open={addContactState}\r\n\r\n        users={users}\r\n        buscarUsuarios={buscarUsuarios}\r\n\r\n        inputSearchRef={inputSearchRef} \r\n        sendFriendRequest={sendFriendRequest}\r\n    />;\r\n\r\n}\r\nexport default AddContactController;","import React from 'react';\r\nimport AddContactController from './addContact.controller';\r\n\r\nconst AddContact = props => {\r\n\r\n    return <AddContactController />;\r\n\r\n}\r\n\r\nexport default AddContact;","import React, {useState} from 'react';\r\nimport {useRecoilState, useRecoilValue} from 'recoil';\r\nimport MainButtonView from './mainButton.view';\r\nimport AddContact from '../addContact';\r\n\r\n\r\nimport {idiomaState, addContactViewOpenState} from '../../components/recoil/atoms';\r\n\r\nconst MainButtonController = props => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [addContactViewState,setAddContactViewState] = useRecoilState(addContactViewOpenState);\r\n\r\n    const idioma = useRecoilValue(idiomaState);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    \r\n    const openAddContactView = () => {\r\n        setAddContactViewState(true);\r\n    }\r\n\r\n    return <>\r\n        <MainButtonView \r\n            open={open}\r\n            handleOpen={handleOpen}\r\n            handleClose={handleClose}\r\n            idioma={idioma}\r\n            openAddContactView={openAddContactView}\r\n        />\r\n        {addContactViewState ? <AddContact /> : null}\r\n        \r\n    </>;\r\n\r\n}\r\nexport default MainButtonController;","import React from 'react';\r\nimport MainButtonController from './mainButton.controller';\r\nconst MainButton = props => {\r\n\r\n    return <MainButtonController />;\r\n\r\n}\r\nexport default MainButton;"],"sourceRoot":""}